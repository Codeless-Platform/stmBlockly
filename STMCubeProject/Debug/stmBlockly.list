
stmBlockly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001310  08001310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001354  08001354  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001354  08001354  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001354  08001354  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001354  08001354  00011354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800135c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000004  08001360  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08001360  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000793c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013df  00000000  00000000  00027969  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000398  00000000  00000000  00028d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f0  00000000  00000000  000290e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003735  00000000  00000000  000293d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c2b  00000000  00000000  0002cb05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b989  00000000  00000000  00031730  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003d0b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c08  00000000  00000000  0003d134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080012f8 	.word	0x080012f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080012f8 	.word	0x080012f8

08000170 <Keypad_init>:
#include "Keypad.h"

int Keypad_Cols[3];
int Keypad_Rows[4];
GPIO_Registers_t *G_keypad_PORT;
void Keypad_init(keypad_t *keypad) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	 *		to each column sequentially.
	 * The rows are input so if the button is pressed it's connected to GND
	 *
	 */
	GPIO_PinConfig_t pinConfig;
	Keypad_Cols[0] =keypad->C0;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	891b      	ldrh	r3, [r3, #8]
 800017c:	461a      	mov	r2, r3
 800017e:	4b42      	ldr	r3, [pc, #264]	; (8000288 <Keypad_init+0x118>)
 8000180:	601a      	str	r2, [r3, #0]
	Keypad_Cols[1] =keypad->C1;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	895b      	ldrh	r3, [r3, #10]
 8000186:	461a      	mov	r2, r3
 8000188:	4b3f      	ldr	r3, [pc, #252]	; (8000288 <Keypad_init+0x118>)
 800018a:	605a      	str	r2, [r3, #4]
	Keypad_Cols[2] =keypad->C2;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	899b      	ldrh	r3, [r3, #12]
 8000190:	461a      	mov	r2, r3
 8000192:	4b3d      	ldr	r3, [pc, #244]	; (8000288 <Keypad_init+0x118>)
 8000194:	609a      	str	r2, [r3, #8]
	Keypad_Rows[0] =keypad->R0;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	881b      	ldrh	r3, [r3, #0]
 800019a:	461a      	mov	r2, r3
 800019c:	4b3b      	ldr	r3, [pc, #236]	; (800028c <Keypad_init+0x11c>)
 800019e:	601a      	str	r2, [r3, #0]
	Keypad_Rows[1] =keypad->R1;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	885b      	ldrh	r3, [r3, #2]
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b39      	ldr	r3, [pc, #228]	; (800028c <Keypad_init+0x11c>)
 80001a8:	605a      	str	r2, [r3, #4]
	Keypad_Rows[2] =keypad->R2;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	889b      	ldrh	r3, [r3, #4]
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b36      	ldr	r3, [pc, #216]	; (800028c <Keypad_init+0x11c>)
 80001b2:	609a      	str	r2, [r3, #8]
	Keypad_Rows[3] =keypad->R3;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	88db      	ldrh	r3, [r3, #6]
 80001b8:	461a      	mov	r2, r3
 80001ba:	4b34      	ldr	r3, [pc, #208]	; (800028c <Keypad_init+0x11c>)
 80001bc:	60da      	str	r2, [r3, #12]
	G_keypad_PORT = (keypad->Keypad_PORT);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	691b      	ldr	r3, [r3, #16]
 80001c2:	4a33      	ldr	r2, [pc, #204]	; (8000290 <Keypad_init+0x120>)
 80001c4:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < KPD_MAX_COLS; i++) {
 80001c6:	2300      	movs	r3, #0
 80001c8:	61fb      	str	r3, [r7, #28]
 80001ca:	e014      	b.n	80001f6 <Keypad_init+0x86>
		pinConfig.MODE = MODE_OUTPUT_PP;
 80001cc:	2304      	movs	r3, #4
 80001ce:	73bb      	strb	r3, [r7, #14]
		pinConfig.Output_Speed = SPEED_10M;
 80001d0:	2301      	movs	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
		pinConfig.Pin_Number = Keypad_Cols[i];
 80001d4:	4a2c      	ldr	r2, [pc, #176]	; (8000288 <Keypad_init+0x118>)
 80001d6:	69fb      	ldr	r3, [r7, #28]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	81bb      	strh	r3, [r7, #12]
		GPIO_init(keypad->Keypad_PORT, &pinConfig);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	f107 020c 	add.w	r2, r7, #12
 80001e8:	4611      	mov	r1, r2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fd3b 	bl	8000c66 <GPIO_init>
	for (int i = 0; i < KPD_MAX_COLS; i++) {
 80001f0:	69fb      	ldr	r3, [r7, #28]
 80001f2:	3301      	adds	r3, #1
 80001f4:	61fb      	str	r3, [r7, #28]
 80001f6:	69fb      	ldr	r3, [r7, #28]
 80001f8:	2b02      	cmp	r3, #2
 80001fa:	dde7      	ble.n	80001cc <Keypad_init+0x5c>
	}
	for (int i = 0; i < 4; i++) {
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
 8000200:	e012      	b.n	8000228 <Keypad_init+0xb8>
		pinConfig.MODE = MODE_INPUT_PD;
 8000202:	2303      	movs	r3, #3
 8000204:	73bb      	strb	r3, [r7, #14]
		pinConfig.Pin_Number = Keypad_Rows[i];
 8000206:	4a21      	ldr	r2, [pc, #132]	; (800028c <Keypad_init+0x11c>)
 8000208:	69bb      	ldr	r3, [r7, #24]
 800020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020e:	b29b      	uxth	r3, r3
 8000210:	81bb      	strh	r3, [r7, #12]
		GPIO_init(keypad->Keypad_PORT, &pinConfig);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f107 020c 	add.w	r2, r7, #12
 800021a:	4611      	mov	r1, r2
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fd22 	bl	8000c66 <GPIO_init>
	for (int i = 0; i < 4; i++) {
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	3301      	adds	r3, #1
 8000226:	61bb      	str	r3, [r7, #24]
 8000228:	69bb      	ldr	r3, [r7, #24]
 800022a:	2b03      	cmp	r3, #3
 800022c:	dde9      	ble.n	8000202 <Keypad_init+0x92>
	}
	/*
	 * Initialize the PORT to 1 so the Cols are connected VCC
	 * while the ROWs are input_pullup
	 */
	for (int i = 0; i < 4; i++) {
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e00d      	b.n	8000250 <Keypad_init+0xe0>
		GPIO_WritePin(keypad->Keypad_PORT, Keypad_Rows[i], PIN_LOW);
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	6918      	ldr	r0, [r3, #16]
 8000238:	4a14      	ldr	r2, [pc, #80]	; (800028c <Keypad_init+0x11c>)
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	b29b      	uxth	r3, r3
 8000242:	2200      	movs	r2, #0
 8000244:	4619      	mov	r1, r3
 8000246:	f000 fda1 	bl	8000d8c <GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	3301      	adds	r3, #1
 800024e:	617b      	str	r3, [r7, #20]
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	2b03      	cmp	r3, #3
 8000254:	ddee      	ble.n	8000234 <Keypad_init+0xc4>
	}
	for (int i = 0; i < KPD_MAX_COLS; i++) {
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
 800025a:	e00d      	b.n	8000278 <Keypad_init+0x108>
		GPIO_WritePin(keypad->Keypad_PORT, Keypad_Cols[i], PIN_LOW);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	6918      	ldr	r0, [r3, #16]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <Keypad_init+0x118>)
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000268:	b29b      	uxth	r3, r3
 800026a:	2200      	movs	r2, #0
 800026c:	4619      	mov	r1, r3
 800026e:	f000 fd8d 	bl	8000d8c <GPIO_WritePin>
	for (int i = 0; i < KPD_MAX_COLS; i++) {
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	3301      	adds	r3, #1
 8000276:	613b      	str	r3, [r7, #16]
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	2b02      	cmp	r3, #2
 800027c:	ddee      	ble.n	800025c <Keypad_init+0xec>
	}
}
 800027e:	bf00      	nop
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200000d4 	.word	0x200000d4
 800028c:	200000e4 	.word	0x200000e4
 8000290:	200000e0 	.word	0x200000e0

08000294 <Keypad_Get_Key>:
char Keypad_Get_Key() {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0

	int i, j;
	char ret_key = 'A';
 800029a:	2341      	movs	r3, #65	; 0x41
 800029c:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < KPD_MAX_COLS; i++) {  // Cols loop
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e046      	b.n	8000332 <Keypad_Get_Key+0x9e>
		GPIO_WritePin(G_keypad_PORT, Keypad_Cols[i], PIN_HIGH);
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <Keypad_Get_Key+0xb0>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	4a27      	ldr	r2, [pc, #156]	; (8000348 <Keypad_Get_Key+0xb4>)
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	f000 fd69 	bl	8000d8c <GPIO_WritePin>
		for (j = 0; j < 4; j++) { // Rows loop
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	e027      	b.n	8000310 <Keypad_Get_Key+0x7c>
			if (GPIO_ReadPin(G_keypad_PORT, Keypad_Rows[j]) ) {
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <Keypad_Get_Key+0xb0>)
 80002c2:	6818      	ldr	r0, [r3, #0]
 80002c4:	4a21      	ldr	r2, [pc, #132]	; (800034c <Keypad_Get_Key+0xb8>)
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	4619      	mov	r1, r3
 80002d0:	f000 fd45 	bl	8000d5e <GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d017      	beq.n	800030a <Keypad_Get_Key+0x76>
				while (GPIO_ReadPin(G_keypad_PORT, Keypad_Rows[j]) )
 80002da:	bf00      	nop
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <Keypad_Get_Key+0xb0>)
 80002de:	6818      	ldr	r0, [r3, #0]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	; (800034c <Keypad_Get_Key+0xb8>)
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	4619      	mov	r1, r3
 80002ec:	f000 fd37 	bl	8000d5e <GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d1f2      	bne.n	80002dc <Keypad_Get_Key+0x48>
					; // single press
				ret_key = arr_keys[j][i];
 80002f6:	4916      	ldr	r1, [pc, #88]	; (8000350 <Keypad_Get_Key+0xbc>)
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	4613      	mov	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	4413      	add	r3, r2
 8000300:	18ca      	adds	r2, r1, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	71fb      	strb	r3, [r7, #7]
		for (j = 0; j < 4; j++) { // Rows loop
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	3301      	adds	r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	2b03      	cmp	r3, #3
 8000314:	ddd4      	ble.n	80002c0 <Keypad_Get_Key+0x2c>

			}

		}
		GPIO_WritePin(G_keypad_PORT, Keypad_Cols[i], PIN_LOW);
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <Keypad_Get_Key+0xb0>)
 8000318:	6818      	ldr	r0, [r3, #0]
 800031a:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <Keypad_Get_Key+0xb4>)
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000322:	b29b      	uxth	r3, r3
 8000324:	2200      	movs	r2, #0
 8000326:	4619      	mov	r1, r3
 8000328:	f000 fd30 	bl	8000d8c <GPIO_WritePin>
	for (i = 0; i < KPD_MAX_COLS; i++) {  // Cols loop
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3301      	adds	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	2b02      	cmp	r3, #2
 8000336:	ddb5      	ble.n	80002a4 <Keypad_Get_Key+0x10>

	}
	return ret_key;
 8000338:	79fb      	ldrb	r3, [r7, #7]
}
 800033a:	4618      	mov	r0, r3
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000e0 	.word	0x200000e0
 8000348:	200000d4 	.word	0x200000d4
 800034c:	200000e4 	.word	0x200000e4
 8000350:	08001348 	.word	0x08001348

08000354 <lcd_init>:

GPIO_PinConfig_t GPIO_pinConfig;
LCD_t *G_LCD_pinConfig;
static int count = 0;
uint8 MAX_COLS=16 , MAX_ROWS =2;
void lcd_init(LCD_t *LCD_Config) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	 * 5. delay
	 * 6. Clear Screen
	 * 7. Send command 8BIT or 4BIT
	 * 8. Go to Entry Mode
	 */
	G_LCD_pinConfig = LCD_Config;
 800035c:	4a4c      	ldr	r2, [pc, #304]	; (8000490 <lcd_init+0x13c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6013      	str	r3, [r2, #0]
	if (G_LCD_pinConfig->LCD_Size == LCD_2x16)
 8000362:	4b4b      	ldr	r3, [pc, #300]	; (8000490 <lcd_init+0x13c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d106      	bne.n	800037a <lcd_init+0x26>
	{
		MAX_COLS = 16; MAX_ROWS =2;
 800036c:	4b49      	ldr	r3, [pc, #292]	; (8000494 <lcd_init+0x140>)
 800036e:	2210      	movs	r2, #16
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	4b49      	ldr	r3, [pc, #292]	; (8000498 <lcd_init+0x144>)
 8000374:	2202      	movs	r2, #2
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	e016      	b.n	80003a8 <lcd_init+0x54>
	}else if (G_LCD_pinConfig->LCD_Size == LCD_4x16)
 800037a:	4b45      	ldr	r3, [pc, #276]	; (8000490 <lcd_init+0x13c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d106      	bne.n	8000392 <lcd_init+0x3e>
	{
		MAX_COLS = 16; MAX_ROWS =4;
 8000384:	4b43      	ldr	r3, [pc, #268]	; (8000494 <lcd_init+0x140>)
 8000386:	2210      	movs	r2, #16
 8000388:	701a      	strb	r2, [r3, #0]
 800038a:	4b43      	ldr	r3, [pc, #268]	; (8000498 <lcd_init+0x144>)
 800038c:	2204      	movs	r2, #4
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	e00a      	b.n	80003a8 <lcd_init+0x54>
	}else if (G_LCD_pinConfig->LCD_Size == LCD_4x20)
 8000392:	4b3f      	ldr	r3, [pc, #252]	; (8000490 <lcd_init+0x13c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d105      	bne.n	80003a8 <lcd_init+0x54>
	{
		MAX_COLS = 20; MAX_ROWS =4;
 800039c:	4b3d      	ldr	r3, [pc, #244]	; (8000494 <lcd_init+0x140>)
 800039e:	2214      	movs	r2, #20
 80003a0:	701a      	strb	r2, [r3, #0]
 80003a2:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <lcd_init+0x144>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	701a      	strb	r2, [r3, #0]
	}
	// you must wait for the hardware to initialize
		STK_init();
 80003a8:	f000 fe78 	bl	800109c <STK_init>

	STK_delayMs(20);
 80003ac:	2014      	movs	r0, #20
 80003ae:	f000 fe89 	bl	80010c4 <STK_delayMs>
	// set port as ouput to write commands

		for (int i = 0; i < 4; i++) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e017      	b.n	80003e8 <lcd_init+0x94>
			GPIO_pinConfig.Pin_Number = G_LCD_pinConfig->PINS[i];
 80003b8:	4b35      	ldr	r3, [pc, #212]	; (8000490 <lcd_init+0x13c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	3208      	adds	r2, #8
 80003c0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80003c4:	4b35      	ldr	r3, [pc, #212]	; (800049c <lcd_init+0x148>)
 80003c6:	801a      	strh	r2, [r3, #0]
			GPIO_pinConfig.MODE = MODE_OUTPUT_PP;
 80003c8:	4b34      	ldr	r3, [pc, #208]	; (800049c <lcd_init+0x148>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	709a      	strb	r2, [r3, #2]
			GPIO_pinConfig.Output_Speed = SPEED_10M;
 80003ce:	4b33      	ldr	r3, [pc, #204]	; (800049c <lcd_init+0x148>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	70da      	strb	r2, [r3, #3]
			GPIO_init(G_LCD_pinConfig->LCD_PORT, &GPIO_pinConfig);
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <lcd_init+0x13c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	4930      	ldr	r1, [pc, #192]	; (800049c <lcd_init+0x148>)
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fc42 	bl	8000c66 <GPIO_init>
		for (int i = 0; i < 4; i++) {
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b03      	cmp	r3, #3
 80003ec:	dde4      	ble.n	80003b8 <lcd_init+0x64>

		}

	// set three control pins as output and write 0
	GPIO_pinConfig.MODE = MODE_OUTPUT_PP;
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <lcd_init+0x148>)
 80003f0:	2204      	movs	r2, #4
 80003f2:	709a      	strb	r2, [r3, #2]
	GPIO_pinConfig.Pin_Number = G_LCD_pinConfig->ENABLE_SWITCH;
 80003f4:	4b26      	ldr	r3, [pc, #152]	; (8000490 <lcd_init+0x13c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	899a      	ldrh	r2, [r3, #12]
 80003fa:	4b28      	ldr	r3, [pc, #160]	; (800049c <lcd_init+0x148>)
 80003fc:	801a      	strh	r2, [r3, #0]
	GPIO_pinConfig.Output_Speed = SPEED_10M;
 80003fe:	4b27      	ldr	r3, [pc, #156]	; (800049c <lcd_init+0x148>)
 8000400:	2201      	movs	r2, #1
 8000402:	70da      	strb	r2, [r3, #3]
	GPIO_init(G_LCD_pinConfig->LCD_CONTROL_PORT, &GPIO_pinConfig);
 8000404:	4b22      	ldr	r3, [pc, #136]	; (8000490 <lcd_init+0x13c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4924      	ldr	r1, [pc, #144]	; (800049c <lcd_init+0x148>)
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fc2a 	bl	8000c66 <GPIO_init>
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <lcd_init+0x13c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->ENABLE_SWITCH,
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <lcd_init+0x13c>)
 800041a:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800041c:	899b      	ldrh	r3, [r3, #12]
 800041e:	2200      	movs	r2, #0
 8000420:	4619      	mov	r1, r3
 8000422:	f000 fcb3 	bl	8000d8c <GPIO_WritePin>
			PIN_LOW);

	GPIO_pinConfig.MODE = MODE_OUTPUT_PP;
 8000426:	4b1d      	ldr	r3, [pc, #116]	; (800049c <lcd_init+0x148>)
 8000428:	2204      	movs	r2, #4
 800042a:	709a      	strb	r2, [r3, #2]
	GPIO_pinConfig.Pin_Number = G_LCD_pinConfig->REGISTER_SELECT;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <lcd_init+0x13c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	89da      	ldrh	r2, [r3, #14]
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <lcd_init+0x148>)
 8000434:	801a      	strh	r2, [r3, #0]
	GPIO_pinConfig.Output_Speed = SPEED_10M;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <lcd_init+0x148>)
 8000438:	2201      	movs	r2, #1
 800043a:	70da      	strb	r2, [r3, #3]
	GPIO_init(G_LCD_pinConfig->LCD_CONTROL_PORT, &GPIO_pinConfig);
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <lcd_init+0x13c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	4916      	ldr	r1, [pc, #88]	; (800049c <lcd_init+0x148>)
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fc0e 	bl	8000c66 <GPIO_init>
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <lcd_init+0x13c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->REGISTER_SELECT,
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <lcd_init+0x13c>)
 8000452:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000454:	89db      	ldrh	r3, [r3, #14]
 8000456:	2200      	movs	r2, #0
 8000458:	4619      	mov	r1, r3
 800045a:	f000 fc97 	bl	8000d8c <GPIO_WritePin>
			PIN_LOW);

	STK_delayMs(15);
 800045e:	200f      	movs	r0, #15
 8000460:	f000 fe30 	bl	80010c4 <STK_delayMs>
	lcd_Clear_Screen();
 8000464:	f000 fa4a 	bl	80008fc <lcd_Clear_Screen>
	/* Define the lcd Mode by its instruction*/

		// Command that initializes LCD as four bit mode
		lcd_Send_Command(0x02);
 8000468:	2002      	movs	r0, #2
 800046a:	f000 f819 	bl	80004a0 <lcd_Send_Command>
		lcd_Send_Command(FUNCTION_4BIT_2LINES);
 800046e:	2028      	movs	r0, #40	; 0x28
 8000470:	f000 f816 	bl	80004a0 <lcd_Send_Command>

	lcd_Send_Command(ENTRY_MODE);
 8000474:	2006      	movs	r0, #6
 8000476:	f000 f813 	bl	80004a0 <lcd_Send_Command>
	lcd_Send_Command(CURSOR_FIRST_LINE);
 800047a:	2080      	movs	r0, #128	; 0x80
 800047c:	f000 f810 	bl	80004a0 <lcd_Send_Command>
	lcd_Send_Command(DISPLAY_ON_CURSOR_BLINK);
 8000480:	200f      	movs	r0, #15
 8000482:	f000 f80d 	bl	80004a0 <lcd_Send_Command>

}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200000f8 	.word	0x200000f8
 8000494:	20000000 	.word	0x20000000
 8000498:	20000001 	.word	0x20000001
 800049c:	200000f4 	.word	0x200000f4

080004a0 <lcd_Send_Command>:
void lcd_Send_Command(unsigned char command) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	 * 1.Write command to port
	 * 2.Reset control pins
	 * 3.Deactivate and Activate Enable
	 */

		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80004aa:	4b40      	ldr	r3, [pc, #256]	; (80005ac <lcd_Send_Command+0x10c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6898      	ldr	r0, [r3, #8]
				G_LCD_pinConfig->REGISTER_SELECT,
 80004b0:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <lcd_Send_Command+0x10c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80004b4:	89db      	ldrh	r3, [r3, #14]
 80004b6:	2200      	movs	r2, #0
 80004b8:	4619      	mov	r1, r3
 80004ba:	f000 fc67 	bl	8000d8c <GPIO_WritePin>
				PIN_LOW);

		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 80004be:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <lcd_Send_Command+0x10c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	6858      	ldr	r0, [r3, #4]
 80004c4:	4b39      	ldr	r3, [pc, #228]	; (80005ac <lcd_Send_Command+0x10c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	8a19      	ldrh	r1, [r3, #16]
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	f000 fc5a 	bl	8000d8c <GPIO_WritePin>
				GET(command, 4));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 80004d8:	4b34      	ldr	r3, [pc, #208]	; (80005ac <lcd_Send_Command+0x10c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6858      	ldr	r0, [r3, #4]
 80004de:	4b33      	ldr	r3, [pc, #204]	; (80005ac <lcd_Send_Command+0x10c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	8a59      	ldrh	r1, [r3, #18]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 0320 	and.w	r3, r3, #32
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	f000 fc4d 	bl	8000d8c <GPIO_WritePin>
				GET(command, 5));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <lcd_Send_Command+0x10c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6858      	ldr	r0, [r3, #4]
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <lcd_Send_Command+0x10c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	8a99      	ldrh	r1, [r3, #20]
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	f000 fc40 	bl	8000d8c <GPIO_WritePin>
				GET(command, 6));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <lcd_Send_Command+0x10c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6858      	ldr	r0, [r3, #4]
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <lcd_Send_Command+0x10c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	8ad9      	ldrh	r1, [r3, #22]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	f000 fc33 	bl	8000d8c <GPIO_WritePin>
				GET(command, 7));

		STK_delayMs(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fdcc 	bl	80010c4 <STK_delayMs>
		lcd_kick();
 800052c:	f000 f9ee 	bl	800090c <lcd_kick>

		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <lcd_Send_Command+0x10c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6858      	ldr	r0, [r3, #4]
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <lcd_Send_Command+0x10c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	8a19      	ldrh	r1, [r3, #16]
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	f000 fc21 	bl	8000d8c <GPIO_WritePin>
				GET(command, 0));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <lcd_Send_Command+0x10c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6858      	ldr	r0, [r3, #4]
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <lcd_Send_Command+0x10c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	8a59      	ldrh	r1, [r3, #18]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f000 fc14 	bl	8000d8c <GPIO_WritePin>
				GET(command, 1));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <lcd_Send_Command+0x10c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	6858      	ldr	r0, [r3, #4]
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <lcd_Send_Command+0x10c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	8a99      	ldrh	r1, [r3, #20]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f003 0304 	and.w	r3, r3, #4
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	f000 fc07 	bl	8000d8c <GPIO_WritePin>
				GET(command, 2));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <lcd_Send_Command+0x10c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6858      	ldr	r0, [r3, #4]
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <lcd_Send_Command+0x10c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	8ad9      	ldrh	r1, [r3, #22]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f000 fbfa 	bl	8000d8c <GPIO_WritePin>
				GET(command, 3));

		STK_delayMs(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fd93 	bl	80010c4 <STK_delayMs>
		lcd_kick();
 800059e:	f000 f9b5 	bl	800090c <lcd_kick>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000f8 	.word	0x200000f8

080005b0 <lcd_Send_Char>:
void lcd_Send_Char(unsigned char character) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]


		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80005ba:	4b64      	ldr	r3, [pc, #400]	; (800074c <lcd_Send_Char+0x19c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6898      	ldr	r0, [r3, #8]
				G_LCD_pinConfig->REGISTER_SELECT,
 80005c0:	4b62      	ldr	r3, [pc, #392]	; (800074c <lcd_Send_Char+0x19c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80005c4:	89db      	ldrh	r3, [r3, #14]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f000 fbdf 	bl	8000d8c <GPIO_WritePin>
				PIN_HIGH);

		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 80005ce:	4b5f      	ldr	r3, [pc, #380]	; (800074c <lcd_Send_Char+0x19c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6858      	ldr	r0, [r3, #4]
 80005d4:	4b5d      	ldr	r3, [pc, #372]	; (800074c <lcd_Send_Char+0x19c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	8a19      	ldrh	r1, [r3, #16]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 0310 	and.w	r3, r3, #16
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	f000 fbd2 	bl	8000d8c <GPIO_WritePin>
				GET(character, 4));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 80005e8:	4b58      	ldr	r3, [pc, #352]	; (800074c <lcd_Send_Char+0x19c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6858      	ldr	r0, [r3, #4]
 80005ee:	4b57      	ldr	r3, [pc, #348]	; (800074c <lcd_Send_Char+0x19c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	8a59      	ldrh	r1, [r3, #18]
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	f000 fbc5 	bl	8000d8c <GPIO_WritePin>
				GET(character, 5));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 8000602:	4b52      	ldr	r3, [pc, #328]	; (800074c <lcd_Send_Char+0x19c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6858      	ldr	r0, [r3, #4]
 8000608:	4b50      	ldr	r3, [pc, #320]	; (800074c <lcd_Send_Char+0x19c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	8a99      	ldrh	r1, [r3, #20]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f000 fbb8 	bl	8000d8c <GPIO_WritePin>
				GET(character, 6));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 800061c:	4b4b      	ldr	r3, [pc, #300]	; (800074c <lcd_Send_Char+0x19c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6858      	ldr	r0, [r3, #4]
 8000622:	4b4a      	ldr	r3, [pc, #296]	; (800074c <lcd_Send_Char+0x19c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	8ad9      	ldrh	r1, [r3, #22]
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	f000 fbab 	bl	8000d8c <GPIO_WritePin>
				GET(character, 7));
		STK_delayMs(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 fd44 	bl	80010c4 <STK_delayMs>
		lcd_kick();
 800063c:	f000 f966 	bl	800090c <lcd_kick>
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <lcd_Send_Char+0x19c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6858      	ldr	r0, [r3, #4]
 8000646:	4b41      	ldr	r3, [pc, #260]	; (800074c <lcd_Send_Char+0x19c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	8a19      	ldrh	r1, [r3, #16]
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	f000 fb99 	bl	8000d8c <GPIO_WritePin>
				GET(character, 0));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 800065a:	4b3c      	ldr	r3, [pc, #240]	; (800074c <lcd_Send_Char+0x19c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6858      	ldr	r0, [r3, #4]
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <lcd_Send_Char+0x19c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	8a59      	ldrh	r1, [r3, #18]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f000 fb8c 	bl	8000d8c <GPIO_WritePin>
				GET(character, 1));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 8000674:	4b35      	ldr	r3, [pc, #212]	; (800074c <lcd_Send_Char+0x19c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6858      	ldr	r0, [r3, #4]
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <lcd_Send_Char+0x19c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	8a99      	ldrh	r1, [r3, #20]
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	f000 fb7f 	bl	8000d8c <GPIO_WritePin>
				GET(character, 2));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <lcd_Send_Char+0x19c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6858      	ldr	r0, [r3, #4]
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <lcd_Send_Char+0x19c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	8ad9      	ldrh	r1, [r3, #22]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	f000 fb72 	bl	8000d8c <GPIO_WritePin>
				GET(character, 3));
		STK_delayMs(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fd0b 	bl	80010c4 <STK_delayMs>
		lcd_kick();
 80006ae:	f000 f92d 	bl	800090c <lcd_kick>

	if (count == MAX_COLS) {
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <lcd_Send_Char+0x1a0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <lcd_Send_Char+0x1a4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d104      	bne.n	80006ca <lcd_Send_Char+0x11a>
		lcd_GOTO_XY(1, 0);
 80006c0:	2100      	movs	r1, #0
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f8a8 	bl	8000818 <lcd_GOTO_XY>
 80006c8:	e013      	b.n	80006f2 <lcd_Send_Char+0x142>
	}	// if both lines are full clear and start over.
	else if (count == (MAX_COLS * MAX_ROWS)) {
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <lcd_Send_Char+0x1a0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <lcd_Send_Char+0x1a8>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	fb03 f202 	mul.w	r2, r3, r2
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <lcd_Send_Char+0x1a4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d108      	bne.n	80006f2 <lcd_Send_Char+0x142>
		lcd_Clear_Screen();
 80006e0:	f000 f90c 	bl	80008fc <lcd_Clear_Screen>
		lcd_GOTO_XY(0, 0);
 80006e4:	2100      	movs	r1, #0
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f896 	bl	8000818 <lcd_GOTO_XY>
		count = 0;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <lcd_Send_Char+0x1a4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
	}
	if ((G_LCD_pinConfig->LCD_Size == LCD_4x20)
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <lcd_Send_Char+0x19c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d004      	beq.n	8000706 <lcd_Send_Char+0x156>
			|| (G_LCD_pinConfig->LCD_Size == LCD_4x16)) {
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <lcd_Send_Char+0x19c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d119      	bne.n	800073a <lcd_Send_Char+0x18a>
		if (count == MAX_COLS * 2) {
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <lcd_Send_Char+0x1a0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	005a      	lsls	r2, r3, #1
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <lcd_Send_Char+0x1a4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d104      	bne.n	800071e <lcd_Send_Char+0x16e>
			lcd_GOTO_XY(2, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2002      	movs	r0, #2
 8000718:	f000 f87e 	bl	8000818 <lcd_GOTO_XY>
 800071c:	e00d      	b.n	800073a <lcd_Send_Char+0x18a>
		} else if (count == MAX_COLS * 3) {
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <lcd_Send_Char+0x1a0>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	441a      	add	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <lcd_Send_Char+0x1a4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	d103      	bne.n	800073a <lcd_Send_Char+0x18a>
			lcd_GOTO_XY(3, 0);
 8000732:	2100      	movs	r1, #0
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f86f 	bl	8000818 <lcd_GOTO_XY>
		}
	}
	count++;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <lcd_Send_Char+0x1a4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <lcd_Send_Char+0x1a4>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000f8 	.word	0x200000f8
 8000750:	20000000 	.word	0x20000000
 8000754:	20000020 	.word	0x20000020
 8000758:	20000001 	.word	0x20000001

0800075c <lcd_send_String>:
void lcd_send_String(char *string) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	// keeps track of chars count
	int count = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000768:	e048      	b.n	80007fc <lcd_send_String+0xa0>
		count++;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
		lcd_Send_Char(*string++);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff19 	bl	80005b0 <lcd_Send_Char>
		// if first line is full go to second
		if (count == MAX_COLS) {
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <lcd_send_String+0xb0>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4293      	cmp	r3, r2
 8000788:	d104      	bne.n	8000794 <lcd_send_String+0x38>
			lcd_GOTO_XY(1, 0);
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f000 f843 	bl	8000818 <lcd_GOTO_XY>
 8000792:	e011      	b.n	80007b8 <lcd_send_String+0x5c>
		}	// if both lines are full clear and start over.
		else if (count == (MAX_COLS * MAX_ROWS)) {
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <lcd_send_String+0xb0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <lcd_send_String+0xb4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	fb03 f302 	mul.w	r3, r3, r2
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d107      	bne.n	80007b8 <lcd_send_String+0x5c>
			lcd_Clear_Screen();
 80007a8:	f000 f8a8 	bl	80008fc <lcd_Clear_Screen>
			lcd_GOTO_XY(0, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f832 	bl	8000818 <lcd_GOTO_XY>
			count = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
		}
		if ((G_LCD_pinConfig->LCD_Size == LCD_4x20)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <lcd_send_String+0xb8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d004      	beq.n	80007cc <lcd_send_String+0x70>
				|| (G_LCD_pinConfig->LCD_Size == LCD_4x16)) {
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <lcd_send_String+0xb8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d117      	bne.n	80007fc <lcd_send_String+0xa0>
			if (count == MAX_COLS * 2) {
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <lcd_send_String+0xb0>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d104      	bne.n	80007e2 <lcd_send_String+0x86>
				lcd_GOTO_XY(2, 0);
 80007d8:	2100      	movs	r1, #0
 80007da:	2002      	movs	r0, #2
 80007dc:	f000 f81c 	bl	8000818 <lcd_GOTO_XY>
 80007e0:	e00c      	b.n	80007fc <lcd_send_String+0xa0>
			} else if (count == MAX_COLS * 3) {
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <lcd_send_String+0xb0>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d103      	bne.n	80007fc <lcd_send_String+0xa0>
				lcd_GOTO_XY(3, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2003      	movs	r0, #3
 80007f8:	f000 f80e 	bl	8000818 <lcd_GOTO_XY>
	while (*string > 0) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1b2      	bne.n	800076a <lcd_send_String+0xe>
			}
		}

	}
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	20000001 	.word	0x20000001
 8000814:	200000f8 	.word	0x200000f8

08000818 <lcd_GOTO_XY>:
void lcd_GOTO_XY(unsigned char row, unsigned char col) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]

	if (row == 0) {
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10b      	bne.n	8000846 <lcd_GOTO_XY+0x2e>
		if ((col < MAX_COLS) && (col >= 0))
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <lcd_GOTO_XY+0xdc>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	429a      	cmp	r2, r3
 8000836:	d214      	bcs.n	8000862 <lcd_GOTO_XY+0x4a>
			lcd_Send_Command(CURSOR_FIRST_LINE + col);
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	3b80      	subs	r3, #128	; 0x80
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe2e 	bl	80004a0 <lcd_Send_Command>
 8000844:	e00d      	b.n	8000862 <lcd_GOTO_XY+0x4a>
	} else if (row == 1) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d10a      	bne.n	8000862 <lcd_GOTO_XY+0x4a>
		if ((col < MAX_COLS) && (col >= 0))
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <lcd_GOTO_XY+0xdc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	79ba      	ldrb	r2, [r7, #6]
 8000852:	429a      	cmp	r2, r3
 8000854:	d205      	bcs.n	8000862 <lcd_GOTO_XY+0x4a>
			lcd_Send_Command(CURSOR_SECOND_LINE + col);
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	3b40      	subs	r3, #64	; 0x40
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe1f 	bl	80004a0 <lcd_Send_Command>
	}
	if (G_LCD_pinConfig->LCD_Size == LCD_4x20) {
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <lcd_GOTO_XY+0xe0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d11d      	bne.n	80008a8 <lcd_GOTO_XY+0x90>
		if (row == 2) {
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d10b      	bne.n	800088a <lcd_GOTO_XY+0x72>
			if ((col < MAX_COLS) && (col >= 0))
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <lcd_GOTO_XY+0xdc>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	429a      	cmp	r2, r3
 800087a:	d237      	bcs.n	80008ec <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_THIRD_LINE_20 + col);
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	3b6c      	subs	r3, #108	; 0x6c
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe0c 	bl	80004a0 <lcd_Send_Command>
			if ((col < MAX_COLS) && (col >= 0))
				lcd_Send_Command(CURSOR_FOURTH_LINE_16 + col);
		}
	}

}
 8000888:	e030      	b.n	80008ec <lcd_GOTO_XY+0xd4>
		} else if (row == 3) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d12d      	bne.n	80008ec <lcd_GOTO_XY+0xd4>
			if ((col < MAX_COLS) && (col >= 0))
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <lcd_GOTO_XY+0xdc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	79ba      	ldrb	r2, [r7, #6]
 8000896:	429a      	cmp	r2, r3
 8000898:	d228      	bcs.n	80008ec <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_FOURTH_LINE_20 + col);
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	3b2c      	subs	r3, #44	; 0x2c
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fdfd 	bl	80004a0 <lcd_Send_Command>
}
 80008a6:	e021      	b.n	80008ec <lcd_GOTO_XY+0xd4>
	} else if (G_LCD_pinConfig->LCD_Size == LCD_4x16) {
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <lcd_GOTO_XY+0xe0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d11c      	bne.n	80008ec <lcd_GOTO_XY+0xd4>
		if (row == 2) {
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d10b      	bne.n	80008d0 <lcd_GOTO_XY+0xb8>
			if ((col < MAX_COLS) && (col >= 0))
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <lcd_GOTO_XY+0xdc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d214      	bcs.n	80008ec <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_THIRD_LINE_16 + col);
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	3b70      	subs	r3, #112	; 0x70
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fde9 	bl	80004a0 <lcd_Send_Command>
}
 80008ce:	e00d      	b.n	80008ec <lcd_GOTO_XY+0xd4>
		} else if (row == 3) {
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d10a      	bne.n	80008ec <lcd_GOTO_XY+0xd4>
			if ((col < MAX_COLS) && (col >= 0))
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <lcd_GOTO_XY+0xdc>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	79ba      	ldrb	r2, [r7, #6]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d205      	bcs.n	80008ec <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_FOURTH_LINE_16 + col);
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	3b30      	subs	r3, #48	; 0x30
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fdda 	bl	80004a0 <lcd_Send_Command>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	200000f8 	.word	0x200000f8

080008fc <lcd_Clear_Screen>:
void lcd_Clear_Screen() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	lcd_Send_Command(CLEAR_SCREEN);
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fdcd 	bl	80004a0 <lcd_Send_Command>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <lcd_kick>:

	sprintf(str, "%s%d.%04d", tmpSign, tmpVal, Frac);
	lcd_send_String(str);

}
void lcd_kick() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
// Enable =0 >> LCD Busy
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <lcd_kick+0x38>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->ENABLE_SWITCH,
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <lcd_kick+0x38>)
 8000918:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	f000 fa34 	bl	8000d8c <GPIO_WritePin>
			PIN_HIGH);
	STK_delayMs(50);
 8000924:	2032      	movs	r0, #50	; 0x32
 8000926:	f000 fbcd 	bl	80010c4 <STK_delayMs>
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <lcd_kick+0x38>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->ENABLE_SWITCH, PIN_LOW);
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <lcd_kick+0x38>)
 8000932:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	f000 fa27 	bl	8000d8c <GPIO_WritePin>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000f8 	.word	0x200000f8

08000948 <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <EXTI0_IRQHandler+0x1c>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <EXTI0_IRQHandler+0x1c>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <EXTI0_IRQHandler+0x20>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4798      	blx	r3
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010400 	.word	0x40010400
 8000968:	200000fc 	.word	0x200000fc

0800096c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <EXTI1_IRQHandler+0x1c>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <EXTI1_IRQHandler+0x1c>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <EXTI1_IRQHandler+0x20>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4798      	blx	r3
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010400 	.word	0x40010400
 800098c:	200000fc 	.word	0x200000fc

08000990 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <EXTI2_IRQHandler+0x1c>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <EXTI2_IRQHandler+0x1c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <EXTI2_IRQHandler+0x20>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	4798      	blx	r3
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40010400 	.word	0x40010400
 80009b0:	200000fc 	.word	0x200000fc

080009b4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <EXTI3_IRQHandler+0x1c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <EXTI3_IRQHandler+0x1c>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <EXTI3_IRQHandler+0x20>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4798      	blx	r3
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010400 	.word	0x40010400
 80009d4:	200000fc 	.word	0x200000fc

080009d8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <EXTI4_IRQHandler+0x1c>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <EXTI4_IRQHandler+0x1c>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <EXTI4_IRQHandler+0x20>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010400 	.word	0x40010400
 80009f8:	200000fc 	.word	0x200000fc

080009fc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d009      	beq.n	8000a20 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a24      	ldr	r2, [pc, #144]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <EXTI9_5_IRQHandler+0xac>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 8000a1e:	e03e      	b.n	8000a9e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a36:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <EXTI9_5_IRQHandler+0xac>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4798      	blx	r3
}
 8000a3e:	e02e      	b.n	8000a9e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d009      	beq.n	8000a60 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a56:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <EXTI9_5_IRQHandler+0xac>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	4798      	blx	r3
}
 8000a5e:	e01e      	b.n	8000a9e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d009      	beq.n	8000a80 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <EXTI9_5_IRQHandler+0xac>)
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	4798      	blx	r3
}
 8000a7e:	e00e      	b.n	8000a9e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <EXTI9_5_IRQHandler+0xa8>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <EXTI9_5_IRQHandler+0xac>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	4798      	blx	r3
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010400 	.word	0x40010400
 8000aa8:	200000fc 	.word	0x200000fc

08000aac <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	4a2c      	ldr	r2, [pc, #176]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <EXTI15_10_IRQHandler+0xcc>)
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 8000ace:	e04e      	b.n	8000b6e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d009      	beq.n	8000af0 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae6:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <EXTI15_10_IRQHandler+0xcc>)
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	4798      	blx	r3
}
 8000aee:	e03e      	b.n	8000b6e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d009      	beq.n	8000b10 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b06:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <EXTI15_10_IRQHandler+0xcc>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4798      	blx	r3
}
 8000b0e:	e02e      	b.n	8000b6e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d009      	beq.n	8000b30 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b26:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <EXTI15_10_IRQHandler+0xcc>)
 8000b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2c:	4798      	blx	r3
}
 8000b2e:	e01e      	b.n	8000b6e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d009      	beq.n	8000b50 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <EXTI15_10_IRQHandler+0xcc>)
 8000b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4c:	4798      	blx	r3
}
 8000b4e:	e00e      	b.n	8000b6e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <EXTI15_10_IRQHandler+0xc8>)
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b66:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <EXTI15_10_IRQHandler+0xcc>)
 8000b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6c:	4798      	blx	r3
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010400 	.word	0x40010400
 8000b78:	200000fc 	.word	0x200000fc

08000b7c <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b80      	cmp	r3, #128	; 0x80
 8000b8e:	d049      	beq.n	8000c24 <Get_CRLH_Position+0xa8>
 8000b90:	2b80      	cmp	r3, #128	; 0x80
 8000b92:	dc11      	bgt.n	8000bb8 <Get_CRLH_Position+0x3c>
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d039      	beq.n	8000c0c <Get_CRLH_Position+0x90>
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	dc06      	bgt.n	8000baa <Get_CRLH_Position+0x2e>
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d02f      	beq.n	8000c00 <Get_CRLH_Position+0x84>
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d030      	beq.n	8000c06 <Get_CRLH_Position+0x8a>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d028      	beq.n	8000bfa <Get_CRLH_Position+0x7e>
 8000ba8:	e057      	b.n	8000c5a <Get_CRLH_Position+0xde>
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d034      	beq.n	8000c18 <Get_CRLH_Position+0x9c>
 8000bae:	2b40      	cmp	r3, #64	; 0x40
 8000bb0:	d035      	beq.n	8000c1e <Get_CRLH_Position+0xa2>
 8000bb2:	2b10      	cmp	r3, #16
 8000bb4:	d02d      	beq.n	8000c12 <Get_CRLH_Position+0x96>
 8000bb6:	e050      	b.n	8000c5a <Get_CRLH_Position+0xde>
 8000bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bbc:	d03e      	beq.n	8000c3c <Get_CRLH_Position+0xc0>
 8000bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bc2:	dc09      	bgt.n	8000bd8 <Get_CRLH_Position+0x5c>
 8000bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc8:	d032      	beq.n	8000c30 <Get_CRLH_Position+0xb4>
 8000bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bce:	d032      	beq.n	8000c36 <Get_CRLH_Position+0xba>
 8000bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd4:	d029      	beq.n	8000c2a <Get_CRLH_Position+0xae>
 8000bd6:	e040      	b.n	8000c5a <Get_CRLH_Position+0xde>
 8000bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bdc:	d034      	beq.n	8000c48 <Get_CRLH_Position+0xcc>
 8000bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be2:	dc03      	bgt.n	8000bec <Get_CRLH_Position+0x70>
 8000be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000be8:	d02b      	beq.n	8000c42 <Get_CRLH_Position+0xc6>
 8000bea:	e036      	b.n	8000c5a <Get_CRLH_Position+0xde>
 8000bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bf0:	d02d      	beq.n	8000c4e <Get_CRLH_Position+0xd2>
 8000bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bf6:	d02d      	beq.n	8000c54 <Get_CRLH_Position+0xd8>
 8000bf8:	e02f      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_0:
		shift = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]
		break;
 8000bfe:	e02c      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_1:
		shift = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	73fb      	strb	r3, [r7, #15]
		break;
 8000c04:	e029      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_2:
		shift = 8;
 8000c06:	2308      	movs	r3, #8
 8000c08:	73fb      	strb	r3, [r7, #15]
		break;
 8000c0a:	e026      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_3:
		shift = 12;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	73fb      	strb	r3, [r7, #15]
		break;
 8000c10:	e023      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_4:
		shift = 16;
 8000c12:	2310      	movs	r3, #16
 8000c14:	73fb      	strb	r3, [r7, #15]
		break;
 8000c16:	e020      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_5:
		shift = 20;
 8000c18:	2314      	movs	r3, #20
 8000c1a:	73fb      	strb	r3, [r7, #15]
		break;
 8000c1c:	e01d      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_6:
		shift = 24;
 8000c1e:	2318      	movs	r3, #24
 8000c20:	73fb      	strb	r3, [r7, #15]
		break;
 8000c22:	e01a      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_7:
		shift = 28;
 8000c24:	231c      	movs	r3, #28
 8000c26:	73fb      	strb	r3, [r7, #15]
		break;
 8000c28:	e017      	b.n	8000c5a <Get_CRLH_Position+0xde>

	case PIN_8:
		shift = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c2e:	e014      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_9:
		shift = 4;
 8000c30:	2304      	movs	r3, #4
 8000c32:	73fb      	strb	r3, [r7, #15]
		break;
 8000c34:	e011      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_10:
		shift = 8;
 8000c36:	2308      	movs	r3, #8
 8000c38:	73fb      	strb	r3, [r7, #15]
		break;
 8000c3a:	e00e      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_11:
		shift = 12;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	73fb      	strb	r3, [r7, #15]
		break;
 8000c40:	e00b      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_12:
		shift = 16;
 8000c42:	2310      	movs	r3, #16
 8000c44:	73fb      	strb	r3, [r7, #15]
		break;
 8000c46:	e008      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_13:
		shift = 20;
 8000c48:	2314      	movs	r3, #20
 8000c4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000c4c:	e005      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_14:
		shift = 24;
 8000c4e:	2318      	movs	r3, #24
 8000c50:	73fb      	strb	r3, [r7, #15]
		break;
 8000c52:	e002      	b.n	8000c5a <Get_CRLH_Position+0xde>
	case PIN_15:
		shift = 28;
 8000c54:	231c      	movs	r3, #28
 8000c56:	73fb      	strb	r3, [r7, #15]
		break;
 8000c58:	bf00      	nop

	}
	return shift;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	2bff      	cmp	r3, #255	; 0xff
 8000c7a:	d801      	bhi.n	8000c80 <GPIO_init+0x1a>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	e001      	b.n	8000c84 <GPIO_init+0x1e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3304      	adds	r3, #4
 8000c84:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff76 	bl	8000b7c <Get_CRLH_Position>
 8000c90:	4603      	mov	r3, r0
 8000c92:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d00b      	beq.n	8000ccc <GPIO_init+0x66>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d007      	beq.n	8000ccc <GPIO_init+0x66>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	789b      	ldrb	r3, [r3, #2]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d003      	beq.n	8000ccc <GPIO_init+0x66>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	d10e      	bne.n	8000cea <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| (pinConfig->Output_Speed)) & 0x0f);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	b25a      	sxtb	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	78db      	ldrb	r3, [r3, #3]
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	75fb      	strb	r3, [r7, #23]
 8000ce8:	e02c      	b.n	8000d44 <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d003      	beq.n	8000cfa <GPIO_init+0x94>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d107      	bne.n	8000d0a <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	75fb      	strb	r3, [r7, #23]
 8000d08:	e01c      	b.n	8000d44 <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	789b      	ldrb	r3, [r3, #2]
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d102      	bne.n	8000d18 <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 8000d12:	2304      	movs	r3, #4
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e015      	b.n	8000d44 <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 8000d18:	2308      	movs	r3, #8
 8000d1a:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d107      	bne.n	8000d34 <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	e007      	b.n	8000d44 <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	8812      	ldrh	r2, [r2, #0]
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	7df9      	ldrb	r1, [r7, #23]
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	431a      	orrs	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <GPIO_ReadPin>:
 * @brief 			- Reads the value of PINy in PORTx
 * @param [in]	    - GPIOx : Select the port where the x can be (A..E depending on device used)
 * @param [out]	    - pinNumber : Must be a value from @ref GPIO_PINS_define
 * @retval 			- the input value based on @ref GPIO_PIN_VALUE
 */
uint8 GPIO_ReadPin(GPIO_Registers_t *GPIOx, uint16 pinNumber) {
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	807b      	strh	r3, [r7, #2]
	uint8 pin_status;
	if ((GPIOx->IDR & pinNumber) != (uint32) PIN_LOW) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <GPIO_ReadPin+0x1e>
		pin_status = PIN_HIGH;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e001      	b.n	8000d80 <GPIO_ReadPin+0x22>
	} else {
		pin_status = PIN_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
	}
	return pin_status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <GPIO_WritePin>:
 * @param [in]	    - GPIOx : Select the port where the x can be (A..E depending on device used)
 * @param [in]	    - pinNumber : Must be a value from @ref GPIO_PINS_define
 * @param [in]	    - value : either HIGH or LOW from @ref GPIO_PIN_VALUE
 * @retval 			- none
 */
void GPIO_WritePin(GPIO_Registers_t *GPIOx, uint16 pinNumber, uint8 value) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	707b      	strb	r3, [r7, #1]
	if (value != PIN_LOW) {
 8000d9c:	787b      	ldrb	r3, [r7, #1]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <GPIO_WritePin+0x24>
		GPIOx->ODR |= (uint32)(pinNumber);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60da      	str	r2, [r3, #12]
	} else {
		GPIOx->ODR &= ~((uint32)(pinNumber));
	}
}
 8000dae:	e006      	b.n	8000dbe <GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32)(pinNumber));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60da      	str	r2, [r3, #12]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <I2C1_EV_IRQHandler>:
}
uint8 I2C_Slave_RX(I2C_Registers_t *I2Cx){
	return (uint8)I2Cx->DR;
}

void I2C1_EV_IRQHandler(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
	volatile uint32 dummy_read = 0 ;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
	I2C_Registers_t* I2Cx = I2C1 ;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <I2C1_EV_IRQHandler+0xe8>)
 8000dd4:	617b      	str	r3, [r7, #20]
		//Interrupt handling for both master and slave mode of a device
		uint32 temp1, temp2, temp3;

		temp1   = I2Cx->CR2 & (  1<<9) ;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dde:	613b      	str	r3, [r7, #16]
		temp2   = I2Cx->CR2 & ( 1<<10) ;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de8:	60fb      	str	r3, [r7, #12]
		temp3  = I2Cx->SR1 & ( 1<<8);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	60bb      	str	r3, [r7, #8]


		// Handle For interrupt generated by STOPF event
			// Note : Stop detection flag is applicable only slave mode
			if(temp1 && temp3)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00a      	beq.n	8000e10 <I2C1_EV_IRQHandler+0x48>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d007      	beq.n	8000e10 <I2C1_EV_IRQHandler+0x48>
			{
				//STOF flag is set
				//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
				I2Cx->CR1 |= 0x0000;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	601a      	str	r2, [r3, #0]
				Slave_States(I2Cx,EV_STOP);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f000 f852 	bl	8000eb4 <Slave_States>


			}
			//----------------------------------------------------------
			temp3  = I2Cx->SR1 & (1<<1);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by ADDR event
			//Note : When master mode : Address is sent
			//		 When Slave mode   : Address matched with own address
			if(temp1 && temp3)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d012      	beq.n	8000e46 <I2C1_EV_IRQHandler+0x7e>
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00f      	beq.n	8000e46 <I2C1_EV_IRQHandler+0x7e>
			{
				// interrupt is generated because of ADDR event
				//check for device mode
				if(I2Cx->SR2 & ( 1<<0))
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d109      	bne.n	8000e46 <I2C1_EV_IRQHandler+0x7e>

				}else
				{
					//slave mode
					//clear the ADDR flag ( read SR1 , read SR2)
					dummy_read = I2Cx->SR1;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	607b      	str	r3, [r7, #4]
					dummy_read = I2Cx->SR2;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	607b      	str	r3, [r7, #4]
					Slave_States(I2Cx,EV_ADDR_Matched);
 8000e3e:	2102      	movs	r1, #2
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f000 f837 	bl	8000eb4 <Slave_States>

				}
			}
			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<7);
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4e:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by TXE event
			if(temp1 && temp2 && temp3)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00f      	beq.n	8000e76 <I2C1_EV_IRQHandler+0xae>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00c      	beq.n	8000e76 <I2C1_EV_IRQHandler+0xae>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d009      	beq.n	8000e76 <I2C1_EV_IRQHandler+0xae>
			{
				//Check for device mode
				if(I2Cx->SR2 & (1<<0))
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d103      	bne.n	8000e76 <I2C1_EV_IRQHandler+0xae>
				{

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REQ);
 8000e6e:	2103      	movs	r1, #3
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f000 f81f 	bl	8000eb4 <Slave_States>
				}
			}

			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<6);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
			if(temp1 && temp2 && temp3)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <I2C1_EV_IRQHandler+0xde>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00c      	beq.n	8000ea6 <I2C1_EV_IRQHandler+0xde>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <I2C1_EV_IRQHandler+0xde>
			{
				//check device mode .
				if(I2Cx->SR2 & ( 1<<0))
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <I2C1_EV_IRQHandler+0xde>
					//The device is master

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REC);
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f000 f807 	bl	8000eb4 <Slave_States>

				}
			}
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40005400 	.word	0x40005400

08000eb4 <Slave_States>:


void Slave_States (I2C_Registers_t* I2Cx  ,Slave_state state)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_Index: I2C2_Index ;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <Slave_States+0xc0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d84a      	bhi.n	8000f6c <Slave_States+0xb8>
 8000ed6:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <Slave_States+0x28>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000ef7 	.word	0x08000ef7
 8000ee0:	08000ef1 	.word	0x08000ef1
 8000ee4:	08000f15 	.word	0x08000f15
 8000ee8:	08000f27 	.word	0x08000f27
 8000eec:	08000f45 	.word	0x08000f45
	{

	case ERR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000ef4:	e03a      	b.n	8000f6c <Slave_States+0xb8>
	}

	case EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d02f      	beq.n	8000f62 <Slave_States+0xae>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_STOP) ;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <Slave_States+0xc4>)
 8000f06:	015b      	lsls	r3, r3, #5
 8000f08:	4413      	add	r3, r2
 8000f0a:	331c      	adds	r3, #28
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2000      	movs	r0, #0
 8000f10:	4798      	blx	r3
		}

		break ;
 8000f12:	e026      	b.n	8000f62 <Slave_States+0xae>
	}

	case EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_ADDR_Matched) ;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <Slave_States+0xc4>)
 8000f18:	015b      	lsls	r3, r3, #5
 8000f1a:	4413      	add	r3, r2
 8000f1c:	331c      	adds	r3, #28
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2002      	movs	r0, #2
 8000f22:	4798      	blx	r3


		break ;
 8000f24:	e022      	b.n	8000f6c <Slave_States+0xb8>
	}

	case EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d019      	beq.n	8000f66 <Slave_States+0xb2>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REQ) ;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <Slave_States+0xc4>)
 8000f36:	015b      	lsls	r3, r3, #5
 8000f38:	4413      	add	r3, r2
 8000f3a:	331c      	adds	r3, #28
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2003      	movs	r0, #3
 8000f40:	4798      	blx	r3

		}

		break ;
 8000f42:	e010      	b.n	8000f66 <Slave_States+0xb2>
	}
	case EV_DATA_REC:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( 1<<2)))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10c      	bne.n	8000f6a <Slave_States+0xb6>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REC) ;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <Slave_States+0xc4>)
 8000f54:	015b      	lsls	r3, r3, #5
 8000f56:	4413      	add	r3, r2
 8000f58:	331c      	adds	r3, #28
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	4798      	blx	r3

		}

		break ;
 8000f60:	e003      	b.n	8000f6a <Slave_States+0xb6>
		break ;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <Slave_States+0xb8>
		break ;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <Slave_States+0xb8>
		break ;
 8000f6a:	bf00      	nop
	}
	}

}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40005400 	.word	0x40005400
 8000f78:	20000024 	.word	0x20000024

08000f7c <RCC_CLK_EN>:
		break;

	}
}

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d00f      	beq.n	8000fb2 <RCC_CLK_EN+0x36>
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d018      	beq.n	8000fc8 <RCC_CLK_EN+0x4c>
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d000      	beq.n	8000f9c <RCC_CLK_EN+0x20>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 8000f9a:	e020      	b.n	8000fde <RCC_CLK_EN+0x62>
		RCC->ABP1ENR |= (1 << periphralID);
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <RCC_CLK_EN+0x6c>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	79ba      	ldrb	r2, [r7, #6]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <RCC_CLK_EN+0x6c>)
 8000fac:	430b      	orrs	r3, r1
 8000fae:	61d3      	str	r3, [r2, #28]
		break;
 8000fb0:	e015      	b.n	8000fde <RCC_CLK_EN+0x62>
		RCC->ABP2ENR |= (1 << periphralID);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <RCC_CLK_EN+0x6c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <RCC_CLK_EN+0x6c>)
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	6193      	str	r3, [r2, #24]
		break;
 8000fc6:	e00a      	b.n	8000fde <RCC_CLK_EN+0x62>
		RCC->AHBENR |= (1 << periphralID);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <RCC_CLK_EN+0x6c>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	79ba      	ldrb	r2, [r7, #6]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <RCC_CLK_EN+0x6c>)
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6153      	str	r3, [r2, #20]
		break;
 8000fdc:	bf00      	nop
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <SPI1_IRQHandler>:
	}
	*pData = SPIx->DR;
}

//ISR
void SPI1_IRQHandler(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI1->SR & (1 << 1)) >> 1);
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <SPI1_IRQHandler+0x50>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	085b      	lsrs	r3, r3, #1
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	793b      	ldrb	r3, [r7, #4]
 8001000:	f362 0300 	bfi	r3, r2, #0, #1
 8001004:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1 << 0)) >> 0);
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <SPI1_IRQHandler+0x50>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	793b      	ldrb	r3, [r7, #4]
 8001012:	f362 0341 	bfi	r3, r2, #1, #1
 8001016:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1 << 4)) >> 4);
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <SPI1_IRQHandler+0x50>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	f362 0382 	bfi	r3, r2, #2, #1
 800102a:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI1_Index].P_CallBackFun(IRQ);
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SPI1_IRQHandler+0x54>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	7938      	ldrb	r0, [r7, #4]
 8001032:	4798      	blx	r3
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	20000064 	.word	0x20000064

08001044 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI2->SR & (1 << 1)) >> 1);
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <SPI2_IRQHandler+0x50>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	f362 0300 	bfi	r3, r2, #0, #1
 800105c:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1 << 0)) >> 0);
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <SPI2_IRQHandler+0x50>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	f362 0341 	bfi	r3, r2, #1, #1
 800106e:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1 << 4)) >> 4);
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SPI2_IRQHandler+0x50>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	f362 0382 	bfi	r3, r2, #2, #1
 8001082:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI2_Index].P_CallBackFun(IRQ);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SPI2_IRQHandler+0x54>)
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	7938      	ldrb	r0, [r7, #4]
 800108a:	4798      	blx	r3
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40003800 	.word	0x40003800
 8001098:	20000064 	.word	0x20000064

0800109c <STK_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void STK_init() {
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
#if STK_CLK_SRC == AHB_8
	SYSTICK->CTRL &= ~(1 << 2);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <STK_init+0x20>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <STK_init+0x20>)
 80010a6:	f023 0304 	bic.w	r3, r3, #4
 80010aa:	6013      	str	r3, [r2, #0]
	microSecond = 1;		// Assuming system clock is HSI
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <STK_init+0x24>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
#elif STK_CLK_SRC =AHB
	SYSTICK->CTRL |= (1<<2);
	microSecond = 8;		// Assuming system clock is HSI
#endif

}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010
 80010c0:	20000094 	.word	0x20000094

080010c4 <STK_delayMs>:
	SYSTICK->VAL = 0;
	SYSTICK->CTRL &= ~(1<<0);

}

void STK_delayMs(uint32 time) {
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	for (uint32 i=0; i < time; i++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e029      	b.n	8001126 <STK_delayMs+0x62>
		SYSTICK->LOAD = 1000*microSecond;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <STK_delayMs+0x74>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <STK_delayMs+0x78>)
 80010d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	6053      	str	r3, [r2, #4]
		//Disable Interrupt
		CLEAR(SYSTICK->CTRL, 1);
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <STK_delayMs+0x78>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <STK_delayMs+0x78>)
 80010e8:	f023 0302 	bic.w	r3, r3, #2
 80010ec:	6013      	str	r3, [r2, #0]
		//Enable Systick
		SET(SYSTICK->CTRL, 0);
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <STK_delayMs+0x78>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <STK_delayMs+0x78>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6013      	str	r3, [r2, #0]
		//Wait for flag
		while (!GET(SYSTICK->CTRL, 16))
 80010fa:	bf00      	nop
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <STK_delayMs+0x78>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f9      	beq.n	80010fc <STK_delayMs+0x38>
			;
		//Disable Systick
		SYSTICK->LOAD = 0;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <STK_delayMs+0x78>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
		SYSTICK->VAL = 0;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <STK_delayMs+0x78>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
		CLEAR(SYSTICK->CTRL, 0);
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <STK_delayMs+0x78>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <STK_delayMs+0x78>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]
	for (uint32 i=0; i < time; i++) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3d1      	bcc.n	80010d2 <STK_delayMs+0xe>
	}
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000094 	.word	0x20000094
 800113c:	e000e010 	.word	0xe000e010

08001140 <SysTick_Handler>:
uint32 STK_getRemainingTime() {
	return (SYSTICK->VAL);

}

void SysTick_Handler() {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8 flag = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
#if STK_MODE == SINGLE
	SYSTICK->LOAD = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <SysTick_Handler+0x44>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <SysTick_Handler+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
	CLEAR(SYSTICK->CTRL, 0);
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <SysTick_Handler+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Handler+0x44>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 1);
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <SysTick_Handler+0x44>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <SysTick_Handler+0x44>)
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	6013      	str	r3, [r2, #0]
#endif

	P_CallBack_Fun();
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SysTick_Handler+0x48>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4798      	blx	r3
	flag = GET(SYSTICK->CTRL, 16);
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <SysTick_Handler+0x44>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	71fb      	strb	r3, [r7, #7]
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	e000e010 	.word	0xe000e010
 8001188:	2000013c 	.word	0x2000013c

0800118c <USART1_IRQHandler>:
	 */
	while (!(USARTx->SR & (1 << 6)));
}

// ISR
void USART1_IRQHandler(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <USART1_IRQHandler+0x10>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4798      	blx	r3
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000098 	.word	0x20000098

080011a0 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <USART2_IRQHandler+0x10>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	4798      	blx	r3
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000098 	.word	0x20000098

080011b4 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <USART3_IRQHandler+0x10>)
 80011ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011bc:	4798      	blx	r3
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000098 	.word	0x20000098

080011c8 <main>:
#include "main.h"
char key;

int main() {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

RCC_CLK_EN(APB2_ID,GPIOB_ID);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fed3 	bl	8000f7c <RCC_CLK_EN>


RCC_CLK_EN(APB2_ID,GPIOA_ID);
 80011d6:	2102      	movs	r1, #2
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fecf 	bl	8000f7c <RCC_CLK_EN>

  LCD_t LCD_Config= {LCD_2x16,GPIOA,GPIOA,PIN_2,PIN_3,PIN_4,PIN_5,PIN_6,PIN_7};
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <main+0x84>)
 80011e0:	f107 0418 	add.w	r4, r7, #24
 80011e4:	461d      	mov	r5, r3
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ee:	e884 0003 	stmia.w	r4, {r0, r1}
lcd_init(&LCD_Config);
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f8ac 	bl	8000354 <lcd_init>


keypad_t keypad = {PIN_3,PIN_4,PIN_5,PIN_6,PIN_7,PIN_8,PIN_9,GPIOB};
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <main+0x88>)
 80011fe:	1d3c      	adds	r4, r7, #4
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	6023      	str	r3, [r4, #0]
Keypad_init(&keypad);
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffaf 	bl	8000170 <Keypad_init>

  STK_init();
 8001212:	f7ff ff43 	bl	800109c <STK_init>


  lcd_Clear_Screen();
 8001216:	f7ff fb71 	bl	80008fc <lcd_Clear_Screen>
  lcd_send_String("Keypad_LCD!");
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <main+0x8c>)
 800121c:	f7ff fa9e 	bl	800075c <lcd_send_String>
  STK_delayMs(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f7ff ff4e 	bl	80010c4 <STK_delayMs>
  lcd_Clear_Screen();
 8001228:	f7ff fb68 	bl	80008fc <lcd_Clear_Screen>


while(1) {
key = Keypad_Get_Key();
 800122c:	f7ff f832 	bl	8000294 <Keypad_Get_Key>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <main+0x90>)
 8001236:	701a      	strb	r2, [r3, #0]
  if (key != 'A') {
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <main+0x90>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b41      	cmp	r3, #65	; 0x41
 800123e:	d0f5      	beq.n	800122c <main+0x64>
    lcd_Send_Char(key);
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <main+0x90>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f9b3 	bl	80005b0 <lcd_Send_Char>
key = Keypad_Get_Key();
 800124a:	e7ef      	b.n	800122c <main+0x64>
 800124c:	0800131c 	.word	0x0800131c
 8001250:	08001334 	.word	0x08001334
 8001254:	08001310 	.word	0x08001310
 8001258:	20000140 	.word	0x20000140

0800125c <Reset_Handler>:
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopForever+0x2>)
 800125e:	4685      	mov	sp, r0
 8001260:	f3af 8000 	nop.w
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
 800126a:	2300      	movs	r3, #0
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:
 800126e:	58d4      	ldr	r4, [r2, r3]
 8001270:	50c4      	str	r4, [r0, r3]
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:
 8001274:	18c4      	adds	r4, r0, r3
 8001276:	428c      	cmp	r4, r1
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
 800127e:	2300      	movs	r3, #0
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:
 8001286:	42a2      	cmp	r2, r4
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>
 800128a:	f000 f811 	bl	80012b0 <__libc_init_array>
 800128e:	f7ff ff9b 	bl	80011c8 <main>

08001292 <LoopForever>:
 8001292:	e7fe      	b.n	8001292 <LoopForever>
 8001294:	20002800 	.word	0x20002800
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004
 80012a0:	0800135c 	.word	0x0800135c
 80012a4:	20000004 	.word	0x20000004
 80012a8:	20000144 	.word	0x20000144

080012ac <ADC1_2_IRQHandler>:
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <__libc_init_array>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	2500      	movs	r5, #0
 80012b4:	4e0c      	ldr	r6, [pc, #48]	; (80012e8 <__libc_init_array+0x38>)
 80012b6:	4c0d      	ldr	r4, [pc, #52]	; (80012ec <__libc_init_array+0x3c>)
 80012b8:	1ba4      	subs	r4, r4, r6
 80012ba:	10a4      	asrs	r4, r4, #2
 80012bc:	42a5      	cmp	r5, r4
 80012be:	d109      	bne.n	80012d4 <__libc_init_array+0x24>
 80012c0:	f000 f81a 	bl	80012f8 <_init>
 80012c4:	2500      	movs	r5, #0
 80012c6:	4e0a      	ldr	r6, [pc, #40]	; (80012f0 <__libc_init_array+0x40>)
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <__libc_init_array+0x44>)
 80012ca:	1ba4      	subs	r4, r4, r6
 80012cc:	10a4      	asrs	r4, r4, #2
 80012ce:	42a5      	cmp	r5, r4
 80012d0:	d105      	bne.n	80012de <__libc_init_array+0x2e>
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
 80012d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012d8:	4798      	blx	r3
 80012da:	3501      	adds	r5, #1
 80012dc:	e7ee      	b.n	80012bc <__libc_init_array+0xc>
 80012de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e2:	4798      	blx	r3
 80012e4:	3501      	adds	r5, #1
 80012e6:	e7f2      	b.n	80012ce <__libc_init_array+0x1e>
 80012e8:	08001354 	.word	0x08001354
 80012ec:	08001354 	.word	0x08001354
 80012f0:	08001354 	.word	0x08001354
 80012f4:	08001358 	.word	0x08001358

080012f8 <_init>:
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fa:	bf00      	nop
 80012fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fe:	bc08      	pop	{r3}
 8001300:	469e      	mov	lr, r3
 8001302:	4770      	bx	lr

08001304 <_fini>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr
