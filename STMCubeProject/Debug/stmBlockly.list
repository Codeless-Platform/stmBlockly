
stmBlockly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001168  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a08  08002a08  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002a08  08002a08  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a08  08002a08  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000020  08002a30  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08002a30  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   000035ae  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001137  00000000  00000000  0002363a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000478  00000000  00000000  00024778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000340  00000000  00000000  00024bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c1a  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006761  00000000  00000000  00026b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bfec  00000000  00000000  0002d2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001014  00000000  00000000  00039298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0003a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001888 	.word	0x08001888

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001888 	.word	0x08001888

08000170 <oled_ScrollLeft>:
  oled_WRITECOMMAND (oled_ACTIVATE_SCROLL); // start scroll
}


void oled_ScrollLeft(uint8 start_row, uint8 end_row)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
  oled_WRITECOMMAND (oled_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000180:	2227      	movs	r2, #39	; 0x27
 8000182:	2100      	movs	r1, #0
 8000184:	2078      	movs	r0, #120	; 0x78
 8000186:	f000 fb51 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND (0x00);  // send dummy
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	2078      	movs	r0, #120	; 0x78
 8000190:	f000 fb4c 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND(start_row);  // start page address
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	461a      	mov	r2, r3
 8000198:	2100      	movs	r1, #0
 800019a:	2078      	movs	r0, #120	; 0x78
 800019c:	f000 fb46 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND(0X00);  // time interval 5 frames
 80001a0:	2200      	movs	r2, #0
 80001a2:	2100      	movs	r1, #0
 80001a4:	2078      	movs	r0, #120	; 0x78
 80001a6:	f000 fb41 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND(end_row);  // end page address
 80001aa:	79bb      	ldrb	r3, [r7, #6]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2100      	movs	r1, #0
 80001b0:	2078      	movs	r0, #120	; 0x78
 80001b2:	f000 fb3b 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND(0X00);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2100      	movs	r1, #0
 80001ba:	2078      	movs	r0, #120	; 0x78
 80001bc:	f000 fb36 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND(0XFF);
 80001c0:	22ff      	movs	r2, #255	; 0xff
 80001c2:	2100      	movs	r1, #0
 80001c4:	2078      	movs	r0, #120	; 0x78
 80001c6:	f000 fb31 	bl	800082c <oled_I2C_Write>
  oled_WRITECOMMAND (oled_ACTIVATE_SCROLL); // start scroll
 80001ca:	222f      	movs	r2, #47	; 0x2f
 80001cc:	2100      	movs	r1, #0
 80001ce:	2078      	movs	r0, #120	; 0x78
 80001d0:	f000 fb2c 	bl	800082c <oled_I2C_Write>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <oled_Stopscroll>:
  oled_WRITECOMMAND (oled_ACTIVATE_SCROLL);
}


void oled_Stopscroll(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	oled_WRITECOMMAND(oled_DEACTIVATE_SCROLL);
 80001e0:	222e      	movs	r2, #46	; 0x2e
 80001e2:	2100      	movs	r1, #0
 80001e4:	2078      	movs	r0, #120	; 0x78
 80001e6:	f000 fb21 	bl	800082c <oled_I2C_Write>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}

080001ee <oled_DrawBitmap>:

}


void oled_DrawBitmap(sint16 x, sint16 y, const unsigned char* bitmap, sint16 w, sint16 h, sint16 color)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b086      	sub	sp, #24
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	60ba      	str	r2, [r7, #8]
 80001f6:	461a      	mov	r2, r3
 80001f8:	4603      	mov	r3, r0
 80001fa:	81fb      	strh	r3, [r7, #14]
 80001fc:	460b      	mov	r3, r1
 80001fe:	81bb      	strh	r3, [r7, #12]
 8000200:	4613      	mov	r3, r2
 8000202:	80fb      	strh	r3, [r7, #6]

    sint16 byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000208:	3307      	adds	r3, #7
 800020a:	2b00      	cmp	r3, #0
 800020c:	da00      	bge.n	8000210 <oled_DrawBitmap+0x22>
 800020e:	3307      	adds	r3, #7
 8000210:	10db      	asrs	r3, r3, #3
 8000212:	823b      	strh	r3, [r7, #16]
    uint8 byte = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	75fb      	strb	r3, [r7, #23]

    for(sint16 j=0; j<h; j++, y++)
 8000218:	2300      	movs	r3, #0
 800021a:	82bb      	strh	r3, [r7, #20]
 800021c:	e044      	b.n	80002a8 <oled_DrawBitmap+0xba>
    {
        for(sint16 i=0; i<w; i++)
 800021e:	2300      	movs	r3, #0
 8000220:	827b      	strh	r3, [r7, #18]
 8000222:	e02f      	b.n	8000284 <oled_DrawBitmap+0x96>
        {
            if(i & 7)
 8000224:	8a7b      	ldrh	r3, [r7, #18]
 8000226:	f003 0307 	and.w	r3, r3, #7
 800022a:	2b00      	cmp	r3, #0
 800022c:	d003      	beq.n	8000236 <oled_DrawBitmap+0x48>
            {
               byte <<= 1;
 800022e:	7dfb      	ldrb	r3, [r7, #23]
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	75fb      	strb	r3, [r7, #23]
 8000234:	e012      	b.n	800025c <oled_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000236:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800023a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800023e:	fb03 f202 	mul.w	r2, r3, r2
 8000242:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000246:	2b00      	cmp	r3, #0
 8000248:	da00      	bge.n	800024c <oled_DrawBitmap+0x5e>
 800024a:	3307      	adds	r3, #7
 800024c:	10db      	asrs	r3, r3, #3
 800024e:	b21b      	sxth	r3, r3
 8000250:	4413      	add	r3, r2
 8000252:	461a      	mov	r2, r3
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) oled_DrawPixel(x+i, y, color);
 800025c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000260:	2b00      	cmp	r3, #0
 8000262:	da09      	bge.n	8000278 <oled_DrawBitmap+0x8a>
 8000264:	89fa      	ldrh	r2, [r7, #14]
 8000266:	8a7b      	ldrh	r3, [r7, #18]
 8000268:	4413      	add	r3, r2
 800026a:	b29b      	uxth	r3, r3
 800026c:	89b9      	ldrh	r1, [r7, #12]
 800026e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f91e 	bl	80004b4 <oled_DrawPixel>
        for(sint16 i=0; i<w; i++)
 8000278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800027c:	b29b      	uxth	r3, r3
 800027e:	3301      	adds	r3, #1
 8000280:	b29b      	uxth	r3, r3
 8000282:	827b      	strh	r3, [r7, #18]
 8000284:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800028c:	429a      	cmp	r2, r3
 800028e:	dbc9      	blt.n	8000224 <oled_DrawBitmap+0x36>
    for(sint16 j=0; j<h; j++, y++)
 8000290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000294:	b29b      	uxth	r3, r3
 8000296:	3301      	adds	r3, #1
 8000298:	b29b      	uxth	r3, r3
 800029a:	82bb      	strh	r3, [r7, #20]
 800029c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	3301      	adds	r3, #1
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	81bb      	strh	r3, [r7, #12]
 80002a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80002ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	dbb4      	blt.n	800021e <oled_DrawBitmap+0x30>
        }
    }
}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <oled_Init>:



uint8 oled_Init(I2C_Registers_t *I2Cx) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

	/* Init I2C */
	G_I2Cx = I2Cx;
 80002c8:	4a55      	ldr	r2, [pc, #340]	; (8000420 <oled_Init+0x160>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6013      	str	r3, [r2, #0]
	oled_I2C_Init();
 80002ce:	f000 fa13 	bl	80006f8 <oled_I2C_Init>
	/* A little delay */
	STK_delayMs(50);
 80002d2:	2032      	movs	r0, #50	; 0x32
 80002d4:	f001 f9a0 	bl	8001618 <STK_delayMs>

	/* Init oled */
	oled_WRITECOMMAND(0xAE); //display off
 80002d8:	22ae      	movs	r2, #174	; 0xae
 80002da:	2100      	movs	r1, #0
 80002dc:	2078      	movs	r0, #120	; 0x78
 80002de:	f000 faa5 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80002e2:	2220      	movs	r2, #32
 80002e4:	2100      	movs	r1, #0
 80002e6:	2078      	movs	r0, #120	; 0x78
 80002e8:	f000 faa0 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80002ec:	2210      	movs	r2, #16
 80002ee:	2100      	movs	r1, #0
 80002f0:	2078      	movs	r0, #120	; 0x78
 80002f2:	f000 fa9b 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80002f6:	22b0      	movs	r2, #176	; 0xb0
 80002f8:	2100      	movs	r1, #0
 80002fa:	2078      	movs	r0, #120	; 0x78
 80002fc:	f000 fa96 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000300:	22c8      	movs	r2, #200	; 0xc8
 8000302:	2100      	movs	r1, #0
 8000304:	2078      	movs	r0, #120	; 0x78
 8000306:	f000 fa91 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x00); //---set low column address
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	2078      	movs	r0, #120	; 0x78
 8000310:	f000 fa8c 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x10); //---set high column address
 8000314:	2210      	movs	r2, #16
 8000316:	2100      	movs	r1, #0
 8000318:	2078      	movs	r0, #120	; 0x78
 800031a:	f000 fa87 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x40); //--set start line address
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	2100      	movs	r1, #0
 8000322:	2078      	movs	r0, #120	; 0x78
 8000324:	f000 fa82 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x81); //--set contrast control register
 8000328:	2281      	movs	r2, #129	; 0x81
 800032a:	2100      	movs	r1, #0
 800032c:	2078      	movs	r0, #120	; 0x78
 800032e:	f000 fa7d 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xFF);
 8000332:	22ff      	movs	r2, #255	; 0xff
 8000334:	2100      	movs	r1, #0
 8000336:	2078      	movs	r0, #120	; 0x78
 8000338:	f000 fa78 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800033c:	22a1      	movs	r2, #161	; 0xa1
 800033e:	2100      	movs	r1, #0
 8000340:	2078      	movs	r0, #120	; 0x78
 8000342:	f000 fa73 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xA6); //--set normal display
 8000346:	22a6      	movs	r2, #166	; 0xa6
 8000348:	2100      	movs	r1, #0
 800034a:	2078      	movs	r0, #120	; 0x78
 800034c:	f000 fa6e 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000350:	22a8      	movs	r2, #168	; 0xa8
 8000352:	2100      	movs	r1, #0
 8000354:	2078      	movs	r0, #120	; 0x78
 8000356:	f000 fa69 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x3F); //
 800035a:	223f      	movs	r2, #63	; 0x3f
 800035c:	2100      	movs	r1, #0
 800035e:	2078      	movs	r0, #120	; 0x78
 8000360:	f000 fa64 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000364:	22a4      	movs	r2, #164	; 0xa4
 8000366:	2100      	movs	r1, #0
 8000368:	2078      	movs	r0, #120	; 0x78
 800036a:	f000 fa5f 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xD3); //-set display offset
 800036e:	22d3      	movs	r2, #211	; 0xd3
 8000370:	2100      	movs	r1, #0
 8000372:	2078      	movs	r0, #120	; 0x78
 8000374:	f000 fa5a 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x00); //-not offset
 8000378:	2200      	movs	r2, #0
 800037a:	2100      	movs	r1, #0
 800037c:	2078      	movs	r0, #120	; 0x78
 800037e:	f000 fa55 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000382:	22d5      	movs	r2, #213	; 0xd5
 8000384:	2100      	movs	r1, #0
 8000386:	2078      	movs	r0, #120	; 0x78
 8000388:	f000 fa50 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xF0); //--set divide ratio
 800038c:	22f0      	movs	r2, #240	; 0xf0
 800038e:	2100      	movs	r1, #0
 8000390:	2078      	movs	r0, #120	; 0x78
 8000392:	f000 fa4b 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xD9); //--set pre-charge period
 8000396:	22d9      	movs	r2, #217	; 0xd9
 8000398:	2100      	movs	r1, #0
 800039a:	2078      	movs	r0, #120	; 0x78
 800039c:	f000 fa46 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x22); //
 80003a0:	2222      	movs	r2, #34	; 0x22
 80003a2:	2100      	movs	r1, #0
 80003a4:	2078      	movs	r0, #120	; 0x78
 80003a6:	f000 fa41 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80003aa:	22da      	movs	r2, #218	; 0xda
 80003ac:	2100      	movs	r1, #0
 80003ae:	2078      	movs	r0, #120	; 0x78
 80003b0:	f000 fa3c 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x12);
 80003b4:	2212      	movs	r2, #18
 80003b6:	2100      	movs	r1, #0
 80003b8:	2078      	movs	r0, #120	; 0x78
 80003ba:	f000 fa37 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xDB); //--set vcomh
 80003be:	22db      	movs	r2, #219	; 0xdb
 80003c0:	2100      	movs	r1, #0
 80003c2:	2078      	movs	r0, #120	; 0x78
 80003c4:	f000 fa32 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80003c8:	2220      	movs	r2, #32
 80003ca:	2100      	movs	r1, #0
 80003cc:	2078      	movs	r0, #120	; 0x78
 80003ce:	f000 fa2d 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x8D); //--set DC-DC enable
 80003d2:	228d      	movs	r2, #141	; 0x8d
 80003d4:	2100      	movs	r1, #0
 80003d6:	2078      	movs	r0, #120	; 0x78
 80003d8:	f000 fa28 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0x14); //
 80003dc:	2214      	movs	r2, #20
 80003de:	2100      	movs	r1, #0
 80003e0:	2078      	movs	r0, #120	; 0x78
 80003e2:	f000 fa23 	bl	800082c <oled_I2C_Write>
	oled_WRITECOMMAND(0xAF); //--turn on oled panel
 80003e6:	22af      	movs	r2, #175	; 0xaf
 80003e8:	2100      	movs	r1, #0
 80003ea:	2078      	movs	r0, #120	; 0x78
 80003ec:	f000 fa1e 	bl	800082c <oled_I2C_Write>


	oled_WRITECOMMAND(oled_DEACTIVATE_SCROLL);
 80003f0:	222e      	movs	r2, #46	; 0x2e
 80003f2:	2100      	movs	r1, #0
 80003f4:	2078      	movs	r0, #120	; 0x78
 80003f6:	f000 fa19 	bl	800082c <oled_I2C_Write>

	/* Clear screen */
	oled_Fill(oled_COLOR_BLACK);
 80003fa:	2000      	movs	r0, #0
 80003fc:	f000 f842 	bl	8000484 <oled_Fill>

	/* Update screen */
	oled_UpdateScreen();
 8000400:	f000 f812 	bl	8000428 <oled_UpdateScreen>

	/* Set default values */
	oled.CurrentX = 0;
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <oled_Init+0x164>)
 8000406:	2200      	movs	r2, #0
 8000408:	801a      	strh	r2, [r3, #0]
	oled.CurrentY = 0;
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <oled_Init+0x164>)
 800040c:	2200      	movs	r2, #0
 800040e:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	oled.Initialized = 1;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <oled_Init+0x164>)
 8000412:	2201      	movs	r2, #1
 8000414:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000416:	2301      	movs	r3, #1
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000043c 	.word	0x2000043c
 8000424:	20000440 	.word	0x20000440

08000428 <oled_UpdateScreen>:

void oled_UpdateScreen(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	uint8 m;

	for (m = 0; m < 8; m++) {
 800042e:	2300      	movs	r3, #0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	e01d      	b.n	8000470 <oled_UpdateScreen+0x48>
		oled_WRITECOMMAND(0xB0 + m);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	3b50      	subs	r3, #80	; 0x50
 8000438:	b2db      	uxtb	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	2078      	movs	r0, #120	; 0x78
 8000440:	f000 f9f4 	bl	800082c <oled_I2C_Write>
		oled_WRITECOMMAND(0x00);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	2078      	movs	r0, #120	; 0x78
 800044a:	f000 f9ef 	bl	800082c <oled_I2C_Write>
		oled_WRITECOMMAND(0x10);
 800044e:	2210      	movs	r2, #16
 8000450:	2100      	movs	r1, #0
 8000452:	2078      	movs	r0, #120	; 0x78
 8000454:	f000 f9ea 	bl	800082c <oled_I2C_Write>

		/* Write multi data */
		oled_I2C_WriteMulti(oled_I2C_ADDR, 0x40, &oled_Buffer[oled_WIDTH * m], oled_WIDTH);
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	01db      	lsls	r3, r3, #7
 800045c:	4a08      	ldr	r2, [pc, #32]	; (8000480 <oled_UpdateScreen+0x58>)
 800045e:	441a      	add	r2, r3
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	2140      	movs	r1, #64	; 0x40
 8000464:	2078      	movs	r0, #120	; 0x78
 8000466:	f000 f977 	bl	8000758 <oled_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3301      	adds	r3, #1
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d9de      	bls.n	8000434 <oled_UpdateScreen+0xc>
	}
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000003c 	.word	0x2000003c

08000484 <oled_Fill>:
	for (i = 0; i < sizeof(oled_Buffer); i++) {
		oled_Buffer[i] = ~oled_Buffer[i];
	}
}

void oled_Fill(oled_COLOR_t color) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(oled_Buffer, (color == oled_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled_Buffer));
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d101      	bne.n	8000498 <oled_Fill+0x14>
 8000494:	2300      	movs	r3, #0
 8000496:	e000      	b.n	800049a <oled_Fill+0x16>
 8000498:	23ff      	movs	r3, #255	; 0xff
 800049a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800049e:	4619      	mov	r1, r3
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <oled_Fill+0x2c>)
 80004a2:	f001 f9b6 	bl	8001812 <memset>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000003c 	.word	0x2000003c

080004b4 <oled_DrawPixel>:

void oled_DrawPixel(uint16 x, uint16 y, oled_COLOR_t color) {
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
 80004be:	460b      	mov	r3, r1
 80004c0:	80bb      	strh	r3, [r7, #4]
 80004c2:	4613      	mov	r3, r2
 80004c4:	70fb      	strb	r3, [r7, #3]
	if (
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	2b7f      	cmp	r3, #127	; 0x7f
 80004ca:	d848      	bhi.n	800055e <oled_DrawPixel+0xaa>
		x >= oled_WIDTH ||
 80004cc:	88bb      	ldrh	r3, [r7, #4]
 80004ce:	2b3f      	cmp	r3, #63	; 0x3f
 80004d0:	d845      	bhi.n	800055e <oled_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (oled.Inverted) {
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <oled_DrawPixel+0xb4>)
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <oled_DrawPixel+0x34>
		color = (oled_COLOR_t)!color;
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	bf0c      	ite	eq
 80004e0:	2301      	moveq	r3, #1
 80004e2:	2300      	movne	r3, #0
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == oled_COLOR_WHITE) {
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d11a      	bne.n	8000524 <oled_DrawPixel+0x70>
		oled_Buffer[x + (y / 8) * oled_WIDTH] |= 1 << (y % 8);
 80004ee:	88fa      	ldrh	r2, [r7, #6]
 80004f0:	88bb      	ldrh	r3, [r7, #4]
 80004f2:	08db      	lsrs	r3, r3, #3
 80004f4:	b298      	uxth	r0, r3
 80004f6:	4603      	mov	r3, r0
 80004f8:	01db      	lsls	r3, r3, #7
 80004fa:	4413      	add	r3, r2
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <oled_DrawPixel+0xb8>)
 80004fe:	5cd3      	ldrb	r3, [r2, r3]
 8000500:	b25a      	sxtb	r2, r3
 8000502:	88bb      	ldrh	r3, [r7, #4]
 8000504:	f003 0307 	and.w	r3, r3, #7
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f303 	lsl.w	r3, r1, r3
 800050e:	b25b      	sxtb	r3, r3
 8000510:	4313      	orrs	r3, r2
 8000512:	b259      	sxtb	r1, r3
 8000514:	88fa      	ldrh	r2, [r7, #6]
 8000516:	4603      	mov	r3, r0
 8000518:	01db      	lsls	r3, r3, #7
 800051a:	4413      	add	r3, r2
 800051c:	b2c9      	uxtb	r1, r1
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <oled_DrawPixel+0xb8>)
 8000520:	54d1      	strb	r1, [r2, r3]
 8000522:	e01d      	b.n	8000560 <oled_DrawPixel+0xac>
	} else {
		oled_Buffer[x + (y / 8) * oled_WIDTH] &= ~(1 << (y % 8));
 8000524:	88fa      	ldrh	r2, [r7, #6]
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	08db      	lsrs	r3, r3, #3
 800052a:	b298      	uxth	r0, r3
 800052c:	4603      	mov	r3, r0
 800052e:	01db      	lsls	r3, r3, #7
 8000530:	4413      	add	r3, r2
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <oled_DrawPixel+0xb8>)
 8000534:	5cd3      	ldrb	r3, [r2, r3]
 8000536:	b25a      	sxtb	r2, r3
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	f003 0307 	and.w	r3, r3, #7
 800053e:	2101      	movs	r1, #1
 8000540:	fa01 f303 	lsl.w	r3, r1, r3
 8000544:	b25b      	sxtb	r3, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	b25b      	sxtb	r3, r3
 800054a:	4013      	ands	r3, r2
 800054c:	b259      	sxtb	r1, r3
 800054e:	88fa      	ldrh	r2, [r7, #6]
 8000550:	4603      	mov	r3, r0
 8000552:	01db      	lsls	r3, r3, #7
 8000554:	4413      	add	r3, r2
 8000556:	b2c9      	uxtb	r1, r1
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <oled_DrawPixel+0xb8>)
 800055a:	54d1      	strb	r1, [r2, r3]
 800055c:	e000      	b.n	8000560 <oled_DrawPixel+0xac>
		return;
 800055e:	bf00      	nop
	}
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000440 	.word	0x20000440
 800056c:	2000003c 	.word	0x2000003c

08000570 <oled_GotoXY>:

void oled_GotoXY(uint16 x, uint16 y) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	oled.CurrentX = x;
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <oled_GotoXY+0x28>)
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	8013      	strh	r3, [r2, #0]
	oled.CurrentY = y;
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <oled_GotoXY+0x28>)
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	8053      	strh	r3, [r2, #2]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000440 	.word	0x20000440

0800059c <oled_writeChar>:

char oled_writeChar(char ch, FontDef_t* Font, oled_COLOR_t color) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	uint32 i, b, j;

	/* Check available space in oled */
	if (
		oled_WIDTH <= (oled.CurrentX + Font->FontWidth) ||
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <oled_writeChar+0xfc>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
	if (
 80005b8:	2b7f      	cmp	r3, #127	; 0x7f
 80005ba:	dc07      	bgt.n	80005cc <oled_writeChar+0x30>
		oled_HEIGHT <= (oled.CurrentY + Font->FontHeight)
 80005bc:	4b36      	ldr	r3, [pc, #216]	; (8000698 <oled_writeChar+0xfc>)
 80005be:	885b      	ldrh	r3, [r3, #2]
 80005c0:	461a      	mov	r2, r3
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	4413      	add	r3, r2
		oled_WIDTH <= (oled.CurrentX + Font->FontWidth) ||
 80005c8:	2b3f      	cmp	r3, #63	; 0x3f
 80005ca:	dd01      	ble.n	80005d0 <oled_writeChar+0x34>
	) {
		/* Error */
		return 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	e05e      	b.n	800068e <oled_writeChar+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	e04b      	b.n	800066e <oled_writeChar+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	3b20      	subs	r3, #32
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	7849      	ldrb	r1, [r1, #1]
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	440b      	add	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	e030      	b.n	800065c <oled_writeChar+0xc0>
			if ((b << j) & 0x8000) {
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000606:	2b00      	cmp	r3, #0
 8000608:	d010      	beq.n	800062c <oled_writeChar+0x90>
				oled_DrawPixel(oled.CurrentX + j, (oled.CurrentY + i), (oled_COLOR_t) color);
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <oled_writeChar+0xfc>)
 800060c:	881a      	ldrh	r2, [r3, #0]
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4413      	add	r3, r2
 8000614:	b298      	uxth	r0, r3
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <oled_writeChar+0xfc>)
 8000618:	885a      	ldrh	r2, [r3, #2]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	b29b      	uxth	r3, r3
 800061e:	4413      	add	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	79ba      	ldrb	r2, [r7, #6]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ff45 	bl	80004b4 <oled_DrawPixel>
 800062a:	e014      	b.n	8000656 <oled_writeChar+0xba>
			} else {
				oled_DrawPixel(oled.CurrentX + j, (oled.CurrentY + i), (oled_COLOR_t)!color);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <oled_writeChar+0xfc>)
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	b29b      	uxth	r3, r3
 8000634:	4413      	add	r3, r2
 8000636:	b298      	uxth	r0, r3
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <oled_writeChar+0xfc>)
 800063a:	885a      	ldrh	r2, [r3, #2]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	b29b      	uxth	r3, r3
 8000640:	4413      	add	r3, r2
 8000642:	b299      	uxth	r1, r3
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf0c      	ite	eq
 800064a:	2301      	moveq	r3, #1
 800064c:	2300      	movne	r3, #0
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f7ff ff2f 	bl	80004b4 <oled_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	3301      	adds	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	4293      	cmp	r3, r2
 8000666:	d3c8      	bcc.n	80005fa <oled_writeChar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	461a      	mov	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4293      	cmp	r3, r2
 8000678:	d3ad      	bcc.n	80005d6 <oled_writeChar+0x3a>
			}
		}
	}

	/* Increase pointer */
	oled.CurrentX += Font->FontWidth;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <oled_writeChar+0xfc>)
 800067c:	881a      	ldrh	r2, [r3, #0]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <oled_writeChar+0xfc>)
 800068a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000440 	.word	0x20000440

0800069c <oled_writeString>:

char oled_writeString(char* str, FontDef_t* Font, oled_COLOR_t color) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	4613      	mov	r3, r2
 80006a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80006aa:	e012      	b.n	80006d2 <oled_writeString+0x36>
		/* Write character by character */
		if (oled_writeChar(*str, Font, color) != *str) {
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff71 	bl	800059c <oled_writeChar>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d002      	beq.n	80006cc <oled_writeString+0x30>
			/* Return error */
			return *str;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	e008      	b.n	80006de <oled_writeString+0x42>
		}

		/* Increase string pointer */
		str++;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1e8      	bne.n	80006ac <oled_writeString+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	781b      	ldrb	r3, [r3, #0]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <oled_Clear>:
}



void oled_Clear (void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
	oled_Fill (0);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff feca 	bl	8000484 <oled_Fill>
    oled_UpdateScreen();
 80006f0:	f7ff fe9a 	bl	8000428 <oled_UpdateScreen>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <oled_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void oled_I2C_Init() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
	I2C_pinConfig_t I2C_pinConfig;
		I2C_pinConfig.Clock_Speed = I2C_CLK_SM_100K;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <oled_I2C_Init+0x58>)
 8000700:	603b      	str	r3, [r7, #0]
		I2C_pinConfig.I2C_Mode = I2C_Mode_I2C;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
		I2C_pinConfig.Stretch_Mode = I2C_Stretch_EN;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
		I2C_pinConfig.ACK_Enable = I2C_ACK_EN;
 800070a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070e:	61bb      	str	r3, [r7, #24]
		I2C_pinConfig.P_Slave_CallBack_Fun = NULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
		I2C_pinConfig.slave_address.slave_address_mode = I2C_Slave_7Bit;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
		I2C_pinConfig.slave_address.slave_primary_address = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	81fb      	strh	r3, [r7, #14]
		I2C_pinConfig.slave_address.Enable_Dual_Mode = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	81bb      	strh	r3, [r7, #12]
		STK_init();
 8000720:	f000 ff66 	bl	80015f0 <STK_init>

		I2C_GPIO_SetPins(G_I2Cx);
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <oled_I2C_Init+0x5c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fbfd 	bl	8000f28 <I2C_GPIO_SetPins>
		STK_delayMs(10);
 800072e:	200a      	movs	r0, #10
 8000730:	f000 ff72 	bl	8001618 <STK_delayMs>
		I2C_init(&I2C_pinConfig, G_I2Cx);
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <oled_I2C_Init+0x5c>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	463b      	mov	r3, r7
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 faf9 	bl	8000d34 <I2C_init>
		STK_delayMs(50);
 8000742:	2032      	movs	r0, #50	; 0x32
 8000744:	f000 ff68 	bl	8001618 <STK_delayMs>

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	000186a0 	.word	0x000186a0
 8000754:	2000043c 	.word	0x2000043c

08000758 <oled_I2C_WriteMulti>:

void oled_I2C_WriteMulti(uint8 address, uint8 reg, uint8* data, uint16 count) {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b0c7      	sub	sp, #284	; 0x11c
 800075c:	af02      	add	r7, sp, #8
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000766:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800076a:	600a      	str	r2, [r1, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000772:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000776:	4622      	mov	r2, r4
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800077e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000782:	4602      	mov	r2, r0
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800078a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800078e:	460a      	mov	r2, r1
 8000790:	801a      	strh	r2, [r3, #0]
uint8 dt[256];
dt[0] = reg;
 8000792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800079a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800079e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	701a      	strb	r2, [r3, #0]
uint8 i;
for(i = 0; i < count; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80007ac:	e015      	b.n	80007da <oled_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80007ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	441a      	add	r2, r3
 80007be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007c2:	3301      	adds	r3, #1
 80007c4:	7811      	ldrb	r1, [r2, #0]
 80007c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80007ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80007d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007d4:	3301      	adds	r3, #1
 80007d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80007da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007e8:	8812      	ldrh	r2, [r2, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d8df      	bhi.n	80007ae <oled_I2C_WriteMulti+0x56>
I2C_Master_TX(G_I2Cx, address, (uint8*) dt, count+1, STOP,
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <oled_I2C_WriteMulti+0xd0>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b299      	uxth	r1, r3
 80007fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000802:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	461c      	mov	r4, r3
 800080c:	f107 020c 	add.w	r2, r7, #12
 8000810:	2300      	movs	r3, #0
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	2301      	movs	r3, #1
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	4623      	mov	r3, r4
 800081a:	f000 fbc7 	bl	8000fac <I2C_Master_TX>
			NO_REPEATED_START);
}
 800081e:	bf00      	nop
 8000820:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	2000043c 	.word	0x2000043c

0800082c <oled_I2C_Write>:


void oled_I2C_Write(uint8 address, uint8 reg, uint8 data) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	460b      	mov	r3, r1
 8000838:	71bb      	strb	r3, [r7, #6]
 800083a:	4613      	mov	r3, r2
 800083c:	717b      	strb	r3, [r7, #5]
	uint8 dt[2];
	dt[0] = reg;
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000842:	797b      	ldrb	r3, [r7, #5]
 8000844:	737b      	strb	r3, [r7, #13]
	I2C_Master_TX(G_I2Cx, address, (uint8*) dt, 2, STOP,
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <oled_I2C_Write+0x3c>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	b299      	uxth	r1, r3
 800084e:	f107 020c 	add.w	r2, r7, #12
 8000852:	2300      	movs	r3, #0
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2301      	movs	r3, #1
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2302      	movs	r3, #2
 800085c:	f000 fba6 	bl	8000fac <I2C_Master_TX>
				NO_REPEATED_START);
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000043c 	.word	0x2000043c

0800086c <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <EXTI0_IRQHandler+0x1c>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <EXTI0_IRQHandler+0x1c>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <EXTI0_IRQHandler+0x20>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4798      	blx	r3
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010400 	.word	0x40010400
 800088c:	20000448 	.word	0x20000448

08000890 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <EXTI1_IRQHandler+0x1c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <EXTI1_IRQHandler+0x1c>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <EXTI1_IRQHandler+0x20>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4798      	blx	r3
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010400 	.word	0x40010400
 80008b0:	20000448 	.word	0x20000448

080008b4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <EXTI2_IRQHandler+0x1c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <EXTI2_IRQHandler+0x1c>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <EXTI2_IRQHandler+0x20>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	4798      	blx	r3
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010400 	.word	0x40010400
 80008d4:	20000448 	.word	0x20000448

080008d8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <EXTI3_IRQHandler+0x1c>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <EXTI3_IRQHandler+0x1c>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <EXTI3_IRQHandler+0x20>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4798      	blx	r3
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010400 	.word	0x40010400
 80008f8:	20000448 	.word	0x20000448

080008fc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <EXTI4_IRQHandler+0x1c>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <EXTI4_IRQHandler+0x1c>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <EXTI4_IRQHandler+0x20>)
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	4798      	blx	r3
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40010400 	.word	0x40010400
 800091c:	20000448 	.word	0x20000448

08000920 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	2b00      	cmp	r3, #0
 800092e:	d009      	beq.n	8000944 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <EXTI9_5_IRQHandler+0xac>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 8000942:	e03e      	b.n	80009c2 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094c:	2b00      	cmp	r3, #0
 800094e:	d009      	beq.n	8000964 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095a:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <EXTI9_5_IRQHandler+0xac>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4798      	blx	r3
}
 8000962:	e02e      	b.n	80009c2 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <EXTI9_5_IRQHandler+0xac>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4798      	blx	r3
}
 8000982:	e01e      	b.n	80009c2 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098c:	2b00      	cmp	r3, #0
 800098e:	d009      	beq.n	80009a4 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099a:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <EXTI9_5_IRQHandler+0xac>)
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	4798      	blx	r3
}
 80009a2:	e00e      	b.n	80009c2 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d008      	beq.n	80009c2 <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <EXTI9_5_IRQHandler+0xa8>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <EXTI9_5_IRQHandler+0xac>)
 80009be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c0:	4798      	blx	r3
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010400 	.word	0x40010400
 80009cc:	20000448 	.word	0x20000448

080009d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d009      	beq.n	80009f4 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <EXTI15_10_IRQHandler+0xcc>)
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 80009f2:	e04e      	b.n	8000a92 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d009      	beq.n	8000a14 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a0a:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <EXTI15_10_IRQHandler+0xcc>)
 8000a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a10:	4798      	blx	r3
}
 8000a12:	e03e      	b.n	8000a92 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d009      	beq.n	8000a34 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a2a:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <EXTI15_10_IRQHandler+0xcc>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4798      	blx	r3
}
 8000a32:	e02e      	b.n	8000a92 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d009      	beq.n	8000a54 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a4a:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <EXTI15_10_IRQHandler+0xcc>)
 8000a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a50:	4798      	blx	r3
}
 8000a52:	e01e      	b.n	8000a92 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <EXTI15_10_IRQHandler+0xcc>)
 8000a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a70:	4798      	blx	r3
}
 8000a72:	e00e      	b.n	8000a92 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d008      	beq.n	8000a92 <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <EXTI15_10_IRQHandler+0xc8>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8a:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <EXTI15_10_IRQHandler+0xcc>)
 8000a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a90:	4798      	blx	r3
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010400 	.word	0x40010400
 8000a9c:	20000448 	.word	0x20000448

08000aa0 <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ab4:	f000 80b8 	beq.w	8000c28 <Get_CRLH_Position+0x188>
 8000ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000abc:	f300 80b7 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ac4:	f000 80ad 	beq.w	8000c22 <Get_CRLH_Position+0x182>
 8000ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000acc:	f300 80af 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad4:	f000 80a2 	beq.w	8000c1c <Get_CRLH_Position+0x17c>
 8000ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000adc:	f300 80a7 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ae4:	f000 8097 	beq.w	8000c16 <Get_CRLH_Position+0x176>
 8000ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aec:	f300 809f 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000af4:	f000 808c 	beq.w	8000c10 <Get_CRLH_Position+0x170>
 8000af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000afc:	f300 8097 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b04:	f000 8081 	beq.w	8000c0a <Get_CRLH_Position+0x16a>
 8000b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b0c:	f300 808f 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b14:	d076      	beq.n	8000c04 <Get_CRLH_Position+0x164>
 8000b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b1a:	f300 8088 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b22:	d06c      	beq.n	8000bfe <Get_CRLH_Position+0x15e>
 8000b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b28:	f300 8081 	bgt.w	8000c2e <Get_CRLH_Position+0x18e>
 8000b2c:	2b80      	cmp	r3, #128	; 0x80
 8000b2e:	d063      	beq.n	8000bf8 <Get_CRLH_Position+0x158>
 8000b30:	2b80      	cmp	r3, #128	; 0x80
 8000b32:	dc7c      	bgt.n	8000c2e <Get_CRLH_Position+0x18e>
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	dc47      	bgt.n	8000bc8 <Get_CRLH_Position+0x128>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dd78      	ble.n	8000c2e <Get_CRLH_Position+0x18e>
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	2b1f      	cmp	r3, #31
 8000b40:	d875      	bhi.n	8000c2e <Get_CRLH_Position+0x18e>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <Get_CRLH_Position+0xa8>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000bcf 	.word	0x08000bcf
 8000b4c:	08000bd5 	.word	0x08000bd5
 8000b50:	08000c2f 	.word	0x08000c2f
 8000b54:	08000bdb 	.word	0x08000bdb
 8000b58:	08000c2f 	.word	0x08000c2f
 8000b5c:	08000c2f 	.word	0x08000c2f
 8000b60:	08000c2f 	.word	0x08000c2f
 8000b64:	08000be1 	.word	0x08000be1
 8000b68:	08000c2f 	.word	0x08000c2f
 8000b6c:	08000c2f 	.word	0x08000c2f
 8000b70:	08000c2f 	.word	0x08000c2f
 8000b74:	08000c2f 	.word	0x08000c2f
 8000b78:	08000c2f 	.word	0x08000c2f
 8000b7c:	08000c2f 	.word	0x08000c2f
 8000b80:	08000c2f 	.word	0x08000c2f
 8000b84:	08000be7 	.word	0x08000be7
 8000b88:	08000c2f 	.word	0x08000c2f
 8000b8c:	08000c2f 	.word	0x08000c2f
 8000b90:	08000c2f 	.word	0x08000c2f
 8000b94:	08000c2f 	.word	0x08000c2f
 8000b98:	08000c2f 	.word	0x08000c2f
 8000b9c:	08000c2f 	.word	0x08000c2f
 8000ba0:	08000c2f 	.word	0x08000c2f
 8000ba4:	08000c2f 	.word	0x08000c2f
 8000ba8:	08000c2f 	.word	0x08000c2f
 8000bac:	08000c2f 	.word	0x08000c2f
 8000bb0:	08000c2f 	.word	0x08000c2f
 8000bb4:	08000c2f 	.word	0x08000c2f
 8000bb8:	08000c2f 	.word	0x08000c2f
 8000bbc:	08000c2f 	.word	0x08000c2f
 8000bc0:	08000c2f 	.word	0x08000c2f
 8000bc4:	08000bed 	.word	0x08000bed
 8000bc8:	2b40      	cmp	r3, #64	; 0x40
 8000bca:	d012      	beq.n	8000bf2 <Get_CRLH_Position+0x152>
 8000bcc:	e02f      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_0:
		shift = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd2:	e02c      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_1:
		shift = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd8:	e029      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_2:
		shift = 8;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	73fb      	strb	r3, [r7, #15]
		break;
 8000bde:	e026      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_3:
		shift = 12;
 8000be0:	230c      	movs	r3, #12
 8000be2:	73fb      	strb	r3, [r7, #15]
		break;
 8000be4:	e023      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_4:
		shift = 16;
 8000be6:	2310      	movs	r3, #16
 8000be8:	73fb      	strb	r3, [r7, #15]
		break;
 8000bea:	e020      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_5:
		shift = 20;
 8000bec:	2314      	movs	r3, #20
 8000bee:	73fb      	strb	r3, [r7, #15]
		break;
 8000bf0:	e01d      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_6:
		shift = 24;
 8000bf2:	2318      	movs	r3, #24
 8000bf4:	73fb      	strb	r3, [r7, #15]
		break;
 8000bf6:	e01a      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_7:
		shift = 28;
 8000bf8:	231c      	movs	r3, #28
 8000bfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000bfc:	e017      	b.n	8000c2e <Get_CRLH_Position+0x18e>

	case PIN_8:
		shift = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]
		break;
 8000c02:	e014      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_9:
		shift = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	73fb      	strb	r3, [r7, #15]
		break;
 8000c08:	e011      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_10:
		shift = 8;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c0e:	e00e      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_11:
		shift = 12;
 8000c10:	230c      	movs	r3, #12
 8000c12:	73fb      	strb	r3, [r7, #15]
		break;
 8000c14:	e00b      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_12:
		shift = 16;
 8000c16:	2310      	movs	r3, #16
 8000c18:	73fb      	strb	r3, [r7, #15]
		break;
 8000c1a:	e008      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_13:
		shift = 20;
 8000c1c:	2314      	movs	r3, #20
 8000c1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000c20:	e005      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_14:
		shift = 24;
 8000c22:	2318      	movs	r3, #24
 8000c24:	73fb      	strb	r3, [r7, #15]
		break;
 8000c26:	e002      	b.n	8000c2e <Get_CRLH_Position+0x18e>
	case PIN_15:
		shift = 28;
 8000c28:	231c      	movs	r3, #28
 8000c2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000c2c:	bf00      	nop

	}
	return shift;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d801      	bhi.n	8000c56 <GPIO_init+0x1a>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	e001      	b.n	8000c5a <GPIO_init+0x1e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff1d 	bl	8000aa0 <Get_CRLH_Position>
 8000c66:	4603      	mov	r3, r0
 8000c68:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	210f      	movs	r1, #15
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	43d2      	mvns	r2, r2
 8000c78:	401a      	ands	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	789b      	ldrb	r3, [r3, #2]
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	d00b      	beq.n	8000ca2 <GPIO_init+0x66>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d007      	beq.n	8000ca2 <GPIO_init+0x66>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	789b      	ldrb	r3, [r3, #2]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d003      	beq.n	8000ca2 <GPIO_init+0x66>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	2b05      	cmp	r3, #5
 8000ca0:	d10e      	bne.n	8000cc0 <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| pinConfig->Output_Speed) & 0x0f);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	b25a      	sxtb	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	78db      	ldrb	r3, [r3, #3]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	75fb      	strb	r3, [r7, #23]
 8000cbe:	e02c      	b.n	8000d1a <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d003      	beq.n	8000cd0 <GPIO_init+0x94>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d107      	bne.n	8000ce0 <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	789b      	ldrb	r3, [r3, #2]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f003 030f 	and.w	r3, r3, #15
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	e01c      	b.n	8000d1a <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d102      	bne.n	8000cee <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 8000ce8:	2304      	movs	r3, #4
 8000cea:	75fb      	strb	r3, [r7, #23]
 8000cec:	e015      	b.n	8000d1a <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 8000cee:	2308      	movs	r3, #8
 8000cf0:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d107      	bne.n	8000d0a <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	8812      	ldrh	r2, [r2, #0]
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	e007      	b.n	8000d1a <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	8812      	ldrh	r2, [r2, #0]
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	401a      	ands	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	7df9      	ldrb	r1, [r7, #23]
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	431a      	orrs	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <I2C_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void I2C_init(I2C_pinConfig_t *I2C_pinConfig, I2C_Registers_t *I2Cx) {
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]

	uint16 tmpreg=0, freqrange = 0, result = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	82fb      	strh	r3, [r7, #22]
 8000d42:	2300      	movs	r3, #0
 8000d44:	82bb      	strh	r3, [r7, #20]
 8000d46:	2300      	movs	r3, #0
 8000d48:	827b      	strh	r3, [r7, #18]
	uint32 pclk1 = 8000000;
 8000d4a:	4b71      	ldr	r3, [pc, #452]	; (8000f10 <I2C_init+0x1dc>)
 8000d4c:	60fb      	str	r3, [r7, #12]

       I2Cx->CR1  = 0;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
       I2Cx->CR2  = 0;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
       I2Cx->CCR  = 0;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
       I2Cx->OAR1 = 0;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
       I2Cx->OAR2 = 0;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
	/*            		Enable I2C clocks  					    */
	if (I2Cx == I2C1) {
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4a69      	ldr	r2, [pc, #420]	; (8000f14 <I2C_init+0x1e0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d10e      	bne.n	8000d92 <I2C_init+0x5e>
		Global_I2C_pinConfig[I2C1_Index] = *I2C_pinConfig;
 8000d74:	4a68      	ldr	r2, [pc, #416]	; (8000f18 <I2C_init+0x1e4>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4614      	mov	r4, r2
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_CLK_EN(APB1_ID,I2C1_ID);
 8000d88:	2115      	movs	r1, #21
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 fb9e 	bl	80014cc <RCC_CLK_EN>
 8000d90:	e012      	b.n	8000db8 <I2C_init+0x84>
	} else if (I2Cx == I2C2) {
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	4a61      	ldr	r2, [pc, #388]	; (8000f1c <I2C_init+0x1e8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <I2C_init+0x84>
		Global_I2C_pinConfig[I2C2_Index] = *I2C_pinConfig;
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	; (8000f18 <I2C_init+0x1e4>)
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f103 0420 	add.w	r4, r3, #32
 8000da2:	4615      	mov	r5, r2
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_CLK_EN(APB1_ID,I2C2_ID);
 8000db0:	2116      	movs	r1, #22
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 fb8a 	bl	80014cc <RCC_CLK_EN>
	}

	if (I2C_pinConfig->I2C_Mode == I2C_Mode_I2C) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d17d      	bne.n	8000ebc <I2C_init+0x188>
		/*
		 * 1. Configure CR2 register
		 * The FREQ bits must be configured with the APB clock frequency value (I2C peripheral connected to APB)
		 */

		tmpreg = I2Cx->CR2;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	82fb      	strh	r3, [r7, #22]
		tmpreg &= ~(0x3F << 0);
 8000dc6:	8afb      	ldrh	r3, [r7, #22]
 8000dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dcc:	82fb      	strh	r3, [r7, #22]
		pclk1 = RCC_getPCKL1_Freq();
 8000dce:	f000 fb55 	bl	800147c <RCC_getPCKL1_Freq>
 8000dd2:	60f8      	str	r0, [r7, #12]
		freqrange = (uint16) (pclk1 / 1000000); // to configure xMegaHz in register CR2, write xHz
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4a52      	ldr	r2, [pc, #328]	; (8000f20 <I2C_init+0x1ec>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9b      	lsrs	r3, r3, #18
 8000dde:	82bb      	strh	r3, [r7, #20]
		tmpreg |= freqrange;
 8000de0:	8afa      	ldrh	r2, [r7, #22]
 8000de2:	8abb      	ldrh	r3, [r7, #20]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = tmpreg;
 8000de8:	8afa      	ldrh	r2, [r7, #22]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	605a      	str	r2, [r3, #4]
		 * Sm mode or SMBus:
		 * Thigh = Tlow = CCR * TPCLK1
		 */

		//The CCR register must be configured only when the I2C is disabled
		I2Cx->CR1 &= ~(1 << 0);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 0201 	bic.w	r2, r3, #1
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]
		tmpreg = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	82fb      	strh	r3, [r7, #22]

		if ((I2C_pinConfig->Clock_Speed == I2C_CLK_SM_100K)	|| (I2C_pinConfig->Clock_Speed == I2C_CLK_SM_50K)) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <I2C_init+0x1f0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d004      	beq.n	8000e12 <I2C_init+0xde>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e10:	d112      	bne.n	8000e38 <I2C_init+0x104>
			result = (uint16)(pclk1 / ( I2C_pinConfig->Clock_Speed << 1   )   );
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	827b      	strh	r3, [r7, #18]

			tmpreg |= result;
 8000e20:	8afa      	ldrh	r2, [r7, #22]
 8000e22:	8a7b      	ldrh	r3, [r7, #18]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	82fb      	strh	r3, [r7, #22]

			I2Cx->CCR = tmpreg;
 8000e28:	8afa      	ldrh	r2, [r7, #22]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	61da      	str	r2, [r3, #28]

			// Maximum rise time in Fm/Sm mode (Master mode)
			//  the value of FREQ[5:0] bits + 1
			I2Cx->TRISE = freqrange + 1;
 8000e2e:	8abb      	ldrh	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	461a      	mov	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	621a      	str	r2, [r3, #32]

		} else {
			//FM Not supported
		}
		/*            		Configure CR1   					    */
		tmpreg = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	82fb      	strh	r3, [r7, #22]
		tmpreg = I2Cx->CR1;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	82fb      	strh	r3, [r7, #22]
		tmpreg |= (uint16) (I2C_pinConfig->ACK_Enable
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
				| I2C_pinConfig->Stretch_Mode | I2C_pinConfig->I2C_Mode);
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
		tmpreg |= (uint16) (I2C_pinConfig->ACK_Enable
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	8afb      	ldrh	r3, [r7, #22]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR1 = tmpreg;
 8000e62:	8afa      	ldrh	r2, [r7, #22]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	601a      	str	r2, [r3, #0]

		/*            		Configure OAR1 & OAR2   					    */
		tmpreg = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	82fb      	strh	r3, [r7, #22]
		if (I2C_pinConfig->slave_address.Enable_Dual_Mode) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	899b      	ldrh	r3, [r3, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00f      	beq.n	8000e94 <I2C_init+0x160>
			tmpreg |= (1 << 0); 	//Dual addressing mode enable
 8000e74:	8afb      	ldrh	r3, [r7, #22]
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	82fb      	strh	r3, [r7, #22]
			tmpreg |=
					(I2C_pinConfig->slave_address.slave_secndary_address << 1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8a1b      	ldrh	r3, [r3, #16]
 8000e80:	005b      	lsls	r3, r3, #1
			tmpreg |=
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8000e8e:	8afa      	ldrh	r2, [r7, #22]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	60da      	str	r2, [r3, #12]
		}
		tmpreg = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	82fb      	strh	r3, [r7, #22]
		tmpreg |= (I2C_pinConfig->slave_address.slave_primary_address << 1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	89db      	ldrh	r3, [r3, #14]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_pinConfig->slave_address.slave_address_mode; // 10 bit mode not supported
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8000eb6:	8afa      	ldrh	r2, [r7, #22]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	609a      	str	r2, [r3, #8]
	} else {
		//Not supported SMUBUS mode
	}

	//Interrupt Mode (slave mode)
	if (I2C_pinConfig->P_Slave_CallBack_Fun != NULL) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d01a      	beq.n	8000efa <I2C_init+0x1c6>
		I2Cx->CR2 |= (1 << 8) | (1 << 9) | (1 << 10);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	605a      	str	r2, [r3, #4]
		if (I2Cx == I2C1) {
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <I2C_init+0x1e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <I2C_init+0x1b2>
			NVIC_Enable(NVIC_I2C1_EV);
 8000ed8:	201f      	movs	r0, #31
 8000eda:	f000 fa7d 	bl	80013d8 <NVIC_Enable>
			NVIC_Enable(NVIC_I2C1_ER);
 8000ede:	2020      	movs	r0, #32
 8000ee0:	f000 fa7a 	bl	80013d8 <NVIC_Enable>
 8000ee4:	e009      	b.n	8000efa <I2C_init+0x1c6>

		} else if (I2Cx == I2C2) {
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <I2C_init+0x1e8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d105      	bne.n	8000efa <I2C_init+0x1c6>
			NVIC_Enable(NVIC_I2C1_EV);
 8000eee:	201f      	movs	r0, #31
 8000ef0:	f000 fa72 	bl	80013d8 <NVIC_Enable>
			NVIC_Enable(NVIC_I2C1_ER);
 8000ef4:	2020      	movs	r0, #32
 8000ef6:	f000 fa6f 	bl	80013d8 <NVIC_Enable>
		}
	}

	/*            		Periphral Enable 					    */

	I2Cx->CR1 |= (1 << 0);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	601a      	str	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	007a1200 	.word	0x007a1200
 8000f14:	40005400 	.word	0x40005400
 8000f18:	20000488 	.word	0x20000488
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <I2C_GPIO_SetPins>:
		NVIC_Disable(NVIC_I2C2_ER);
		NVIC_Disable(NVIC_I2C2_EV);
	}
}

void I2C_GPIO_SetPins(I2C_Registers_t *I2Cx) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t GPIO_pinConfig;

	if (I2Cx == I2C1) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <I2C_GPIO_SetPins+0x78>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d114      	bne.n	8000f62 <I2C_GPIO_SetPins+0x3a>
		//I2C1 SDA : PB7  SCL : PB6
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_OD;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_6;
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <I2C_GPIO_SetPins+0x7c>)
 8000f4c:	f7ff fe76 	bl	8000c3c <GPIO_init>

		GPIO_pinConfig.Pin_Number = PIN_7;
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <I2C_GPIO_SetPins+0x7c>)
 8000f5c:	f7ff fe6e 	bl	8000c3c <GPIO_init>

		GPIO_pinConfig.Pin_Number = PIN_10;
		GPIO_init(GPIOB, &GPIO_pinConfig);

	}
}
 8000f60:	e019      	b.n	8000f96 <I2C_GPIO_SetPins+0x6e>
	} else if (I2Cx == I2C2) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <I2C_GPIO_SetPins+0x80>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d115      	bne.n	8000f96 <I2C_GPIO_SetPins+0x6e>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_OD;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_11;
 8000f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f76:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <I2C_GPIO_SetPins+0x7c>)
 8000f80:	f7ff fe5c 	bl	8000c3c <GPIO_init>
		GPIO_pinConfig.Pin_Number = PIN_10;
 8000f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f88:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <I2C_GPIO_SetPins+0x7c>)
 8000f92:	f7ff fe53 	bl	8000c3c <GPIO_init>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40005800 	.word	0x40005800

08000fac <I2C_Master_TX>:

void I2C_Master_TX(I2C_Registers_t *I2Cx, uint16 slaveAddress, uint8 *data,
		uint32 dataLen, Stop_Condition_t stop, Repeated_Start_t start) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	817b      	strh	r3, [r7, #10]
	   volatile uint32 dummyRead __attribute__((unused));
	// 1.Generate start condition.
	I2C_GenerateStart(I2Cx, start, I2C_ENABLE);
 8000fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 f843 	bl	8001050 <I2C_GenerateStart>
	// 2.Set when a Start condition generated.
	while (!I2C_GetFlagStatus(I2Cx, EV5))
 8000fca:	bf00      	nop
 8000fcc:	2101      	movs	r1, #1
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f880 	bl	80010d4 <I2C_GetFlagStatus>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f8      	beq.n	8000fcc <I2C_Master_TX+0x20>
		;
	//3.Send slave address
	I2C_SendSlaveAddress(I2Cx,slaveAddress, I2C_TX);
 8000fda:	897b      	ldrh	r3, [r7, #10]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f8ef 	bl	80011c4 <I2C_SendSlaveAddress>
	//4.Set by hardware as soon as the received slave address matched with the OAR registers
	while (!I2C_GetFlagStatus(I2Cx, EV6));
 8000fe6:	bf00      	nop
 8000fe8:	2102      	movs	r1, #2
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f000 f872 	bl	80010d4 <I2C_GetFlagStatus>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f8      	beq.n	8000fe8 <I2C_Master_TX+0x3c>
	//5. check TRA , BUSY, TXE, MSL
	while (!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TX));
 8000ff6:	bf00      	nop
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f86a 	bl	80010d4 <I2C_GetFlagStatus>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f8      	beq.n	8000ff8 <I2C_Master_TX+0x4c>
	//6. Send data
	for(uint8 i =0 ; i <dataLen ; i++){
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
 800100a:	e011      	b.n	8001030 <I2C_Master_TX+0x84>
		I2Cx->DR = data[i];
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	611a      	str	r2, [r3, #16]
		while (!I2C_GetFlagStatus(I2Cx, EV8));
 800101a:	bf00      	nop
 800101c:	2104      	movs	r1, #4
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 f858 	bl	80010d4 <I2C_GetFlagStatus>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f8      	beq.n	800101c <I2C_Master_TX+0x70>
	for(uint8 i =0 ; i <dataLen ; i++){
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	3301      	adds	r3, #1
 800102e:	75fb      	strb	r3, [r7, #23]
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8e9      	bhi.n	800100c <I2C_Master_TX+0x60>

	}
	  // Wait for byte transfer to complete
	  //  while(!GET_BIT(I2C[I2CNum]->SR1,2));
	//7. Send Stop condition
	if(stop == STOP)
 8001038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d103      	bne.n	8001048 <I2C_Master_TX+0x9c>
		I2C_GenerateStop(I2Cx, I2C_ENABLE);
 8001040:	2100      	movs	r1, #0
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f82b 	bl	800109e <I2C_GenerateStop>

}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <I2C_GenerateStart>:


}

void I2C_GenerateStart(I2C_Registers_t *I2Cx, Repeated_Start_t start,
		Functional_State_t State) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
 800105c:	4613      	mov	r3, r2
 800105e:	70bb      	strb	r3, [r7, #2]

	// Setting the START bit causes the interface to generate a Start condition and to switch to
	//Master mode (MSL bit set) when the BUSY bit is cleared

	if (start != REPEATED_START) {
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d007      	beq.n	8001076 <I2C_GenerateStart+0x26>
		while (I2C_GetFlagStatus(I2Cx, BUS_BUSY))
 8001066:	bf00      	nop
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f832 	bl	80010d4 <I2C_GetFlagStatus>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f8      	bne.n	8001068 <I2C_GenerateStart+0x18>
			;

	}
	if (State != I2C_DISABLE) {
 8001076:	78bb      	ldrb	r3, [r7, #2]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d006      	beq.n	800108a <I2C_GenerateStart+0x3a>
		/*
		 * In Master Mode:
		 0: No Start generation
		 1: Repeated start generation
		 */
		I2Cx->CR1 |= (1 << 8);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	601a      	str	r2, [r3, #0]
	} else {
		I2Cx->CR1 &= ~(1 << 8);

	}

}
 8001088:	e005      	b.n	8001096 <I2C_GenerateStart+0x46>
		I2Cx->CR1 &= ~(1 << 8);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <I2C_GenerateStop>:
void I2C_GenerateStop(I2C_Registers_t *I2Cx ,Functional_State_t State){
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	70fb      	strb	r3, [r7, #3]

	if (State != I2C_DISABLE) {
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d006      	beq.n	80010be <I2C_GenerateStop+0x20>
			/*
			 * In Master Mode:
			0: No Stop generation.
			1: Stop generation after the current byte transfer or after the current Start condition is sent.
			 */
			I2Cx->CR1 |= (1 << 9);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
		} else {
			I2Cx->CR1 &= ~(1 << 9);

		}

}
 80010bc:	e005      	b.n	80010ca <I2C_GenerateStop+0x2c>
			I2Cx->CR1 &= ~(1 << 9);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <I2C_GetFlagStatus>:
				I2Cx->CR1 &= ~(1 << 10);

			}
}

FlagStatus I2C_GetFlagStatus(I2C_Registers_t *I2Cx, Status Flag) {
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
	FlagStatus bitStatus = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
	uint32 dummyRead = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]

	switch (Flag) {
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d864      	bhi.n	80011b8 <I2C_GetFlagStatus+0xe4>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <I2C_GetFlagStatus+0x20>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	08001111 	.word	0x08001111
 80010f8:	08001127 	.word	0x08001127
 80010fc:	0800113d 	.word	0x0800113d
 8001100:	08001153 	.word	0x08001153
 8001104:	08001153 	.word	0x08001153
 8001108:	080011a3 	.word	0x080011a3
 800110c:	08001169 	.word	0x08001169
	case BUS_BUSY:
		bitStatus = (I2Cx->SR2 & (1 << 1)) ? SET : RESET;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	73fb      	strb	r3, [r7, #15]
		break;
 8001124:	e048      	b.n	80011b8 <I2C_GetFlagStatus+0xe4>
	case EV5:
		bitStatus = ((I2Cx->SR1) & (1 << 0)) ? SET : RESET;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf14      	ite	ne
 8001132:	2301      	movne	r3, #1
 8001134:	2300      	moveq	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	73fb      	strb	r3, [r7, #15]
		break;
 800113a:	e03d      	b.n	80011b8 <I2C_GetFlagStatus+0xe4>
	case EV6:
		bitStatus = ((I2Cx->SR1) & (1 << 1)) ? SET : RESET;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf14      	ite	ne
 8001148:	2301      	movne	r3, #1
 800114a:	2300      	moveq	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73fb      	strb	r3, [r7, #15]
		break;
 8001150:	e032      	b.n	80011b8 <I2C_GetFlagStatus+0xe4>
	case EV8:
	case EV8_1:  //Data register empty (transmitters)
		bitStatus = (I2Cx->SR1 & (1 << 7)) ? SET : RESET;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73fb      	strb	r3, [r7, #15]
		break;
 8001166:	e027      	b.n	80011b8 <I2C_GetFlagStatus+0xe4>
	case MASTER_BYTE_TX:
		bitStatus = ((I2Cx->SR1 & (1 << 7)) && (I2Cx->SR2 & (1 << 1)) &&(I2Cx->SR2 & (1 << 0)) &&(I2Cx->SR2 & (1 << 2))) ? SET : RESET;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <I2C_GetFlagStatus+0xc8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00d      	beq.n	800119c <I2C_GetFlagStatus+0xc8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <I2C_GetFlagStatus+0xc8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <I2C_GetFlagStatus+0xc8>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <I2C_GetFlagStatus+0xca>
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
		break;
 80011a0:	e00a      	b.n	80011b8 <I2C_GetFlagStatus+0xe4>
	case EV7:
			bitStatus = (I2Cx->SR1 & (1 << 6)) ? SET : RESET;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf14      	ite	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	2300      	moveq	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	73fb      	strb	r3, [r7, #15]
			break;
 80011b6:	bf00      	nop
	}


	return bitStatus;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <I2C_SendSlaveAddress>:

void I2C_SendSlaveAddress(I2C_Registers_t *I2Cx , uint16 slaveAddress, I2C_Direction_t Direction){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
	// 10 bit mode is not supported
		uint8 index = (I2Cx == I2C1) ? I2C1_Index: I2C2_Index;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <I2C_SendSlaveAddress+0x58>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	73fb      	strb	r3, [r7, #15]
if(Global_I2C_pinConfig[index].slave_address.slave_address_mode == I2C_Slave_7Bit){
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <I2C_SendSlaveAddress+0x5c>)
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	4413      	add	r3, r2
 80011ec:	3314      	adds	r3, #20
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10e      	bne.n	8001212 <I2C_SendSlaveAddress+0x4e>
	  if(Direction == I2C_TX){
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d104      	bne.n	8001204 <I2C_SendSlaveAddress+0x40>
		  // To enter Transmitter mode, a master sends the slave address with LSB reset.
		  slaveAddress &= (uint8)(~0x0001);
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001200:	807b      	strh	r3, [r7, #2]
 8001202:	e003      	b.n	800120c <I2C_SendSlaveAddress+0x48>
	  }else{
		  //  To enter Receiver mode, a master sends the slave address with LSB set.
		  slaveAddress |= 0x0001;
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	807b      	strh	r3, [r7, #2]
	  }I2Cx->DR = 	slaveAddress;
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
}else{
	// not supported
}


}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40005400 	.word	0x40005400
 8001220:	20000488 	.word	0x20000488

08001224 <I2C1_EV_IRQHandler>:
}
uint8 I2C_Slave_RX(I2C_Registers_t *I2Cx){
	return (uint8)I2Cx->DR;
}

void I2C1_EV_IRQHandler(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
	volatile uint32 dummy_read = 0 ;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
	I2C_Registers_t* I2Cx = I2C1 ;
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <I2C1_EV_IRQHandler+0xe8>)
 8001230:	617b      	str	r3, [r7, #20]
		//Interrupt handling for both master and slave mode of a device
		uint32 temp1, temp2, temp3;

		temp1   = I2Cx->CR2 & (  1<<9) ;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800123a:	613b      	str	r3, [r7, #16]
		temp2   = I2Cx->CR2 & ( 1<<10) ;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	60fb      	str	r3, [r7, #12]
		temp3  = I2Cx->SR1 & ( 1<<8);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	60bb      	str	r3, [r7, #8]


		// Handle For interrupt generated by STOPF event
			// Note : Stop detection flag is applicable only slave mode
			if(temp1 && temp3)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <I2C1_EV_IRQHandler+0x48>
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <I2C1_EV_IRQHandler+0x48>
			{
				//STOF flag is set
				//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
				I2Cx->CR1 |= 0x0000;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	601a      	str	r2, [r3, #0]
				Slave_States(I2Cx,EV_STOP);
 8001264:	2100      	movs	r1, #0
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f000 f852 	bl	8001310 <Slave_States>


			}
			//----------------------------------------------------------
			temp3  = I2Cx->SR1 & (1<<1);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by ADDR event
			//Note : When master mode : Address is sent
			//		 When Slave mode   : Address matched with own address
			if(temp1 && temp3)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d012      	beq.n	80012a2 <I2C1_EV_IRQHandler+0x7e>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00f      	beq.n	80012a2 <I2C1_EV_IRQHandler+0x7e>
			{
				// interrupt is generated because of ADDR event
				//check for device mode
				if(I2Cx->SR2 & ( 1<<0))
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <I2C1_EV_IRQHandler+0x7e>

				}else
				{
					//slave mode
					//clear the ADDR flag ( read SR1 , read SR2)
					dummy_read = I2Cx->SR1;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	607b      	str	r3, [r7, #4]
					dummy_read = I2Cx->SR2;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	607b      	str	r3, [r7, #4]
					Slave_States(I2Cx,EV_ADDR_Matched);
 800129a:	2102      	movs	r1, #2
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f000 f837 	bl	8001310 <Slave_States>

				}
			}
			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<7);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by TXE event
			if(temp1 && temp2 && temp3)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00f      	beq.n	80012d2 <I2C1_EV_IRQHandler+0xae>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <I2C1_EV_IRQHandler+0xae>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <I2C1_EV_IRQHandler+0xae>
			{
				//Check for device mode
				if(I2Cx->SR2 & (1<<0))
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <I2C1_EV_IRQHandler+0xae>
				{

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REQ);
 80012ca:	2103      	movs	r1, #3
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f000 f81f 	bl	8001310 <Slave_States>
				}
			}

			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<6);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
			if(temp1 && temp2 && temp3)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00f      	beq.n	8001302 <I2C1_EV_IRQHandler+0xde>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <I2C1_EV_IRQHandler+0xde>
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <I2C1_EV_IRQHandler+0xde>
			{
				//check device mode .
				if(I2Cx->SR2 & ( 1<<0))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <I2C1_EV_IRQHandler+0xde>
					//The device is master

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REC);
 80012fa:	2104      	movs	r1, #4
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f000 f807 	bl	8001310 <Slave_States>

				}
			}
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400

08001310 <Slave_States>:


void Slave_States (I2C_Registers_t* I2Cx  ,Slave_state state)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	uint8 index =    I2Cx == I2C1 ? I2C1_Index: I2C2_Index ;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <Slave_States+0xc0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	73fb      	strb	r3, [r7, #15]

	switch (state)
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d84a      	bhi.n	80013c8 <Slave_States+0xb8>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <Slave_States+0x28>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001353 	.word	0x08001353
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001371 	.word	0x08001371
 8001344:	08001383 	.word	0x08001383
 8001348:	080013a1 	.word	0x080013a1
	{

	case ERR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8001350:	e03a      	b.n	80013c8 <Slave_States+0xb8>
	}

	case EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d02f      	beq.n	80013be <Slave_States+0xae>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_STOP) ;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <Slave_States+0xc4>)
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	4413      	add	r3, r2
 8001366:	331c      	adds	r3, #28
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2000      	movs	r0, #0
 800136c:	4798      	blx	r3
		}

		break ;
 800136e:	e026      	b.n	80013be <Slave_States+0xae>
	}

	case EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_ADDR_Matched) ;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <Slave_States+0xc4>)
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	4413      	add	r3, r2
 8001378:	331c      	adds	r3, #28
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2002      	movs	r0, #2
 800137e:	4798      	blx	r3


		break ;
 8001380:	e022      	b.n	80013c8 <Slave_States+0xb8>
	}

	case EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <Slave_States+0xb2>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REQ) ;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <Slave_States+0xc4>)
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	4413      	add	r3, r2
 8001396:	331c      	adds	r3, #28
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2003      	movs	r0, #3
 800139c:	4798      	blx	r3

		}

		break ;
 800139e:	e010      	b.n	80013c2 <Slave_States+0xb2>
	}
	case EV_DATA_REC:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( 1<<2)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10c      	bne.n	80013c6 <Slave_States+0xb6>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REC) ;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <Slave_States+0xc4>)
 80013b0:	015b      	lsls	r3, r3, #5
 80013b2:	4413      	add	r3, r2
 80013b4:	331c      	adds	r3, #28
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2004      	movs	r0, #4
 80013ba:	4798      	blx	r3

		}

		break ;
 80013bc:	e003      	b.n	80013c6 <Slave_States+0xb6>
		break ;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Slave_States+0xb8>
		break ;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Slave_States+0xb8>
		break ;
 80013c6:	bf00      	nop
	}
	}

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005400 	.word	0x40005400
 80013d4:	20000488 	.word	0x20000488

080013d8 <NVIC_Enable>:
 * @brief          - Enables the NVIC interrupt pin
 * @param [in]     - IRQ_Number :  The specified Interrupt Number to be enabled
 * @retval         - none
 */

void NVIC_Enable(uint8 IRQ_Number) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if ((IRQ_Number >= 0) && (IRQ_Number <= 31)) {
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d809      	bhi.n	80013fc <NVIC_Enable+0x24>
		ISER0 |= (1U << IRQ_Number);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <NVIC_Enable+0x50>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <NVIC_Enable+0x50>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
		ISER1 |= (1U << (IRQ_Number - 32));
	}
}
 80013fa:	e00f      	b.n	800141c <NVIC_Enable+0x44>
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b1f      	cmp	r3, #31
 8001400:	d90c      	bls.n	800141c <NVIC_Enable+0x44>
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b3b      	cmp	r3, #59	; 0x3b
 8001406:	d809      	bhi.n	800141c <NVIC_Enable+0x44>
		ISER1 |= (1U << (IRQ_Number - 32));
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <NVIC_Enable+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3b20      	subs	r3, #32
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	4905      	ldr	r1, [pc, #20]	; (800142c <NVIC_Enable+0x54>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000e104 	.word	0xe000e104

08001430 <RCC_getSYSCLK_Freq>:
 1101: SYSCLK divided by 128
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512
 */
uint8 AHB_PrescTable[16U] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9 };
uint32 RCC_getSYSCLK_Freq(void) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
	/*
	 * 	00: HSI selected as system clock
	 01: HSE selected as system clock
	 10: PLL selected as system clock
	 */
	uint8 SW = (RCC->CFGR >> 2) & 0b11;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <RCC_getSYSCLK_Freq+0x40>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	71fb      	strb	r3, [r7, #7]
	switch (SW) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d00a      	beq.n	8001460 <RCC_getSYSCLK_Freq+0x30>
 800144a:	2b02      	cmp	r3, #2
 800144c:	dc0a      	bgt.n	8001464 <RCC_getSYSCLK_Freq+0x34>
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <RCC_getSYSCLK_Freq+0x28>
 8001452:	2b01      	cmp	r3, #1
 8001454:	d002      	beq.n	800145c <RCC_getSYSCLK_Freq+0x2c>
 8001456:	e005      	b.n	8001464 <RCC_getSYSCLK_Freq+0x34>
	case 0:
		return HSI ;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <RCC_getSYSCLK_Freq+0x44>)
 800145a:	e004      	b.n	8001466 <RCC_getSYSCLK_Freq+0x36>
		break;
	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		return HSE ;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <RCC_getSYSCLK_Freq+0x48>)
 800145e:	e002      	b.n	8001466 <RCC_getSYSCLK_Freq+0x36>
		break;
	case 2:
		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return HSE ;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <RCC_getSYSCLK_Freq+0x48>)
 8001462:	e000      	b.n	8001466 <RCC_getSYSCLK_Freq+0x36>
		break;
	}
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000
 8001474:	007a1200 	.word	0x007a1200
 8001478:	00f42400 	.word	0x00f42400

0800147c <RCC_getPCKL1_Freq>:

uint32 RCC_getPCKL1_Freq(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 8) & 0b111)]); // First right shift is multiplication
 8001480:	f000 f810 	bl	80014a4 <RCC_getHCKL_Freq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <RCC_getPCKL1_Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <RCC_getPCKL1_Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	20000008 	.word	0x20000008

080014a4 <RCC_getHCKL_Freq>:
uint32 RCC_getPCKL2_Freq(void) {
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 11) & 0b111)]);
}
uint32 RCC_getHCKL_Freq(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getSYSCLK_Freq() >> AHB_PrescTable[((RCC->CFGR >> 4) & 0b1111)]);
 80014a8:	f7ff ffc2 	bl	8001430 <RCC_getSYSCLK_Freq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <RCC_getHCKL_Freq+0x20>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4903      	ldr	r1, [pc, #12]	; (80014c8 <RCC_getHCKL_Freq+0x24>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	20000010 	.word	0x20000010

080014cc <RCC_CLK_EN>:
		break;

	}
}

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	460a      	mov	r2, r1
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	4613      	mov	r3, r2
 80014da:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d01c      	beq.n	800151c <RCC_CLK_EN+0x50>
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	dc25      	bgt.n	8001532 <RCC_CLK_EN+0x66>
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <RCC_CLK_EN+0x24>
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d00b      	beq.n	8001506 <RCC_CLK_EN+0x3a>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 80014ee:	e020      	b.n	8001532 <RCC_CLK_EN+0x66>
		RCC->ABP1ENR |= (1 << periphralID);
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <RCC_CLK_EN+0x70>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	79ba      	ldrb	r2, [r7, #6]
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <RCC_CLK_EN+0x70>)
 8001500:	430b      	orrs	r3, r1
 8001502:	61d3      	str	r3, [r2, #28]
		break;
 8001504:	e015      	b.n	8001532 <RCC_CLK_EN+0x66>
		RCC->ABP2ENR |= (1 << periphralID);
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <RCC_CLK_EN+0x70>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	79ba      	ldrb	r2, [r7, #6]
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	4611      	mov	r1, r2
 8001514:	4a09      	ldr	r2, [pc, #36]	; (800153c <RCC_CLK_EN+0x70>)
 8001516:	430b      	orrs	r3, r1
 8001518:	6193      	str	r3, [r2, #24]
		break;
 800151a:	e00a      	b.n	8001532 <RCC_CLK_EN+0x66>
		RCC->AHBENR |= (1 << periphralID);
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <RCC_CLK_EN+0x70>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	4611      	mov	r1, r2
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <RCC_CLK_EN+0x70>)
 800152c:	430b      	orrs	r3, r1
 800152e:	6153      	str	r3, [r2, #20]
		break;
 8001530:	bf00      	nop
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000

08001540 <SPI1_IRQHandler>:
	}
	*pData = SPIx->DR;
}

//ISR
void SPI1_IRQHandler(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI1->SR & (1 << 1)) >> 1);
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SPI1_IRQHandler+0x50>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	793b      	ldrb	r3, [r7, #4]
 8001554:	f362 0300 	bfi	r3, r2, #0, #1
 8001558:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1 << 0)) >> 0);
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <SPI1_IRQHandler+0x50>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	793b      	ldrb	r3, [r7, #4]
 8001566:	f362 0341 	bfi	r3, r2, #1, #1
 800156a:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1 << 4)) >> 4);
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SPI1_IRQHandler+0x50>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	793b      	ldrb	r3, [r7, #4]
 800157a:	f362 0382 	bfi	r3, r2, #2, #1
 800157e:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI1_Index].P_CallBackFun(IRQ);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SPI1_IRQHandler+0x54>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	7938      	ldrb	r0, [r7, #4]
 8001586:	4798      	blx	r3
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	200004c8 	.word	0x200004c8

08001598 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI2->SR & (1 << 1)) >> 1);
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <SPI2_IRQHandler+0x50>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	f362 0300 	bfi	r3, r2, #0, #1
 80015b0:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1 << 0)) >> 0);
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <SPI2_IRQHandler+0x50>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	793b      	ldrb	r3, [r7, #4]
 80015be:	f362 0341 	bfi	r3, r2, #1, #1
 80015c2:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1 << 4)) >> 4);
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <SPI2_IRQHandler+0x50>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	793b      	ldrb	r3, [r7, #4]
 80015d2:	f362 0382 	bfi	r3, r2, #2, #1
 80015d6:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI2_Index].P_CallBackFun(IRQ);
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SPI2_IRQHandler+0x54>)
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	7938      	ldrb	r0, [r7, #4]
 80015de:	4798      	blx	r3
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40003800 	.word	0x40003800
 80015ec:	200004c8 	.word	0x200004c8

080015f0 <STK_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void STK_init() {
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
#if STK_CLK_SRC == AHB_8
	SYSTICK->CTRL &= ~(1 << 2);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <STK_init+0x20>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <STK_init+0x20>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	6013      	str	r3, [r2, #0]
	microSecond = 1;		// Assuming system clock is HSI
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <STK_init+0x24>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
#elif STK_CLK_SRC =AHB
	SYSTICK->CTRL |= (1<<2);
	microSecond = 8;		// Assuming system clock is HSI
#endif

}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010
 8001614:	200004f8 	.word	0x200004f8

08001618 <STK_delayMs>:
	SYSTICK->VAL = 0;
	SYSTICK->CTRL &= ~(1<<0);

}

void STK_delayMs(uint32 time) {
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	for (uint32 i=0; i < time; i++) {
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e029      	b.n	800167a <STK_delayMs+0x62>
		SYSTICK->LOAD = 1000*microSecond;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <STK_delayMs+0x78>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <STK_delayMs+0x7c>)
 800162c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	6053      	str	r3, [r2, #4]
		//Disable Interrupt
		CLEAR(SYSTICK->CTRL, 1);
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <STK_delayMs+0x7c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <STK_delayMs+0x7c>)
 800163c:	f023 0302 	bic.w	r3, r3, #2
 8001640:	6013      	str	r3, [r2, #0]
		//Enable Systick
		SET(SYSTICK->CTRL, 0);
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <STK_delayMs+0x7c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <STK_delayMs+0x7c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
		//Wait for flag
		while (!GET(SYSTICK->CTRL, 16))
 800164e:	bf00      	nop
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <STK_delayMs+0x7c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f9      	beq.n	8001650 <STK_delayMs+0x38>
			;
		//Disable Systick
		SYSTICK->LOAD = 0;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <STK_delayMs+0x7c>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
		SYSTICK->VAL = 0;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <STK_delayMs+0x7c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
		CLEAR(SYSTICK->CTRL, 0);
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <STK_delayMs+0x7c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a09      	ldr	r2, [pc, #36]	; (8001694 <STK_delayMs+0x7c>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]
	for (uint32 i=0; i < time; i++) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3d1      	bcc.n	8001626 <STK_delayMs+0xe>
	}
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200004f8 	.word	0x200004f8
 8001694:	e000e010 	.word	0xe000e010

08001698 <SysTick_Handler>:
uint32 STK_getRemainingTime() {
	return (SYSTICK->VAL);

}

void SysTick_Handler() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	uint8 flag = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
#if STK_MODE == SINGLE
	SYSTICK->LOAD = 0;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <SysTick_Handler+0x44>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <SysTick_Handler+0x44>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
	CLEAR(SYSTICK->CTRL, 0);
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <SysTick_Handler+0x44>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Handler+0x44>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 1);
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <SysTick_Handler+0x44>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <SysTick_Handler+0x44>)
 80016c0:	f023 0302 	bic.w	r3, r3, #2
 80016c4:	6013      	str	r3, [r2, #0]
#endif

	P_CallBack_Fun();
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SysTick_Handler+0x48>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4798      	blx	r3
	flag = GET(SYSTICK->CTRL, 16);
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <SysTick_Handler+0x44>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	71fb      	strb	r3, [r7, #7]
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	e000e010 	.word	0xe000e010
 80016e0:	200004fc 	.word	0x200004fc

080016e4 <USART1_IRQHandler>:
	// Add the null terminator at the end of the received string.
	buffer[index] = '\0';
}

// ISR
void USART1_IRQHandler() {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <USART1_IRQHandler+0x10>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4798      	blx	r3
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000500 	.word	0x20000500

080016f8 <USART2_IRQHandler>:
void USART2_IRQHandler() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	4798      	blx	r3
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000500 	.word	0x20000500

0800170c <USART3_IRQHandler>:
void USART3_IRQHandler() {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <USART3_IRQHandler+0x10>)
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	4798      	blx	r3
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000500 	.word	0x20000500

08001720 <main>:
#include "main.h"
int main() {
 8001720:	b580      	push	{r7, lr}
 8001722:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001726:	af02      	add	r7, sp, #8
  char item[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0xf0, 0x00, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x01, 0x8f, 0xf0, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x01, 0x80, 0x7f, 0x70, 0x00, 0x06, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0xc2, 0x07, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x60, 0x60, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x30, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x18, 0x06, 0x00, 0x08, 0x00, 0x0f, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x08, 0x03, 0x01, 0x00, 0x7c, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x0c, 0x01, 0x3f, 0x00, 0x7e, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x06, 0x01, 0x7f, 0x80, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x02, 0x01, 0x3f, 0x89, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x03, 0x00, 0x3f, 0x91, 0xfe, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x01, 0xc0, 0x1f, 0x81, 0xf8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x03, 0xc0, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x01, 0x3f, 0xff, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x01, 0x1e, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0xe0, 0x00, 0x1d, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x01, 0x98, 0x00, 0xcd, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x03, 0x8f, 0x81, 0x99, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x03, 0x4b, 0x9f, 0x19, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x03, 0x72, 0x68, 0x2c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x03, 0x92, 0x48, 0x4c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x01, 0xd0, 0x48, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x03, 0x7c, 0x09, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x01, 0xf8, 0x0b, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x60, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x20, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x20, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x70, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x78, 0xc8, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001728:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800172c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <main+0x90>)
 8001732:	4618      	mov	r0, r3
 8001734:	4611      	mov	r1, r2
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	461a      	mov	r2, r3
 800173c:	f000 f896 	bl	800186c <memcpy>


RCC_CLK_EN(APB2_ID,GPIOB_ID);
 8001740:	2103      	movs	r1, #3
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fec2 	bl	80014cc <RCC_CLK_EN>

  oled_Init(I2C1);
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <main+0x94>)
 800174a:	f7fe fdb9 	bl	80002c0 <oled_Init>

  STK_init();
 800174e:	f7ff ff4f 	bl	80015f0 <STK_init>


  oled_GotoXY(5, 3);
 8001752:	2103      	movs	r1, #3
 8001754:	2005      	movs	r0, #5
 8001756:	f7fe ff0b 	bl	8000570 <oled_GotoXY>
  oled_writeString("Hello World",&Font_11x18,1);
 800175a:	2201      	movs	r2, #1
 800175c:	4916      	ldr	r1, [pc, #88]	; (80017b8 <main+0x98>)
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <main+0x9c>)
 8001760:	f7fe ff9c 	bl	800069c <oled_writeString>
  oled_UpdateScreen();
 8001764:	f7fe fe60 	bl	8000428 <oled_UpdateScreen>
  STK_delayMs(1000);
 8001768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800176c:	f7ff ff54 	bl	8001618 <STK_delayMs>
  oled_ScrollLeft(0, 7);
 8001770:	2107      	movs	r1, #7
 8001772:	2000      	movs	r0, #0
 8001774:	f7fe fcfc 	bl	8000170 <oled_ScrollLeft>
  STK_delayMs(1000);
 8001778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177c:	f7ff ff4c 	bl	8001618 <STK_delayMs>
  oled_Stopscroll();
 8001780:	f7fe fd2c 	bl	80001dc <oled_Stopscroll>


while(1) {
oled_Clear();
 8001784:	f7fe ffaf 	bl	80006e6 <oled_Clear>
  oled_DrawBitmap(10,10,item,128,64,1);
 8001788:	463a      	mov	r2, r7
 800178a:	2301      	movs	r3, #1
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	210a      	movs	r1, #10
 8001796:	200a      	movs	r0, #10
 8001798:	f7fe fd29 	bl	80001ee <oled_DrawBitmap>
  oled_UpdateScreen();
 800179c:	f7fe fe44 	bl	8000428 <oled_UpdateScreen>
  STK_delayMs(1000);
 80017a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a4:	f7ff ff38 	bl	8001618 <STK_delayMs>
  oled_Clear();
 80017a8:	f7fe ff9d 	bl	80006e6 <oled_Clear>
oled_Clear();
 80017ac:	e7ea      	b.n	8001784 <main+0x64>
 80017ae:	bf00      	nop
 80017b0:	080018ac 	.word	0x080018ac
 80017b4:	40005400 	.word	0x40005400
 80017b8:	20000000 	.word	0x20000000
 80017bc:	080018a0 	.word	0x080018a0

080017c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <LoopForever+0x6>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LoopForever+0xe>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <LoopForever+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ee:	f000 f819 	bl	8001824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff ff95 	bl	8001720 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   r0, =_estack
 80017f8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001804:	08002a10 	.word	0x08002a10
  ldr r2, =_sbss
 8001808:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800180c:	2000053c 	.word	0x2000053c

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>

08001812 <memset>:
 8001812:	4603      	mov	r3, r0
 8001814:	4402      	add	r2, r0
 8001816:	4293      	cmp	r3, r2
 8001818:	d100      	bne.n	800181c <memset+0xa>
 800181a:	4770      	bx	lr
 800181c:	f803 1b01 	strb.w	r1, [r3], #1
 8001820:	e7f9      	b.n	8001816 <memset+0x4>
	...

08001824 <__libc_init_array>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	2600      	movs	r6, #0
 8001828:	4d0c      	ldr	r5, [pc, #48]	; (800185c <__libc_init_array+0x38>)
 800182a:	4c0d      	ldr	r4, [pc, #52]	; (8001860 <__libc_init_array+0x3c>)
 800182c:	1b64      	subs	r4, r4, r5
 800182e:	10a4      	asrs	r4, r4, #2
 8001830:	42a6      	cmp	r6, r4
 8001832:	d109      	bne.n	8001848 <__libc_init_array+0x24>
 8001834:	f000 f828 	bl	8001888 <_init>
 8001838:	2600      	movs	r6, #0
 800183a:	4d0a      	ldr	r5, [pc, #40]	; (8001864 <__libc_init_array+0x40>)
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <__libc_init_array+0x44>)
 800183e:	1b64      	subs	r4, r4, r5
 8001840:	10a4      	asrs	r4, r4, #2
 8001842:	42a6      	cmp	r6, r4
 8001844:	d105      	bne.n	8001852 <__libc_init_array+0x2e>
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	f855 3b04 	ldr.w	r3, [r5], #4
 800184c:	4798      	blx	r3
 800184e:	3601      	adds	r6, #1
 8001850:	e7ee      	b.n	8001830 <__libc_init_array+0xc>
 8001852:	f855 3b04 	ldr.w	r3, [r5], #4
 8001856:	4798      	blx	r3
 8001858:	3601      	adds	r6, #1
 800185a:	e7f2      	b.n	8001842 <__libc_init_array+0x1e>
 800185c:	08002a08 	.word	0x08002a08
 8001860:	08002a08 	.word	0x08002a08
 8001864:	08002a08 	.word	0x08002a08
 8001868:	08002a0c 	.word	0x08002a0c

0800186c <memcpy>:
 800186c:	440a      	add	r2, r1
 800186e:	4291      	cmp	r1, r2
 8001870:	f100 33ff 	add.w	r3, r0, #4294967295
 8001874:	d100      	bne.n	8001878 <memcpy+0xc>
 8001876:	4770      	bx	lr
 8001878:	b510      	push	{r4, lr}
 800187a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800187e:	4291      	cmp	r1, r2
 8001880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001884:	d1f9      	bne.n	800187a <memcpy+0xe>
 8001886:	bd10      	pop	{r4, pc}

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
