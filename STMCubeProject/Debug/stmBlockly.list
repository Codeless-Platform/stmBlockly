
stmBlockly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d70  08001d70  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001d70  08001d70  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d70  08001d70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000068  08001de0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08001de0  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e42  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000174d  00000000  00000000  00028ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e0  00000000  00000000  0002a620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024c0  00000000  00000000  0002ad18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000581c  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c905  00000000  00000000  000329f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003f2f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001004  00000000  00000000  0003f374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001cdc 	.word	0x08001cdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001cdc 	.word	0x08001cdc

08000170 <lcd_init>:

GPIO_PinConfig_t GPIO_pinConfig;
LCD_t *G_LCD_pinConfig;
static int count = 0;
uint8 MAX_COLS=16 , MAX_ROWS =2;
void lcd_init(LCD_t *LCD_Config) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	 * 5. delay
	 * 6. Clear Screen
	 * 7. Send command 8BIT or 4BIT
	 * 8. Go to Entry Mode
	 */
	G_LCD_pinConfig = LCD_Config;
 8000178:	4a4c      	ldr	r2, [pc, #304]	; (80002ac <lcd_init+0x13c>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
	if (G_LCD_pinConfig->LCD_Size == LCD_2x16)
 800017e:	4b4b      	ldr	r3, [pc, #300]	; (80002ac <lcd_init+0x13c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d106      	bne.n	8000196 <lcd_init+0x26>
	{
		MAX_COLS = 16; MAX_ROWS =2;
 8000188:	4b49      	ldr	r3, [pc, #292]	; (80002b0 <lcd_init+0x140>)
 800018a:	2210      	movs	r2, #16
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	4b49      	ldr	r3, [pc, #292]	; (80002b4 <lcd_init+0x144>)
 8000190:	2202      	movs	r2, #2
 8000192:	701a      	strb	r2, [r3, #0]
 8000194:	e016      	b.n	80001c4 <lcd_init+0x54>
	}else if (G_LCD_pinConfig->LCD_Size == LCD_4x16)
 8000196:	4b45      	ldr	r3, [pc, #276]	; (80002ac <lcd_init+0x13c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b02      	cmp	r3, #2
 800019e:	d106      	bne.n	80001ae <lcd_init+0x3e>
	{
		MAX_COLS = 16; MAX_ROWS =4;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <lcd_init+0x140>)
 80001a2:	2210      	movs	r2, #16
 80001a4:	701a      	strb	r2, [r3, #0]
 80001a6:	4b43      	ldr	r3, [pc, #268]	; (80002b4 <lcd_init+0x144>)
 80001a8:	2204      	movs	r2, #4
 80001aa:	701a      	strb	r2, [r3, #0]
 80001ac:	e00a      	b.n	80001c4 <lcd_init+0x54>
	}else if (G_LCD_pinConfig->LCD_Size == LCD_4x20)
 80001ae:	4b3f      	ldr	r3, [pc, #252]	; (80002ac <lcd_init+0x13c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d105      	bne.n	80001c4 <lcd_init+0x54>
	{
		MAX_COLS = 20; MAX_ROWS =4;
 80001b8:	4b3d      	ldr	r3, [pc, #244]	; (80002b0 <lcd_init+0x140>)
 80001ba:	2214      	movs	r2, #20
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	4b3d      	ldr	r3, [pc, #244]	; (80002b4 <lcd_init+0x144>)
 80001c0:	2204      	movs	r2, #4
 80001c2:	701a      	strb	r2, [r3, #0]
	}
	// you must wait for the hardware to initialize
		STK_init();
 80001c4:	f001 f810 	bl	80011e8 <STK_init>

	STK_delayMs(20);
 80001c8:	2014      	movs	r0, #20
 80001ca:	f001 f821 	bl	8001210 <STK_delayMs>
	// set port as ouput to write commands

		for (int i = 0; i < 4; i++) {
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	e017      	b.n	8000204 <lcd_init+0x94>
			GPIO_pinConfig.Pin_Number = G_LCD_pinConfig->PINS[i];
 80001d4:	4b35      	ldr	r3, [pc, #212]	; (80002ac <lcd_init+0x13c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	3208      	adds	r2, #8
 80001dc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80001e0:	4b35      	ldr	r3, [pc, #212]	; (80002b8 <lcd_init+0x148>)
 80001e2:	801a      	strh	r2, [r3, #0]
			GPIO_pinConfig.MODE = MODE_OUTPUT_PP;
 80001e4:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <lcd_init+0x148>)
 80001e6:	2204      	movs	r2, #4
 80001e8:	709a      	strb	r2, [r3, #2]
			GPIO_pinConfig.Output_Speed = SPEED_10M;
 80001ea:	4b33      	ldr	r3, [pc, #204]	; (80002b8 <lcd_init+0x148>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	70da      	strb	r2, [r3, #3]
			GPIO_init(G_LCD_pinConfig->LCD_PORT, &GPIO_pinConfig);
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <lcd_init+0x13c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4930      	ldr	r1, [pc, #192]	; (80002b8 <lcd_init+0x148>)
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fdf0 	bl	8000dde <GPIO_init>
		for (int i = 0; i < 4; i++) {
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	3301      	adds	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2b03      	cmp	r3, #3
 8000208:	dde4      	ble.n	80001d4 <lcd_init+0x64>

		}

	// set three control pins as output and write 0
	GPIO_pinConfig.MODE = MODE_OUTPUT_PP;
 800020a:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <lcd_init+0x148>)
 800020c:	2204      	movs	r2, #4
 800020e:	709a      	strb	r2, [r3, #2]
	GPIO_pinConfig.Pin_Number = G_LCD_pinConfig->ENABLE_SWITCH;
 8000210:	4b26      	ldr	r3, [pc, #152]	; (80002ac <lcd_init+0x13c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	899a      	ldrh	r2, [r3, #12]
 8000216:	4b28      	ldr	r3, [pc, #160]	; (80002b8 <lcd_init+0x148>)
 8000218:	801a      	strh	r2, [r3, #0]
	GPIO_pinConfig.Output_Speed = SPEED_10M;
 800021a:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <lcd_init+0x148>)
 800021c:	2201      	movs	r2, #1
 800021e:	70da      	strb	r2, [r3, #3]
	GPIO_init(G_LCD_pinConfig->LCD_CONTROL_PORT, &GPIO_pinConfig);
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <lcd_init+0x13c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4924      	ldr	r1, [pc, #144]	; (80002b8 <lcd_init+0x148>)
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fdd8 	bl	8000dde <GPIO_init>
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800022e:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <lcd_init+0x13c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->ENABLE_SWITCH,
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <lcd_init+0x13c>)
 8000236:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000238:	899b      	ldrh	r3, [r3, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	4619      	mov	r1, r3
 800023e:	f000 fe4a 	bl	8000ed6 <GPIO_WritePin>
			PIN_LOW);

	GPIO_pinConfig.MODE = MODE_OUTPUT_PP;
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <lcd_init+0x148>)
 8000244:	2204      	movs	r2, #4
 8000246:	709a      	strb	r2, [r3, #2]
	GPIO_pinConfig.Pin_Number = G_LCD_pinConfig->REGISTER_SELECT;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <lcd_init+0x13c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	89da      	ldrh	r2, [r3, #14]
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <lcd_init+0x148>)
 8000250:	801a      	strh	r2, [r3, #0]
	GPIO_pinConfig.Output_Speed = SPEED_10M;
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <lcd_init+0x148>)
 8000254:	2201      	movs	r2, #1
 8000256:	70da      	strb	r2, [r3, #3]
	GPIO_init(G_LCD_pinConfig->LCD_CONTROL_PORT, &GPIO_pinConfig);
 8000258:	4b14      	ldr	r3, [pc, #80]	; (80002ac <lcd_init+0x13c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4916      	ldr	r1, [pc, #88]	; (80002b8 <lcd_init+0x148>)
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fdbc 	bl	8000dde <GPIO_init>
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <lcd_init+0x13c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->REGISTER_SELECT,
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <lcd_init+0x13c>)
 800026e:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000270:	89db      	ldrh	r3, [r3, #14]
 8000272:	2200      	movs	r2, #0
 8000274:	4619      	mov	r1, r3
 8000276:	f000 fe2e 	bl	8000ed6 <GPIO_WritePin>
			PIN_LOW);

	STK_delayMs(15);
 800027a:	200f      	movs	r0, #15
 800027c:	f000 ffc8 	bl	8001210 <STK_delayMs>
	lcd_Clear_Screen();
 8000280:	f000 fa4a 	bl	8000718 <lcd_Clear_Screen>
	/* Define the lcd Mode by its instruction*/

		// Command that initializes LCD as four bit mode
		lcd_Send_Command(0x02);
 8000284:	2002      	movs	r0, #2
 8000286:	f000 f819 	bl	80002bc <lcd_Send_Command>
		lcd_Send_Command(FUNCTION_4BIT_2LINES);
 800028a:	2028      	movs	r0, #40	; 0x28
 800028c:	f000 f816 	bl	80002bc <lcd_Send_Command>

	lcd_Send_Command(ENTRY_MODE);
 8000290:	2006      	movs	r0, #6
 8000292:	f000 f813 	bl	80002bc <lcd_Send_Command>
	lcd_Send_Command(CURSOR_FIRST_LINE);
 8000296:	2080      	movs	r0, #128	; 0x80
 8000298:	f000 f810 	bl	80002bc <lcd_Send_Command>
	lcd_Send_Command(DISPLAY_ON_CURSOR_BLINK);
 800029c:	200f      	movs	r0, #15
 800029e:	f000 f80d 	bl	80002bc <lcd_Send_Command>

}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000148 	.word	0x20000148
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000001 	.word	0x20000001
 80002b8:	20000144 	.word	0x20000144

080002bc <lcd_Send_Command>:
void lcd_Send_Command(unsigned char command) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	 * 1.Write command to port
	 * 2.Reset control pins
	 * 3.Deactivate and Activate Enable
	 */

		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80002c6:	4b40      	ldr	r3, [pc, #256]	; (80003c8 <lcd_Send_Command+0x10c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	6898      	ldr	r0, [r3, #8]
				G_LCD_pinConfig->REGISTER_SELECT,
 80002cc:	4b3e      	ldr	r3, [pc, #248]	; (80003c8 <lcd_Send_Command+0x10c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80002d0:	89db      	ldrh	r3, [r3, #14]
 80002d2:	2200      	movs	r2, #0
 80002d4:	4619      	mov	r1, r3
 80002d6:	f000 fdfe 	bl	8000ed6 <GPIO_WritePin>
				PIN_LOW);

		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 80002da:	4b3b      	ldr	r3, [pc, #236]	; (80003c8 <lcd_Send_Command+0x10c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	6858      	ldr	r0, [r3, #4]
 80002e0:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <lcd_Send_Command+0x10c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	8a19      	ldrh	r1, [r3, #16]
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	f000 fdf1 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 4));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <lcd_Send_Command+0x10c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	6858      	ldr	r0, [r3, #4]
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <lcd_Send_Command+0x10c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	8a59      	ldrh	r1, [r3, #18]
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f003 0320 	and.w	r3, r3, #32
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	f000 fde4 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 5));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6858      	ldr	r0, [r3, #4]
 8000314:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	8a99      	ldrh	r1, [r3, #20]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	f000 fdd7 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 6));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <lcd_Send_Command+0x10c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6858      	ldr	r0, [r3, #4]
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	8ad9      	ldrh	r1, [r3, #22]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800033a:	b2db      	uxtb	r3, r3
 800033c:	461a      	mov	r2, r3
 800033e:	f000 fdca 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 7));

		STK_delayMs(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f000 ff64 	bl	8001210 <STK_delayMs>
		lcd_kick();
 8000348:	f000 fa08 	bl	800075c <lcd_kick>

		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <lcd_Send_Command+0x10c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6858      	ldr	r0, [r3, #4]
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	8a19      	ldrh	r1, [r3, #16]
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	b2db      	uxtb	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	f000 fdb8 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 0));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6858      	ldr	r0, [r3, #4]
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <lcd_Send_Command+0x10c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	8a59      	ldrh	r1, [r3, #18]
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	f003 0302 	and.w	r3, r3, #2
 8000378:	b2db      	uxtb	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	f000 fdab 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 1));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6858      	ldr	r0, [r3, #4]
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <lcd_Send_Command+0x10c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	8a99      	ldrh	r1, [r3, #20]
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	f000 fd9e 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 2));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <lcd_Send_Command+0x10c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6858      	ldr	r0, [r3, #4]
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <lcd_Send_Command+0x10c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	8ad9      	ldrh	r1, [r3, #22]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 0308 	and.w	r3, r3, #8
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	f000 fd91 	bl	8000ed6 <GPIO_WritePin>
				GET(command, 3));

		STK_delayMs(1);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f000 ff2b 	bl	8001210 <STK_delayMs>
		lcd_kick();
 80003ba:	f000 f9cf 	bl	800075c <lcd_kick>

}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000148 	.word	0x20000148

080003cc <lcd_Send_Char>:
void lcd_Send_Char(unsigned char character) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]


		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80003d6:	4b64      	ldr	r3, [pc, #400]	; (8000568 <lcd_Send_Char+0x19c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	6898      	ldr	r0, [r3, #8]
				G_LCD_pinConfig->REGISTER_SELECT,
 80003dc:	4b62      	ldr	r3, [pc, #392]	; (8000568 <lcd_Send_Char+0x19c>)
 80003de:	681b      	ldr	r3, [r3, #0]
		GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 80003e0:	89db      	ldrh	r3, [r3, #14]
 80003e2:	2201      	movs	r2, #1
 80003e4:	4619      	mov	r1, r3
 80003e6:	f000 fd76 	bl	8000ed6 <GPIO_WritePin>
				PIN_HIGH);

		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 80003ea:	4b5f      	ldr	r3, [pc, #380]	; (8000568 <lcd_Send_Char+0x19c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6858      	ldr	r0, [r3, #4]
 80003f0:	4b5d      	ldr	r3, [pc, #372]	; (8000568 <lcd_Send_Char+0x19c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	8a19      	ldrh	r1, [r3, #16]
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	f000 fd69 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 4));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 8000404:	4b58      	ldr	r3, [pc, #352]	; (8000568 <lcd_Send_Char+0x19c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6858      	ldr	r0, [r3, #4]
 800040a:	4b57      	ldr	r3, [pc, #348]	; (8000568 <lcd_Send_Char+0x19c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	8a59      	ldrh	r1, [r3, #18]
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	f003 0320 	and.w	r3, r3, #32
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	f000 fd5c 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 5));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 800041e:	4b52      	ldr	r3, [pc, #328]	; (8000568 <lcd_Send_Char+0x19c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6858      	ldr	r0, [r3, #4]
 8000424:	4b50      	ldr	r3, [pc, #320]	; (8000568 <lcd_Send_Char+0x19c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	8a99      	ldrh	r1, [r3, #20]
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	f000 fd4f 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 6));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 8000438:	4b4b      	ldr	r3, [pc, #300]	; (8000568 <lcd_Send_Char+0x19c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6858      	ldr	r0, [r3, #4]
 800043e:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <lcd_Send_Char+0x19c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	8ad9      	ldrh	r1, [r3, #22]
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	f000 fd42 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 7));
		STK_delayMs(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 fedc 	bl	8001210 <STK_delayMs>
		lcd_kick();
 8000458:	f000 f980 	bl	800075c <lcd_kick>
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[0],
 800045c:	4b42      	ldr	r3, [pc, #264]	; (8000568 <lcd_Send_Char+0x19c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6858      	ldr	r0, [r3, #4]
 8000462:	4b41      	ldr	r3, [pc, #260]	; (8000568 <lcd_Send_Char+0x19c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	8a19      	ldrh	r1, [r3, #16]
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	f000 fd30 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 0));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[1],
 8000476:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <lcd_Send_Char+0x19c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	6858      	ldr	r0, [r3, #4]
 800047c:	4b3a      	ldr	r3, [pc, #232]	; (8000568 <lcd_Send_Char+0x19c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	8a59      	ldrh	r1, [r3, #18]
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 0302 	and.w	r3, r3, #2
 8000488:	b2db      	uxtb	r3, r3
 800048a:	461a      	mov	r2, r3
 800048c:	f000 fd23 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 1));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[2],
 8000490:	4b35      	ldr	r3, [pc, #212]	; (8000568 <lcd_Send_Char+0x19c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6858      	ldr	r0, [r3, #4]
 8000496:	4b34      	ldr	r3, [pc, #208]	; (8000568 <lcd_Send_Char+0x19c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	8a99      	ldrh	r1, [r3, #20]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	f000 fd16 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 2));
		GPIO_WritePin(G_LCD_pinConfig->LCD_PORT, G_LCD_pinConfig->PINS[3],
 80004aa:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <lcd_Send_Char+0x19c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6858      	ldr	r0, [r3, #4]
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <lcd_Send_Char+0x19c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	8ad9      	ldrh	r1, [r3, #22]
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	f000 fd09 	bl	8000ed6 <GPIO_WritePin>
				GET(character, 3));
		STK_delayMs(1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fea3 	bl	8001210 <STK_delayMs>
		lcd_kick();
 80004ca:	f000 f947 	bl	800075c <lcd_kick>

	if (count == MAX_COLS) {
 80004ce:	4b27      	ldr	r3, [pc, #156]	; (800056c <lcd_Send_Char+0x1a0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <lcd_Send_Char+0x1a4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d104      	bne.n	80004e6 <lcd_Send_Char+0x11a>
		lcd_GOTO_XY(1, 0);
 80004dc:	2100      	movs	r1, #0
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 f8a8 	bl	8000634 <lcd_GOTO_XY>
 80004e4:	e013      	b.n	800050e <lcd_Send_Char+0x142>
	}	// if both lines are full clear and start over.
	else if (count == (MAX_COLS * MAX_ROWS)) {
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <lcd_Send_Char+0x1a0>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <lcd_Send_Char+0x1a8>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	fb03 f202 	mul.w	r2, r3, r2
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <lcd_Send_Char+0x1a4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d108      	bne.n	800050e <lcd_Send_Char+0x142>
		lcd_Clear_Screen();
 80004fc:	f000 f90c 	bl	8000718 <lcd_Clear_Screen>
		lcd_GOTO_XY(0, 0);
 8000500:	2100      	movs	r1, #0
 8000502:	2000      	movs	r0, #0
 8000504:	f000 f896 	bl	8000634 <lcd_GOTO_XY>
		count = 0;
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <lcd_Send_Char+0x1a4>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	}
	if ((G_LCD_pinConfig->LCD_Size == LCD_4x20)
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <lcd_Send_Char+0x19c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d004      	beq.n	8000522 <lcd_Send_Char+0x156>
			|| (G_LCD_pinConfig->LCD_Size == LCD_4x16)) {
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <lcd_Send_Char+0x19c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d119      	bne.n	8000556 <lcd_Send_Char+0x18a>
		if (count == MAX_COLS * 2) {
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <lcd_Send_Char+0x1a0>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	005a      	lsls	r2, r3, #1
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <lcd_Send_Char+0x1a4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	d104      	bne.n	800053a <lcd_Send_Char+0x16e>
			lcd_GOTO_XY(2, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	2002      	movs	r0, #2
 8000534:	f000 f87e 	bl	8000634 <lcd_GOTO_XY>
 8000538:	e00d      	b.n	8000556 <lcd_Send_Char+0x18a>
		} else if (count == MAX_COLS * 3) {
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <lcd_Send_Char+0x1a0>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	441a      	add	r2, r3
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <lcd_Send_Char+0x1a4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	d103      	bne.n	8000556 <lcd_Send_Char+0x18a>
			lcd_GOTO_XY(3, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f86f 	bl	8000634 <lcd_GOTO_XY>
		}
	}
	count++;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <lcd_Send_Char+0x1a4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <lcd_Send_Char+0x1a4>)
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000148 	.word	0x20000148
 800056c:	20000000 	.word	0x20000000
 8000570:	20000084 	.word	0x20000084
 8000574:	20000001 	.word	0x20000001

08000578 <lcd_send_String>:
void lcd_send_String(char *string) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	// keeps track of chars count
	int count = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000584:	e048      	b.n	8000618 <lcd_send_String+0xa0>
		count++;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
		lcd_Send_Char(*string++);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	607a      	str	r2, [r7, #4]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff19 	bl	80003cc <lcd_Send_Char>
		// if first line is full go to second
		if (count == MAX_COLS) {
 800059a:	4b23      	ldr	r3, [pc, #140]	; (8000628 <lcd_send_String+0xb0>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d104      	bne.n	80005b0 <lcd_send_String+0x38>
			lcd_GOTO_XY(1, 0);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 f843 	bl	8000634 <lcd_GOTO_XY>
 80005ae:	e011      	b.n	80005d4 <lcd_send_String+0x5c>
		}	// if both lines are full clear and start over.
		else if (count == (MAX_COLS * MAX_ROWS)) {
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <lcd_send_String+0xb0>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <lcd_send_String+0xb4>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	fb03 f302 	mul.w	r3, r3, r2
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d107      	bne.n	80005d4 <lcd_send_String+0x5c>
			lcd_Clear_Screen();
 80005c4:	f000 f8a8 	bl	8000718 <lcd_Clear_Screen>
			lcd_GOTO_XY(0, 0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f832 	bl	8000634 <lcd_GOTO_XY>
			count = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
		}
		if ((G_LCD_pinConfig->LCD_Size == LCD_4x20)
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <lcd_send_String+0xb8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d004      	beq.n	80005e8 <lcd_send_String+0x70>
				|| (G_LCD_pinConfig->LCD_Size == LCD_4x16)) {
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <lcd_send_String+0xb8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d117      	bne.n	8000618 <lcd_send_String+0xa0>
			if (count == MAX_COLS * 2) {
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <lcd_send_String+0xb0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d104      	bne.n	80005fe <lcd_send_String+0x86>
				lcd_GOTO_XY(2, 0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 f81c 	bl	8000634 <lcd_GOTO_XY>
 80005fc:	e00c      	b.n	8000618 <lcd_send_String+0xa0>
			} else if (count == MAX_COLS * 3) {
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <lcd_send_String+0xb0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	429a      	cmp	r2, r3
 800060e:	d103      	bne.n	8000618 <lcd_send_String+0xa0>
				lcd_GOTO_XY(3, 0);
 8000610:	2100      	movs	r1, #0
 8000612:	2003      	movs	r0, #3
 8000614:	f000 f80e 	bl	8000634 <lcd_GOTO_XY>
	while (*string > 0) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1b2      	bne.n	8000586 <lcd_send_String+0xe>
			}
		}

	}
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000000 	.word	0x20000000
 800062c:	20000001 	.word	0x20000001
 8000630:	20000148 	.word	0x20000148

08000634 <lcd_GOTO_XY>:
void lcd_GOTO_XY(unsigned char row, unsigned char col) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	460a      	mov	r2, r1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	4613      	mov	r3, r2
 8000642:	71bb      	strb	r3, [r7, #6]

	if (row == 0) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10b      	bne.n	8000662 <lcd_GOTO_XY+0x2e>
		if ((col < MAX_COLS) && (col >= 0))
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <lcd_GOTO_XY+0xdc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	79ba      	ldrb	r2, [r7, #6]
 8000650:	429a      	cmp	r2, r3
 8000652:	d214      	bcs.n	800067e <lcd_GOTO_XY+0x4a>
			lcd_Send_Command(CURSOR_FIRST_LINE + col);
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b80      	subs	r3, #128	; 0x80
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe2e 	bl	80002bc <lcd_Send_Command>
 8000660:	e00d      	b.n	800067e <lcd_GOTO_XY+0x4a>
	} else if (row == 1) {
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10a      	bne.n	800067e <lcd_GOTO_XY+0x4a>
		if ((col < MAX_COLS) && (col >= 0))
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <lcd_GOTO_XY+0xdc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	79ba      	ldrb	r2, [r7, #6]
 800066e:	429a      	cmp	r2, r3
 8000670:	d205      	bcs.n	800067e <lcd_GOTO_XY+0x4a>
			lcd_Send_Command(CURSOR_SECOND_LINE + col);
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	3b40      	subs	r3, #64	; 0x40
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe1f 	bl	80002bc <lcd_Send_Command>
	}
	if (G_LCD_pinConfig->LCD_Size == LCD_4x20) {
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <lcd_GOTO_XY+0xe0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d11d      	bne.n	80006c4 <lcd_GOTO_XY+0x90>
		if (row == 2) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d10b      	bne.n	80006a6 <lcd_GOTO_XY+0x72>
			if ((col < MAX_COLS) && (col >= 0))
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <lcd_GOTO_XY+0xdc>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	429a      	cmp	r2, r3
 8000696:	d237      	bcs.n	8000708 <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_THIRD_LINE_20 + col);
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	3b6c      	subs	r3, #108	; 0x6c
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe0c 	bl	80002bc <lcd_Send_Command>
			if ((col < MAX_COLS) && (col >= 0))
				lcd_Send_Command(CURSOR_FOURTH_LINE_16 + col);
		}
	}

}
 80006a4:	e030      	b.n	8000708 <lcd_GOTO_XY+0xd4>
		} else if (row == 3) {
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d12d      	bne.n	8000708 <lcd_GOTO_XY+0xd4>
			if ((col < MAX_COLS) && (col >= 0))
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <lcd_GOTO_XY+0xdc>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d228      	bcs.n	8000708 <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_FOURTH_LINE_20 + col);
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	3b2c      	subs	r3, #44	; 0x2c
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fdfd 	bl	80002bc <lcd_Send_Command>
}
 80006c2:	e021      	b.n	8000708 <lcd_GOTO_XY+0xd4>
	} else if (G_LCD_pinConfig->LCD_Size == LCD_4x16) {
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <lcd_GOTO_XY+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d11c      	bne.n	8000708 <lcd_GOTO_XY+0xd4>
		if (row == 2) {
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d10b      	bne.n	80006ec <lcd_GOTO_XY+0xb8>
			if ((col < MAX_COLS) && (col >= 0))
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <lcd_GOTO_XY+0xdc>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	79ba      	ldrb	r2, [r7, #6]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d214      	bcs.n	8000708 <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_THIRD_LINE_16 + col);
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	3b70      	subs	r3, #112	; 0x70
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fde9 	bl	80002bc <lcd_Send_Command>
}
 80006ea:	e00d      	b.n	8000708 <lcd_GOTO_XY+0xd4>
		} else if (row == 3) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d10a      	bne.n	8000708 <lcd_GOTO_XY+0xd4>
			if ((col < MAX_COLS) && (col >= 0))
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <lcd_GOTO_XY+0xdc>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d205      	bcs.n	8000708 <lcd_GOTO_XY+0xd4>
				lcd_Send_Command(CURSOR_FOURTH_LINE_16 + col);
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	3b30      	subs	r3, #48	; 0x30
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fdda 	bl	80002bc <lcd_Send_Command>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000148 	.word	0x20000148

08000718 <lcd_Clear_Screen>:
void lcd_Clear_Screen() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	lcd_Send_Command(CLEAR_SCREEN);
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fdcd 	bl	80002bc <lcd_Send_Command>
	count = 0;
 8000722:	4b02      	ldr	r3, [pc, #8]	; (800072c <lcd_Clear_Screen+0x14>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000084 	.word	0x20000084

08000730 <lcd_display_number>:
void lcd_display_number(int Number) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	char str[7];
// Converts Int to String
	sprintf(str, "%d", Number);
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <lcd_display_number+0x28>)
 8000740:	4618      	mov	r0, r3
 8000742:	f000 feb9 	bl	80014b8 <siprintf>
	lcd_send_String(str);
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff14 	bl	8000578 <lcd_send_String>
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	08001cf4 	.word	0x08001cf4

0800075c <lcd_kick>:

	sprintf(str, "%s%d.%04d", tmpSign, tmpVal, Frac);
	lcd_send_String(str);

}
void lcd_kick() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
// Enable =0 >> LCD Busy
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <lcd_kick+0x38>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->ENABLE_SWITCH,
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <lcd_kick+0x38>)
 8000768:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	f000 fbb1 	bl	8000ed6 <GPIO_WritePin>
			PIN_HIGH);
	STK_delayMs(50);
 8000774:	2032      	movs	r0, #50	; 0x32
 8000776:	f000 fd4b 	bl	8001210 <STK_delayMs>
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <lcd_kick+0x38>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6898      	ldr	r0, [r3, #8]
			G_LCD_pinConfig->ENABLE_SWITCH, PIN_LOW);
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <lcd_kick+0x38>)
 8000782:	681b      	ldr	r3, [r3, #0]
	GPIO_WritePin(G_LCD_pinConfig->LCD_CONTROL_PORT,
 8000784:	899b      	ldrh	r3, [r3, #12]
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	f000 fba4 	bl	8000ed6 <GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000148 	.word	0x20000148

08000798 <LM35_init>:
 */


#include "LM35.h"

void LM35_init(ADC_Registers_t* ADCx){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	ADC_init(ADCx);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f82f 	bl	8000804 <ADC_init>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <LM35_Read>:
uint16 LM35_Read(ADC_Registers_t* ADCx,ADC_CHANNEL_t CHx){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	uint16 data = ADC_read(ADCx, CHx);
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f84d 	bl	8000860 <ADC_read>
 80007c6:	4603      	mov	r3, r0
 80007c8:	81fb      	strh	r3, [r7, #14]

	/*
	 *data >>> mvolt
	  4095 >>> 3300
	 */
	uint16 mV = (data*3300)/4095;
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	f640 42e4 	movw	r2, #3300	; 0xce4
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <LM35_Read+0x4c>)
 80007d6:	fb82 1203 	smull	r1, r2, r2, r3
 80007da:	441a      	add	r2, r3
 80007dc:	12d2      	asrs	r2, r2, #11
 80007de:	17db      	asrs	r3, r3, #31
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	81bb      	strh	r3, [r7, #12]
	uint16 temp = mV/10;
 80007e4:	89bb      	ldrh	r3, [r7, #12]
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <LM35_Read+0x50>)
 80007e8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	817b      	strh	r3, [r7, #10]
	return temp;
 80007f0:	897b      	ldrh	r3, [r7, #10]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	80080081 	.word	0x80080081
 8000800:	cccccccd 	.word	0xcccccccd

08000804 <ADC_init>:
 * 							Generic Functions
 * =======================================================================================
 */

// single conversion mode only
void ADC_init(ADC_Registers_t *ADCx) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

	//1. Enable ADC clock
	if (ADCx == ADC1) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <ADC_init+0x50>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d104      	bne.n	800081e <ADC_init+0x1a>
		RCC_CLK_EN(APB2_ID, ADC1_ID);
 8000814:	2109      	movs	r1, #9
 8000816:	2001      	movs	r0, #1
 8000818:	f000 fc56 	bl	80010c8 <RCC_CLK_EN>
 800081c:	e010      	b.n	8000840 <ADC_init+0x3c>
	} else if (ADCx == ADC2) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <ADC_init+0x54>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d104      	bne.n	8000830 <ADC_init+0x2c>
		RCC_CLK_EN(APB2_ID, ADC2_ID);
 8000826:	210a      	movs	r1, #10
 8000828:	2001      	movs	r0, #1
 800082a:	f000 fc4d 	bl	80010c8 <RCC_CLK_EN>
 800082e:	e007      	b.n	8000840 <ADC_init+0x3c>
	} else if (ADCx == ADC3) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ADC_init+0x58>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d103      	bne.n	8000840 <ADC_init+0x3c>
		RCC_CLK_EN(APB2_ID, ADC3_ID);
 8000838:	210f      	movs	r1, #15
 800083a:	2001      	movs	r0, #1
 800083c:	f000 fc44 	bl	80010c8 <RCC_CLK_EN>
	}

	    ADCx->CR2 |= (1 << 0); // Enable ADC (ADON bit)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f043 0201 	orr.w	r2, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	609a      	str	r2, [r3, #8]

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012400 	.word	0x40012400
 8000858:	40012800 	.word	0x40012800
 800085c:	40013c00 	.word	0x40013c00

08000860 <ADC_read>:

uint16 ADC_read(ADC_Registers_t *ADCx, ADC_CHANNEL_t ADC_CHx) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	GPIO_PinConfig_t GPIO_pinConfig;
	GPIO_pinConfig.MODE = MODE_Analog;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	switch (ADC_CHx) {
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	2b0f      	cmp	r3, #15
 8000874:	f200 80f4 	bhi.w	8000a60 <ADC_read+0x200>
 8000878:	a201      	add	r2, pc, #4	; (adr r2, 8000880 <ADC_read+0x20>)
 800087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087e:	bf00      	nop
 8000880:	080008c1 	.word	0x080008c1
 8000884:	080008db 	.word	0x080008db
 8000888:	080008f5 	.word	0x080008f5
 800088c:	0800090f 	.word	0x0800090f
 8000890:	08000929 	.word	0x08000929
 8000894:	08000943 	.word	0x08000943
 8000898:	0800095d 	.word	0x0800095d
 800089c:	08000977 	.word	0x08000977
 80008a0:	08000991 	.word	0x08000991
 80008a4:	080009ab 	.word	0x080009ab
 80008a8:	080009c5 	.word	0x080009c5
 80008ac:	080009df 	.word	0x080009df
 80008b0:	080009f9 	.word	0x080009f9
 80008b4:	08000a13 	.word	0x08000a13
 80008b8:	08000a2d 	.word	0x08000a2d
 80008bc:	08000a47 	.word	0x08000a47
	case ADC_CH0:
		// configure PA0 as analog
		RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80008c0:	2102      	movs	r1, #2
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fc00 	bl	80010c8 <RCC_CLK_EN>
		GPIO_pinConfig.Pin_Number = PIN_0;
 80008c8:	2301      	movs	r3, #1
 80008ca:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4878      	ldr	r0, [pc, #480]	; (8000ab4 <ADC_read+0x254>)
 80008d4:	f000 fa83 	bl	8000dde <GPIO_init>
		break;
 80008d8:	e0c2      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH1:
			// configure PA1 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80008da:	2102      	movs	r1, #2
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fbf3 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 80008e2:	2302      	movs	r3, #2
 80008e4:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	4871      	ldr	r0, [pc, #452]	; (8000ab4 <ADC_read+0x254>)
 80008ee:	f000 fa76 	bl	8000dde <GPIO_init>
			break;
 80008f2:	e0b5      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH2:
			// configure PA2 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80008f4:	2102      	movs	r1, #2
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 fbe6 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_2;
 80008fc:	2304      	movs	r3, #4
 80008fe:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	486b      	ldr	r0, [pc, #428]	; (8000ab4 <ADC_read+0x254>)
 8000908:	f000 fa69 	bl	8000dde <GPIO_init>
			break;
 800090c:	e0a8      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH3:
			// configure PA3 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 800090e:	2102      	movs	r1, #2
 8000910:	2001      	movs	r0, #1
 8000912:	f000 fbd9 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_3;
 8000916:	2308      	movs	r3, #8
 8000918:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4864      	ldr	r0, [pc, #400]	; (8000ab4 <ADC_read+0x254>)
 8000922:	f000 fa5c 	bl	8000dde <GPIO_init>
			break;
 8000926:	e09b      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH4:
			// configure PA4 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000928:	2102      	movs	r1, #2
 800092a:	2001      	movs	r0, #1
 800092c:	f000 fbcc 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_4;
 8000930:	2310      	movs	r3, #16
 8000932:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	485e      	ldr	r0, [pc, #376]	; (8000ab4 <ADC_read+0x254>)
 800093c:	f000 fa4f 	bl	8000dde <GPIO_init>
			break;
 8000940:	e08e      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH5:
			// configure PA5 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000942:	2102      	movs	r1, #2
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fbbf 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_5;
 800094a:	2320      	movs	r3, #32
 800094c:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4857      	ldr	r0, [pc, #348]	; (8000ab4 <ADC_read+0x254>)
 8000956:	f000 fa42 	bl	8000dde <GPIO_init>
			break;
 800095a:	e081      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH6:
			// configure PA6 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 800095c:	2102      	movs	r1, #2
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fbb2 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_6;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	4851      	ldr	r0, [pc, #324]	; (8000ab4 <ADC_read+0x254>)
 8000970:	f000 fa35 	bl	8000dde <GPIO_init>
			break;
 8000974:	e074      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH7:
			// configure PA7 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000976:	2102      	movs	r1, #2
 8000978:	2001      	movs	r0, #1
 800097a:	f000 fba5 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_7;
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	484a      	ldr	r0, [pc, #296]	; (8000ab4 <ADC_read+0x254>)
 800098a:	f000 fa28 	bl	8000dde <GPIO_init>
			break;
 800098e:	e067      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH8:
			// configure PB0 as analog
			RCC_CLK_EN(APB2_ID, GPIOB_ID);
 8000990:	2103      	movs	r1, #3
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fb98 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_0;
 8000998:	2301      	movs	r3, #1
 800099a:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOB, &GPIO_pinConfig);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	4845      	ldr	r0, [pc, #276]	; (8000ab8 <ADC_read+0x258>)
 80009a4:	f000 fa1b 	bl	8000dde <GPIO_init>
			break;
 80009a8:	e05a      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH9:
			// configure PB1 as analog
			RCC_CLK_EN(APB2_ID, GPIOB_ID);
 80009aa:	2103      	movs	r1, #3
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fb8b 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 80009b2:	2302      	movs	r3, #2
 80009b4:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOB, &GPIO_pinConfig);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	483e      	ldr	r0, [pc, #248]	; (8000ab8 <ADC_read+0x258>)
 80009be:	f000 fa0e 	bl	8000dde <GPIO_init>
			break;
 80009c2:	e04d      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH10:
			// configure PC0 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 80009c4:	2104      	movs	r1, #4
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fb7e 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_0;
 80009cc:	2301      	movs	r3, #1
 80009ce:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4839      	ldr	r0, [pc, #228]	; (8000abc <ADC_read+0x25c>)
 80009d8:	f000 fa01 	bl	8000dde <GPIO_init>
			break;
 80009dc:	e040      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH11:
			// configure PC1 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 80009de:	2104      	movs	r1, #4
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fb71 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 80009e6:	2302      	movs	r3, #2
 80009e8:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4832      	ldr	r0, [pc, #200]	; (8000abc <ADC_read+0x25c>)
 80009f2:	f000 f9f4 	bl	8000dde <GPIO_init>
			break;
 80009f6:	e033      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH12:
			// configure PC2 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 80009f8:	2104      	movs	r1, #4
 80009fa:	2001      	movs	r0, #1
 80009fc:	f000 fb64 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_2;
 8000a00:	2304      	movs	r3, #4
 8000a02:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482c      	ldr	r0, [pc, #176]	; (8000abc <ADC_read+0x25c>)
 8000a0c:	f000 f9e7 	bl	8000dde <GPIO_init>
			break;
 8000a10:	e026      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH13:
			// configure PC3 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8000a12:	2104      	movs	r1, #4
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fb57 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_3;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4825      	ldr	r0, [pc, #148]	; (8000abc <ADC_read+0x25c>)
 8000a26:	f000 f9da 	bl	8000dde <GPIO_init>
			break;
 8000a2a:	e019      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH14:
			// configure PC4 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f000 fb4a 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_4;
 8000a34:	2310      	movs	r3, #16
 8000a36:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481f      	ldr	r0, [pc, #124]	; (8000abc <ADC_read+0x25c>)
 8000a40:	f000 f9cd 	bl	8000dde <GPIO_init>
			break;
 8000a44:	e00c      	b.n	8000a60 <ADC_read+0x200>
	case ADC_CH15:
			// configure PC5 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8000a46:	2104      	movs	r1, #4
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fb3d 	bl	80010c8 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_5;
 8000a4e:	2320      	movs	r3, #32
 8000a50:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <ADC_read+0x25c>)
 8000a5a:	f000 f9c0 	bl	8000dde <GPIO_init>
			break;
 8000a5e:	bf00      	nop
	}
	//2. Enable ADC
    ADCx->SQR[0] |= ((ADC_CHx - (uint8) 1) << 20);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	78fa      	ldrb	r2, [r7, #3]
 8000a66:	3a01      	subs	r2, #1
 8000a68:	0512      	lsls	r2, r2, #20
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    ADCx->SQR[2] = (ADCx->SQR[2] & ~(0x1F)) | ADC_CHx;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a74:	f023 021f 	bic.w	r2, r3, #31
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34

	//start conversion
    ADCx->CR2 |= (1 << 0);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f043 0201 	orr.w	r2, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (1 << 22);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	609a      	str	r2, [r3, #8]

	//wait for EOC Flag to be set
	while(!(ADCx->SR & (1<<1)));
 8000a98:	bf00      	nop
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f9      	beq.n	8000a9a <ADC_read+0x23a>

	// read data
	return (ADCx->DR);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	b29b      	uxth	r3, r3
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	40011000 	.word	0x40011000

08000ac0 <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <EXTI0_IRQHandler+0x1c>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <EXTI0_IRQHandler+0x1c>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <EXTI0_IRQHandler+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4798      	blx	r3
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010400 	.word	0x40010400
 8000ae0:	2000014c 	.word	0x2000014c

08000ae4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <EXTI1_IRQHandler+0x1c>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <EXTI1_IRQHandler+0x1c>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <EXTI1_IRQHandler+0x20>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4798      	blx	r3
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010400 	.word	0x40010400
 8000b04:	2000014c 	.word	0x2000014c

08000b08 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <EXTI2_IRQHandler+0x1c>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <EXTI2_IRQHandler+0x1c>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <EXTI2_IRQHandler+0x20>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4798      	blx	r3
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010400 	.word	0x40010400
 8000b28:	2000014c 	.word	0x2000014c

08000b2c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <EXTI3_IRQHandler+0x1c>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <EXTI3_IRQHandler+0x1c>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <EXTI3_IRQHandler+0x20>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4798      	blx	r3
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010400 	.word	0x40010400
 8000b4c:	2000014c 	.word	0x2000014c

08000b50 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <EXTI4_IRQHandler+0x1c>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <EXTI4_IRQHandler+0x1c>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <EXTI4_IRQHandler+0x20>)
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	4798      	blx	r3
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400
 8000b70:	2000014c 	.word	0x2000014c

08000b74 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	f003 0320 	and.w	r3, r3, #32
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d009      	beq.n	8000b98 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a24      	ldr	r2, [pc, #144]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <EXTI9_5_IRQHandler+0xac>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 8000b96:	e03e      	b.n	8000c16 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d009      	beq.n	8000bb8 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bae:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <EXTI9_5_IRQHandler+0xac>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4798      	blx	r3
}
 8000bb6:	e02e      	b.n	8000c16 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d009      	beq.n	8000bd8 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bce:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <EXTI9_5_IRQHandler+0xac>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	4798      	blx	r3
}
 8000bd6:	e01e      	b.n	8000c16 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d009      	beq.n	8000bf8 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <EXTI9_5_IRQHandler+0xac>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	4798      	blx	r3
}
 8000bf6:	e00e      	b.n	8000c16 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <EXTI9_5_IRQHandler+0xa8>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <EXTI9_5_IRQHandler+0xac>)
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	4798      	blx	r3
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40010400 	.word	0x40010400
 8000c20:	2000014c 	.word	0x2000014c

08000c24 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d009      	beq.n	8000c48 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 8000c34:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <EXTI15_10_IRQHandler+0xcc>)
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 8000c46:	e04e      	b.n	8000ce6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d009      	beq.n	8000c68 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4a24      	ldr	r2, [pc, #144]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c5e:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <EXTI15_10_IRQHandler+0xcc>)
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	4798      	blx	r3
}
 8000c66:	e03e      	b.n	8000ce6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d009      	beq.n	8000c88 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7e:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <EXTI15_10_IRQHandler+0xcc>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4798      	blx	r3
}
 8000c86:	e02e      	b.n	8000ce6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d009      	beq.n	8000ca8 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000c9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c9e:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <EXTI15_10_IRQHandler+0xcc>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	4798      	blx	r3
}
 8000ca6:	e01e      	b.n	8000ce6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d009      	beq.n	8000cc8 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbe:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <EXTI15_10_IRQHandler+0xcc>)
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	4798      	blx	r3
}
 8000cc6:	e00e      	b.n	8000ce6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d008      	beq.n	8000ce6 <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <EXTI15_10_IRQHandler+0xc8>)
 8000cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cde:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <EXTI15_10_IRQHandler+0xcc>)
 8000ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce4:	4798      	blx	r3
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010400 	.word	0x40010400
 8000cf0:	2000014c 	.word	0x2000014c

08000cf4 <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	2b80      	cmp	r3, #128	; 0x80
 8000d06:	d049      	beq.n	8000d9c <Get_CRLH_Position+0xa8>
 8000d08:	2b80      	cmp	r3, #128	; 0x80
 8000d0a:	dc11      	bgt.n	8000d30 <Get_CRLH_Position+0x3c>
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d039      	beq.n	8000d84 <Get_CRLH_Position+0x90>
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	dc06      	bgt.n	8000d22 <Get_CRLH_Position+0x2e>
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d02f      	beq.n	8000d78 <Get_CRLH_Position+0x84>
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d030      	beq.n	8000d7e <Get_CRLH_Position+0x8a>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d028      	beq.n	8000d72 <Get_CRLH_Position+0x7e>
 8000d20:	e057      	b.n	8000dd2 <Get_CRLH_Position+0xde>
 8000d22:	2b20      	cmp	r3, #32
 8000d24:	d034      	beq.n	8000d90 <Get_CRLH_Position+0x9c>
 8000d26:	2b40      	cmp	r3, #64	; 0x40
 8000d28:	d035      	beq.n	8000d96 <Get_CRLH_Position+0xa2>
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d02d      	beq.n	8000d8a <Get_CRLH_Position+0x96>
 8000d2e:	e050      	b.n	8000dd2 <Get_CRLH_Position+0xde>
 8000d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d34:	d03e      	beq.n	8000db4 <Get_CRLH_Position+0xc0>
 8000d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d3a:	dc09      	bgt.n	8000d50 <Get_CRLH_Position+0x5c>
 8000d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d40:	d032      	beq.n	8000da8 <Get_CRLH_Position+0xb4>
 8000d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d46:	d032      	beq.n	8000dae <Get_CRLH_Position+0xba>
 8000d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d4c:	d029      	beq.n	8000da2 <Get_CRLH_Position+0xae>
 8000d4e:	e040      	b.n	8000dd2 <Get_CRLH_Position+0xde>
 8000d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d54:	d034      	beq.n	8000dc0 <Get_CRLH_Position+0xcc>
 8000d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d5a:	dc03      	bgt.n	8000d64 <Get_CRLH_Position+0x70>
 8000d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d60:	d02b      	beq.n	8000dba <Get_CRLH_Position+0xc6>
 8000d62:	e036      	b.n	8000dd2 <Get_CRLH_Position+0xde>
 8000d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d68:	d02d      	beq.n	8000dc6 <Get_CRLH_Position+0xd2>
 8000d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d6e:	d02d      	beq.n	8000dcc <Get_CRLH_Position+0xd8>
 8000d70:	e02f      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_0:
		shift = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
		break;
 8000d76:	e02c      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_1:
		shift = 4;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d7c:	e029      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_2:
		shift = 8;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	73fb      	strb	r3, [r7, #15]
		break;
 8000d82:	e026      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_3:
		shift = 12;
 8000d84:	230c      	movs	r3, #12
 8000d86:	73fb      	strb	r3, [r7, #15]
		break;
 8000d88:	e023      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_4:
		shift = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d8e:	e020      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_5:
		shift = 20;
 8000d90:	2314      	movs	r3, #20
 8000d92:	73fb      	strb	r3, [r7, #15]
		break;
 8000d94:	e01d      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_6:
		shift = 24;
 8000d96:	2318      	movs	r3, #24
 8000d98:	73fb      	strb	r3, [r7, #15]
		break;
 8000d9a:	e01a      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_7:
		shift = 28;
 8000d9c:	231c      	movs	r3, #28
 8000d9e:	73fb      	strb	r3, [r7, #15]
		break;
 8000da0:	e017      	b.n	8000dd2 <Get_CRLH_Position+0xde>

	case PIN_8:
		shift = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
		break;
 8000da6:	e014      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_9:
		shift = 4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	73fb      	strb	r3, [r7, #15]
		break;
 8000dac:	e011      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_10:
		shift = 8;
 8000dae:	2308      	movs	r3, #8
 8000db0:	73fb      	strb	r3, [r7, #15]
		break;
 8000db2:	e00e      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_11:
		shift = 12;
 8000db4:	230c      	movs	r3, #12
 8000db6:	73fb      	strb	r3, [r7, #15]
		break;
 8000db8:	e00b      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_12:
		shift = 16;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000dbe:	e008      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_13:
		shift = 20;
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000dc4:	e005      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_14:
		shift = 24;
 8000dc6:	2318      	movs	r3, #24
 8000dc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000dca:	e002      	b.n	8000dd2 <Get_CRLH_Position+0xde>
	case PIN_15:
		shift = 28;
 8000dcc:	231c      	movs	r3, #28
 8000dce:	73fb      	strb	r3, [r7, #15]
		break;
 8000dd0:	bf00      	nop

	}
	return shift;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d801      	bhi.n	8000df8 <GPIO_init+0x1a>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	e001      	b.n	8000dfc <GPIO_init+0x1e>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff76 	bl	8000cf4 <Get_CRLH_Position>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	210f      	movs	r1, #15
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	789b      	ldrb	r3, [r3, #2]
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d00b      	beq.n	8000e44 <GPIO_init+0x66>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	789b      	ldrb	r3, [r3, #2]
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d007      	beq.n	8000e44 <GPIO_init+0x66>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	789b      	ldrb	r3, [r3, #2]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d003      	beq.n	8000e44 <GPIO_init+0x66>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d10e      	bne.n	8000e62 <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| (pinConfig->Output_Speed)) & 0x0f);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	3b04      	subs	r3, #4
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	78db      	ldrb	r3, [r3, #3]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	75fb      	strb	r3, [r7, #23]
 8000e60:	e02c      	b.n	8000ebc <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d003      	beq.n	8000e72 <GPIO_init+0x94>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d107      	bne.n	8000e82 <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	75fb      	strb	r3, [r7, #23]
 8000e80:	e01c      	b.n	8000ebc <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	789b      	ldrb	r3, [r3, #2]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d102      	bne.n	8000e90 <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	75fb      	strb	r3, [r7, #23]
 8000e8e:	e015      	b.n	8000ebc <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 8000e90:	2308      	movs	r3, #8
 8000e92:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	789b      	ldrb	r3, [r3, #2]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d107      	bne.n	8000eac <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	8812      	ldrh	r2, [r2, #0]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	e007      	b.n	8000ebc <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	8812      	ldrh	r2, [r2, #0]
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	7df9      	ldrb	r1, [r7, #23]
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	601a      	str	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <GPIO_WritePin>:
 * @param [in]	    - GPIOx : Select the port where the x can be (A..E depending on device used)
 * @param [in]	    - pinNumber : Must be a value from @ref GPIO_PINS_define
 * @param [in]	    - value : either HIGH or LOW from @ref GPIO_PIN_VALUE
 * @retval 			- none
 */
void GPIO_WritePin(GPIO_Registers_t *GPIOx, uint16 pinNumber, uint8 value) {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	707b      	strb	r3, [r7, #1]
	if (value != PIN_LOW) {
 8000ee6:	787b      	ldrb	r3, [r7, #1]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <GPIO_WritePin+0x24>
		GPIOx->ODR |= (uint32)(pinNumber);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	60da      	str	r2, [r3, #12]
	} else {
		GPIOx->ODR &= ~((uint32)(pinNumber));
	}
}
 8000ef8:	e006      	b.n	8000f08 <GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32)(pinNumber));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <I2C1_EV_IRQHandler>:
}
uint8 I2C_Slave_RX(I2C_Registers_t *I2Cx){
	return (uint8)I2Cx->DR;
}

void I2C1_EV_IRQHandler(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
	volatile uint32 dummy_read = 0 ;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
	I2C_Registers_t* I2Cx = I2C1 ;
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <I2C1_EV_IRQHandler+0xe8>)
 8000f20:	617b      	str	r3, [r7, #20]
		//Interrupt handling for both master and slave mode of a device
		uint32 temp1, temp2, temp3;

		temp1   = I2Cx->CR2 & (  1<<9) ;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	613b      	str	r3, [r7, #16]
		temp2   = I2Cx->CR2 & ( 1<<10) ;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f34:	60fb      	str	r3, [r7, #12]
		temp3  = I2Cx->SR1 & ( 1<<8);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3e:	60bb      	str	r3, [r7, #8]


		// Handle For interrupt generated by STOPF event
			// Note : Stop detection flag is applicable only slave mode
			if(temp1 && temp3)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00a      	beq.n	8000f5c <I2C1_EV_IRQHandler+0x48>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <I2C1_EV_IRQHandler+0x48>
			{
				//STOF flag is set
				//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
				I2Cx->CR1 |= 0x0000;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	601a      	str	r2, [r3, #0]
				Slave_States(I2Cx,EV_STOP);
 8000f54:	2100      	movs	r1, #0
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f000 f852 	bl	8001000 <Slave_States>


			}
			//----------------------------------------------------------
			temp3  = I2Cx->SR1 & (1<<1);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by ADDR event
			//Note : When master mode : Address is sent
			//		 When Slave mode   : Address matched with own address
			if(temp1 && temp3)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d012      	beq.n	8000f92 <I2C1_EV_IRQHandler+0x7e>
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00f      	beq.n	8000f92 <I2C1_EV_IRQHandler+0x7e>
			{
				// interrupt is generated because of ADDR event
				//check for device mode
				if(I2Cx->SR2 & ( 1<<0))
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <I2C1_EV_IRQHandler+0x7e>

				}else
				{
					//slave mode
					//clear the ADDR flag ( read SR1 , read SR2)
					dummy_read = I2Cx->SR1;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	607b      	str	r3, [r7, #4]
					dummy_read = I2Cx->SR2;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	607b      	str	r3, [r7, #4]
					Slave_States(I2Cx,EV_ADDR_Matched);
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	6978      	ldr	r0, [r7, #20]
 8000f8e:	f000 f837 	bl	8001000 <Slave_States>

				}
			}
			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<7);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by TXE event
			if(temp1 && temp2 && temp3)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00f      	beq.n	8000fc2 <I2C1_EV_IRQHandler+0xae>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00c      	beq.n	8000fc2 <I2C1_EV_IRQHandler+0xae>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <I2C1_EV_IRQHandler+0xae>
			{
				//Check for device mode
				if(I2Cx->SR2 & (1<<0))
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <I2C1_EV_IRQHandler+0xae>
				{

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REQ);
 8000fba:	2103      	movs	r1, #3
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f000 f81f 	bl	8001000 <Slave_States>
				}
			}

			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<6);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fca:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
			if(temp1 && temp2 && temp3)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00f      	beq.n	8000ff2 <I2C1_EV_IRQHandler+0xde>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <I2C1_EV_IRQHandler+0xde>
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d009      	beq.n	8000ff2 <I2C1_EV_IRQHandler+0xde>
			{
				//check device mode .
				if(I2Cx->SR2 & ( 1<<0))
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <I2C1_EV_IRQHandler+0xde>
					//The device is master

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REC);
 8000fea:	2104      	movs	r1, #4
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f000 f807 	bl	8001000 <Slave_States>

				}
			}
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40005400 	.word	0x40005400

08001000 <Slave_States>:


void Slave_States (I2C_Registers_t* I2Cx  ,Slave_state state)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_Index: I2C2_Index ;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <Slave_States+0xc0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	bf14      	ite	ne
 8001014:	2301      	movne	r3, #1
 8001016:	2300      	moveq	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]

	switch (state)
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d84a      	bhi.n	80010b8 <Slave_States+0xb8>
 8001022:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <Slave_States+0x28>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	08001043 	.word	0x08001043
 800102c:	0800103d 	.word	0x0800103d
 8001030:	08001061 	.word	0x08001061
 8001034:	08001073 	.word	0x08001073
 8001038:	08001091 	.word	0x08001091
	{

	case ERR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8001040:	e03a      	b.n	80010b8 <Slave_States+0xb8>
	}

	case EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	2b00      	cmp	r3, #0
 800104c:	d02f      	beq.n	80010ae <Slave_States+0xae>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_STOP) ;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <Slave_States+0xc4>)
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	4413      	add	r3, r2
 8001056:	331c      	adds	r3, #28
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2000      	movs	r0, #0
 800105c:	4798      	blx	r3
		}

		break ;
 800105e:	e026      	b.n	80010ae <Slave_States+0xae>
	}

	case EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_ADDR_Matched) ;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <Slave_States+0xc4>)
 8001064:	015b      	lsls	r3, r3, #5
 8001066:	4413      	add	r3, r2
 8001068:	331c      	adds	r3, #28
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2002      	movs	r0, #2
 800106e:	4798      	blx	r3


		break ;
 8001070:	e022      	b.n	80010b8 <Slave_States+0xb8>
	}

	case EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d019      	beq.n	80010b2 <Slave_States+0xb2>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REQ) ;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <Slave_States+0xc4>)
 8001082:	015b      	lsls	r3, r3, #5
 8001084:	4413      	add	r3, r2
 8001086:	331c      	adds	r3, #28
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2003      	movs	r0, #3
 800108c:	4798      	blx	r3

		}

		break ;
 800108e:	e010      	b.n	80010b2 <Slave_States+0xb2>
	}
	case EV_DATA_REC:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( 1<<2)))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10c      	bne.n	80010b6 <Slave_States+0xb6>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REC) ;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <Slave_States+0xc4>)
 80010a0:	015b      	lsls	r3, r3, #5
 80010a2:	4413      	add	r3, r2
 80010a4:	331c      	adds	r3, #28
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2004      	movs	r0, #4
 80010aa:	4798      	blx	r3

		}

		break ;
 80010ac:	e003      	b.n	80010b6 <Slave_States+0xb6>
		break ;
 80010ae:	bf00      	nop
 80010b0:	e002      	b.n	80010b8 <Slave_States+0xb8>
		break ;
 80010b2:	bf00      	nop
 80010b4:	e000      	b.n	80010b8 <Slave_States+0xb8>
		break ;
 80010b6:	bf00      	nop
	}
	}

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40005400 	.word	0x40005400
 80010c4:	20000088 	.word	0x20000088

080010c8 <RCC_CLK_EN>:
		break;

	}
}

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d00f      	beq.n	80010fe <RCC_CLK_EN+0x36>
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d018      	beq.n	8001114 <RCC_CLK_EN+0x4c>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d000      	beq.n	80010e8 <RCC_CLK_EN+0x20>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 80010e6:	e020      	b.n	800112a <RCC_CLK_EN+0x62>
		RCC->ABP1ENR |= (1 << periphralID);
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <RCC_CLK_EN+0x6c>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	79ba      	ldrb	r2, [r7, #6]
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4611      	mov	r1, r2
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <RCC_CLK_EN+0x6c>)
 80010f8:	430b      	orrs	r3, r1
 80010fa:	61d3      	str	r3, [r2, #28]
		break;
 80010fc:	e015      	b.n	800112a <RCC_CLK_EN+0x62>
		RCC->ABP2ENR |= (1 << periphralID);
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <RCC_CLK_EN+0x6c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	79ba      	ldrb	r2, [r7, #6]
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	4611      	mov	r1, r2
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <RCC_CLK_EN+0x6c>)
 800110e:	430b      	orrs	r3, r1
 8001110:	6193      	str	r3, [r2, #24]
		break;
 8001112:	e00a      	b.n	800112a <RCC_CLK_EN+0x62>
		RCC->AHBENR |= (1 << periphralID);
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <RCC_CLK_EN+0x6c>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4611      	mov	r1, r2
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <RCC_CLK_EN+0x6c>)
 8001124:	430b      	orrs	r3, r1
 8001126:	6153      	str	r3, [r2, #20]
		break;
 8001128:	bf00      	nop
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000

08001138 <SPI1_IRQHandler>:
	}
	*pData = SPIx->DR;
}

//ISR
void SPI1_IRQHandler(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI1->SR & (1 << 1)) >> 1);
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <SPI1_IRQHandler+0x50>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	f362 0300 	bfi	r3, r2, #0, #1
 8001150:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1 << 0)) >> 0);
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <SPI1_IRQHandler+0x50>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	793b      	ldrb	r3, [r7, #4]
 800115e:	f362 0341 	bfi	r3, r2, #1, #1
 8001162:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1 << 4)) >> 4);
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SPI1_IRQHandler+0x50>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	f362 0382 	bfi	r3, r2, #2, #1
 8001176:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI1_Index].P_CallBackFun(IRQ);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <SPI1_IRQHandler+0x54>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	7938      	ldrb	r0, [r7, #4]
 800117e:	4798      	blx	r3
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013000 	.word	0x40013000
 800118c:	200000c8 	.word	0x200000c8

08001190 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI2->SR & (1 << 1)) >> 1);
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <SPI2_IRQHandler+0x50>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	f362 0300 	bfi	r3, r2, #0, #1
 80011a8:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1 << 0)) >> 0);
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <SPI2_IRQHandler+0x50>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	f362 0341 	bfi	r3, r2, #1, #1
 80011ba:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1 << 4)) >> 4);
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <SPI2_IRQHandler+0x50>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	793b      	ldrb	r3, [r7, #4]
 80011ca:	f362 0382 	bfi	r3, r2, #2, #1
 80011ce:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI2_Index].P_CallBackFun(IRQ);
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SPI2_IRQHandler+0x54>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	7938      	ldrb	r0, [r7, #4]
 80011d6:	4798      	blx	r3
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40003800 	.word	0x40003800
 80011e4:	200000c8 	.word	0x200000c8

080011e8 <STK_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void STK_init() {
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
#if STK_CLK_SRC == AHB_8
	SYSTICK->CTRL &= ~(1 << 2);
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <STK_init+0x20>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <STK_init+0x20>)
 80011f2:	f023 0304 	bic.w	r3, r3, #4
 80011f6:	6013      	str	r3, [r2, #0]
	microSecond = 1;		// Assuming system clock is HSI
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <STK_init+0x24>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
#elif STK_CLK_SRC =AHB
	SYSTICK->CTRL |= (1<<2);
	microSecond = 8;		// Assuming system clock is HSI
#endif

}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010
 800120c:	200000f8 	.word	0x200000f8

08001210 <STK_delayMs>:
	SYSTICK->VAL = 0;
	SYSTICK->CTRL &= ~(1<<0);

}

void STK_delayMs(uint32 time) {
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	for (uint32 i=0; i < time; i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e029      	b.n	8001272 <STK_delayMs+0x62>
		SYSTICK->LOAD = 1000*microSecond;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <STK_delayMs+0x74>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a19      	ldr	r2, [pc, #100]	; (8001288 <STK_delayMs+0x78>)
 8001224:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001228:	fb01 f303 	mul.w	r3, r1, r3
 800122c:	6053      	str	r3, [r2, #4]
		//Disable Interrupt
		CLEAR(SYSTICK->CTRL, 1);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <STK_delayMs+0x78>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <STK_delayMs+0x78>)
 8001234:	f023 0302 	bic.w	r3, r3, #2
 8001238:	6013      	str	r3, [r2, #0]
		//Enable Systick
		SET(SYSTICK->CTRL, 0);
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <STK_delayMs+0x78>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <STK_delayMs+0x78>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]
		//Wait for flag
		while (!GET(SYSTICK->CTRL, 16))
 8001246:	bf00      	nop
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <STK_delayMs+0x78>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f9      	beq.n	8001248 <STK_delayMs+0x38>
			;
		//Disable Systick
		SYSTICK->LOAD = 0;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <STK_delayMs+0x78>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
		SYSTICK->VAL = 0;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <STK_delayMs+0x78>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
		CLEAR(SYSTICK->CTRL, 0);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <STK_delayMs+0x78>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <STK_delayMs+0x78>)
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]
	for (uint32 i=0; i < time; i++) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3d1      	bcc.n	800121e <STK_delayMs+0xe>
	}
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	200000f8 	.word	0x200000f8
 8001288:	e000e010 	.word	0xe000e010

0800128c <SysTick_Handler>:
uint32 STK_getRemainingTime() {
	return (SYSTICK->VAL);

}

void SysTick_Handler() {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	uint8 flag = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
#if STK_MODE == SINGLE
	SYSTICK->LOAD = 0;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <SysTick_Handler+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <SysTick_Handler+0x44>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
	CLEAR(SYSTICK->CTRL, 0);
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <SysTick_Handler+0x44>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Handler+0x44>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 1);
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <SysTick_Handler+0x44>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <SysTick_Handler+0x44>)
 80012b4:	f023 0302 	bic.w	r3, r3, #2
 80012b8:	6013      	str	r3, [r2, #0]
#endif

	P_CallBack_Fun();
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SysTick_Handler+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4798      	blx	r3
	flag = GET(SYSTICK->CTRL, 16);
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <SysTick_Handler+0x44>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	71fb      	strb	r3, [r7, #7]
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	e000e010 	.word	0xe000e010
 80012d4:	2000018c 	.word	0x2000018c

080012d8 <USART1_IRQHandler>:
	 */
	while (!(USARTx->SR & (1 << 6)));
}

// ISR
void USART1_IRQHandler(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <USART1_IRQHandler+0x10>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4798      	blx	r3
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000fc 	.word	0x200000fc

080012ec <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <USART2_IRQHandler+0x10>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	4798      	blx	r3
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000fc 	.word	0x200000fc

08001300 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <USART3_IRQHandler+0x10>)
 8001306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001308:	4798      	blx	r3
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000fc 	.word	0x200000fc

08001314 <main>:
#include "main.h"
uint16 temp;

int main() {
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0

RCC_CLK_EN(APB2_ID,GPIOA_ID);
 800131a:	2102      	movs	r1, #2
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fed3 	bl	80010c8 <RCC_CLK_EN>

  LCD_t LCD_Config= {LCD_2x16,GPIOA,GPIOA,PIN_2,PIN_3,PIN_4,PIN_5,PIN_6,PIN_7};
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <main+0x78>)
 8001324:	463c      	mov	r4, r7
 8001326:	461d      	mov	r5, r3
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001330:	e884 0003 	stmia.w	r4, {r0, r1}
lcd_init(&LCD_Config);
 8001334:	463b      	mov	r3, r7
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff1a 	bl	8000170 <lcd_init>

  STK_init();
 800133c:	f7ff ff54 	bl	80011e8 <STK_init>

  LM35_init(ADC2);
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <main+0x7c>)
 8001342:	f7ff fa29 	bl	8000798 <LM35_init>


  lcd_Clear_Screen();
 8001346:	f7ff f9e7 	bl	8000718 <lcd_Clear_Screen>
  lcd_send_String("LM35 Test");
 800134a:	4812      	ldr	r0, [pc, #72]	; (8001394 <main+0x80>)
 800134c:	f7ff f914 	bl	8000578 <lcd_send_String>
  STK_delayMs(1000);
 8001350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001354:	f7ff ff5c 	bl	8001210 <STK_delayMs>


while(1) {
lcd_Clear_Screen();
 8001358:	f7ff f9de 	bl	8000718 <lcd_Clear_Screen>
  temp = LM35_Read(ADC2,ADC_CH0);
 800135c:	2100      	movs	r1, #0
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <main+0x7c>)
 8001360:	f7ff fa26 	bl	80007b0 <LM35_Read>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <main+0x84>)
 800136a:	801a      	strh	r2, [r3, #0]
  lcd_send_String("Temp = ");
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <main+0x88>)
 800136e:	f7ff f903 	bl	8000578 <lcd_send_String>
  lcd_display_number(temp);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <main+0x84>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f9da 	bl	8000730 <lcd_display_number>
  lcd_send_String(" C");
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <main+0x8c>)
 800137e:	f7ff f8fb 	bl	8000578 <lcd_send_String>
  STK_delayMs(3000);
 8001382:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001386:	f7ff ff43 	bl	8001210 <STK_delayMs>
lcd_Clear_Screen();
 800138a:	e7e5      	b.n	8001358 <main+0x44>
 800138c:	08001d24 	.word	0x08001d24
 8001390:	40012800 	.word	0x40012800
 8001394:	08001d0c 	.word	0x08001d0c
 8001398:	20000190 	.word	0x20000190
 800139c:	08001d18 	.word	0x08001d18
 80013a0:	08001d20 	.word	0x08001d20

080013a4 <_sbrk>:
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
 80013d4:	f000 f846 	bl	8001464 <__errno>
 80013d8:	4602      	mov	r2, r0
 80013da:	230c      	movs	r3, #12
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20002800 	.word	0x20002800
 8001404:	00000400 	.word	0x00000400
 8001408:	20000138 	.word	0x20000138
 800140c:	20000198 	.word	0x20000198

08001410 <Reset_Handler>:
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopForever+0x2>)
 8001412:	4685      	mov	sp, r0
 8001414:	f3af 8000 	nop.w
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <LoopForever+0x6>)
 800141a:	490d      	ldr	r1, [pc, #52]	; (8001450 <LoopForever+0xa>)
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <LoopForever+0xe>)
 800141e:	2300      	movs	r3, #0
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:
 8001422:	58d4      	ldr	r4, [r2, r3]
 8001424:	50c4      	str	r4, [r0, r3]
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:
 8001428:	18c4      	adds	r4, r0, r3
 800142a:	428c      	cmp	r4, r1
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <LoopForever+0x12>)
 8001430:	4c0a      	ldr	r4, [pc, #40]	; (800145c <LoopForever+0x16>)
 8001432:	2300      	movs	r3, #0
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:
 800143a:	42a2      	cmp	r2, r4
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>
 800143e:	f000 f817 	bl	8001470 <__libc_init_array>
 8001442:	f7ff ff67 	bl	8001314 <main>

08001446 <LoopForever>:
 8001446:	e7fe      	b.n	8001446 <LoopForever>
 8001448:	20002800 	.word	0x20002800
 800144c:	20000000 	.word	0x20000000
 8001450:	20000068 	.word	0x20000068
 8001454:	08001d78 	.word	0x08001d78
 8001458:	20000068 	.word	0x20000068
 800145c:	20000198 	.word	0x20000198

08001460 <ADC1_2_IRQHandler>:
 8001460:	e7fe      	b.n	8001460 <ADC1_2_IRQHandler>
	...

08001464 <__errno>:
 8001464:	4b01      	ldr	r3, [pc, #4]	; (800146c <__errno+0x8>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000004 	.word	0x20000004

08001470 <__libc_init_array>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	2500      	movs	r5, #0
 8001474:	4e0c      	ldr	r6, [pc, #48]	; (80014a8 <__libc_init_array+0x38>)
 8001476:	4c0d      	ldr	r4, [pc, #52]	; (80014ac <__libc_init_array+0x3c>)
 8001478:	1ba4      	subs	r4, r4, r6
 800147a:	10a4      	asrs	r4, r4, #2
 800147c:	42a5      	cmp	r5, r4
 800147e:	d109      	bne.n	8001494 <__libc_init_array+0x24>
 8001480:	f000 fc2c 	bl	8001cdc <_init>
 8001484:	2500      	movs	r5, #0
 8001486:	4e0a      	ldr	r6, [pc, #40]	; (80014b0 <__libc_init_array+0x40>)
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <__libc_init_array+0x44>)
 800148a:	1ba4      	subs	r4, r4, r6
 800148c:	10a4      	asrs	r4, r4, #2
 800148e:	42a5      	cmp	r5, r4
 8001490:	d105      	bne.n	800149e <__libc_init_array+0x2e>
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001498:	4798      	blx	r3
 800149a:	3501      	adds	r5, #1
 800149c:	e7ee      	b.n	800147c <__libc_init_array+0xc>
 800149e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014a2:	4798      	blx	r3
 80014a4:	3501      	adds	r5, #1
 80014a6:	e7f2      	b.n	800148e <__libc_init_array+0x1e>
 80014a8:	08001d70 	.word	0x08001d70
 80014ac:	08001d70 	.word	0x08001d70
 80014b0:	08001d70 	.word	0x08001d70
 80014b4:	08001d74 	.word	0x08001d74

080014b8 <siprintf>:
 80014b8:	b40e      	push	{r1, r2, r3}
 80014ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80014be:	b500      	push	{lr}
 80014c0:	b09c      	sub	sp, #112	; 0x70
 80014c2:	ab1d      	add	r3, sp, #116	; 0x74
 80014c4:	9002      	str	r0, [sp, #8]
 80014c6:	9006      	str	r0, [sp, #24]
 80014c8:	9107      	str	r1, [sp, #28]
 80014ca:	9104      	str	r1, [sp, #16]
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <siprintf+0x38>)
 80014ce:	4909      	ldr	r1, [pc, #36]	; (80014f4 <siprintf+0x3c>)
 80014d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80014d4:	9105      	str	r1, [sp, #20]
 80014d6:	6800      	ldr	r0, [r0, #0]
 80014d8:	a902      	add	r1, sp, #8
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f000 f866 	bl	80015ac <_svfiprintf_r>
 80014e0:	2200      	movs	r2, #0
 80014e2:	9b02      	ldr	r3, [sp, #8]
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	b01c      	add	sp, #112	; 0x70
 80014e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80014ec:	b003      	add	sp, #12
 80014ee:	4770      	bx	lr
 80014f0:	20000004 	.word	0x20000004
 80014f4:	ffff0208 	.word	0xffff0208

080014f8 <__ssputs_r>:
 80014f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014fc:	688e      	ldr	r6, [r1, #8]
 80014fe:	4682      	mov	sl, r0
 8001500:	429e      	cmp	r6, r3
 8001502:	460c      	mov	r4, r1
 8001504:	4690      	mov	r8, r2
 8001506:	4699      	mov	r9, r3
 8001508:	d837      	bhi.n	800157a <__ssputs_r+0x82>
 800150a:	898a      	ldrh	r2, [r1, #12]
 800150c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001510:	d031      	beq.n	8001576 <__ssputs_r+0x7e>
 8001512:	2302      	movs	r3, #2
 8001514:	6825      	ldr	r5, [r4, #0]
 8001516:	6909      	ldr	r1, [r1, #16]
 8001518:	1a6f      	subs	r7, r5, r1
 800151a:	6965      	ldr	r5, [r4, #20]
 800151c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001520:	fb95 f5f3 	sdiv	r5, r5, r3
 8001524:	f109 0301 	add.w	r3, r9, #1
 8001528:	443b      	add	r3, r7
 800152a:	429d      	cmp	r5, r3
 800152c:	bf38      	it	cc
 800152e:	461d      	movcc	r5, r3
 8001530:	0553      	lsls	r3, r2, #21
 8001532:	d530      	bpl.n	8001596 <__ssputs_r+0x9e>
 8001534:	4629      	mov	r1, r5
 8001536:	f000 fb37 	bl	8001ba8 <_malloc_r>
 800153a:	4606      	mov	r6, r0
 800153c:	b950      	cbnz	r0, 8001554 <__ssputs_r+0x5c>
 800153e:	230c      	movs	r3, #12
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f8ca 3000 	str.w	r3, [sl]
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154e:	81a3      	strh	r3, [r4, #12]
 8001550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001554:	463a      	mov	r2, r7
 8001556:	6921      	ldr	r1, [r4, #16]
 8001558:	f000 fab6 	bl	8001ac8 <memcpy>
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001566:	81a3      	strh	r3, [r4, #12]
 8001568:	6126      	str	r6, [r4, #16]
 800156a:	443e      	add	r6, r7
 800156c:	6026      	str	r6, [r4, #0]
 800156e:	464e      	mov	r6, r9
 8001570:	6165      	str	r5, [r4, #20]
 8001572:	1bed      	subs	r5, r5, r7
 8001574:	60a5      	str	r5, [r4, #8]
 8001576:	454e      	cmp	r6, r9
 8001578:	d900      	bls.n	800157c <__ssputs_r+0x84>
 800157a:	464e      	mov	r6, r9
 800157c:	4632      	mov	r2, r6
 800157e:	4641      	mov	r1, r8
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	f000 faac 	bl	8001ade <memmove>
 8001586:	68a3      	ldr	r3, [r4, #8]
 8001588:	2000      	movs	r0, #0
 800158a:	1b9b      	subs	r3, r3, r6
 800158c:	60a3      	str	r3, [r4, #8]
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	441e      	add	r6, r3
 8001592:	6026      	str	r6, [r4, #0]
 8001594:	e7dc      	b.n	8001550 <__ssputs_r+0x58>
 8001596:	462a      	mov	r2, r5
 8001598:	f000 fb60 	bl	8001c5c <_realloc_r>
 800159c:	4606      	mov	r6, r0
 800159e:	2800      	cmp	r0, #0
 80015a0:	d1e2      	bne.n	8001568 <__ssputs_r+0x70>
 80015a2:	6921      	ldr	r1, [r4, #16]
 80015a4:	4650      	mov	r0, sl
 80015a6:	f000 fab3 	bl	8001b10 <_free_r>
 80015aa:	e7c8      	b.n	800153e <__ssputs_r+0x46>

080015ac <_svfiprintf_r>:
 80015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b0:	461d      	mov	r5, r3
 80015b2:	898b      	ldrh	r3, [r1, #12]
 80015b4:	b09d      	sub	sp, #116	; 0x74
 80015b6:	061f      	lsls	r7, r3, #24
 80015b8:	4680      	mov	r8, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4616      	mov	r6, r2
 80015be:	d50f      	bpl.n	80015e0 <_svfiprintf_r+0x34>
 80015c0:	690b      	ldr	r3, [r1, #16]
 80015c2:	b96b      	cbnz	r3, 80015e0 <_svfiprintf_r+0x34>
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	f000 faef 	bl	8001ba8 <_malloc_r>
 80015ca:	6020      	str	r0, [r4, #0]
 80015cc:	6120      	str	r0, [r4, #16]
 80015ce:	b928      	cbnz	r0, 80015dc <_svfiprintf_r+0x30>
 80015d0:	230c      	movs	r3, #12
 80015d2:	f8c8 3000 	str.w	r3, [r8]
 80015d6:	f04f 30ff 	mov.w	r0, #4294967295
 80015da:	e0c8      	b.n	800176e <_svfiprintf_r+0x1c2>
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	6163      	str	r3, [r4, #20]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9309      	str	r3, [sp, #36]	; 0x24
 80015e4:	2320      	movs	r3, #32
 80015e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015ea:	2330      	movs	r3, #48	; 0x30
 80015ec:	f04f 0b01 	mov.w	fp, #1
 80015f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015f4:	9503      	str	r5, [sp, #12]
 80015f6:	4637      	mov	r7, r6
 80015f8:	463d      	mov	r5, r7
 80015fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80015fe:	b10b      	cbz	r3, 8001604 <_svfiprintf_r+0x58>
 8001600:	2b25      	cmp	r3, #37	; 0x25
 8001602:	d13e      	bne.n	8001682 <_svfiprintf_r+0xd6>
 8001604:	ebb7 0a06 	subs.w	sl, r7, r6
 8001608:	d00b      	beq.n	8001622 <_svfiprintf_r+0x76>
 800160a:	4653      	mov	r3, sl
 800160c:	4632      	mov	r2, r6
 800160e:	4621      	mov	r1, r4
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff ff71 	bl	80014f8 <__ssputs_r>
 8001616:	3001      	adds	r0, #1
 8001618:	f000 80a4 	beq.w	8001764 <_svfiprintf_r+0x1b8>
 800161c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800161e:	4453      	add	r3, sl
 8001620:	9309      	str	r3, [sp, #36]	; 0x24
 8001622:	783b      	ldrb	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 809d 	beq.w	8001764 <_svfiprintf_r+0x1b8>
 800162a:	2300      	movs	r3, #0
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	9307      	str	r3, [sp, #28]
 8001638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800163c:	931a      	str	r3, [sp, #104]	; 0x68
 800163e:	462f      	mov	r7, r5
 8001640:	2205      	movs	r2, #5
 8001642:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001646:	4850      	ldr	r0, [pc, #320]	; (8001788 <_svfiprintf_r+0x1dc>)
 8001648:	f000 fa30 	bl	8001aac <memchr>
 800164c:	9b04      	ldr	r3, [sp, #16]
 800164e:	b9d0      	cbnz	r0, 8001686 <_svfiprintf_r+0xda>
 8001650:	06d9      	lsls	r1, r3, #27
 8001652:	bf44      	itt	mi
 8001654:	2220      	movmi	r2, #32
 8001656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800165a:	071a      	lsls	r2, r3, #28
 800165c:	bf44      	itt	mi
 800165e:	222b      	movmi	r2, #43	; 0x2b
 8001660:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001664:	782a      	ldrb	r2, [r5, #0]
 8001666:	2a2a      	cmp	r2, #42	; 0x2a
 8001668:	d015      	beq.n	8001696 <_svfiprintf_r+0xea>
 800166a:	462f      	mov	r7, r5
 800166c:	2000      	movs	r0, #0
 800166e:	250a      	movs	r5, #10
 8001670:	9a07      	ldr	r2, [sp, #28]
 8001672:	4639      	mov	r1, r7
 8001674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001678:	3b30      	subs	r3, #48	; 0x30
 800167a:	2b09      	cmp	r3, #9
 800167c:	d94d      	bls.n	800171a <_svfiprintf_r+0x16e>
 800167e:	b1b8      	cbz	r0, 80016b0 <_svfiprintf_r+0x104>
 8001680:	e00f      	b.n	80016a2 <_svfiprintf_r+0xf6>
 8001682:	462f      	mov	r7, r5
 8001684:	e7b8      	b.n	80015f8 <_svfiprintf_r+0x4c>
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <_svfiprintf_r+0x1dc>)
 8001688:	463d      	mov	r5, r7
 800168a:	1a80      	subs	r0, r0, r2
 800168c:	fa0b f000 	lsl.w	r0, fp, r0
 8001690:	4318      	orrs	r0, r3
 8001692:	9004      	str	r0, [sp, #16]
 8001694:	e7d3      	b.n	800163e <_svfiprintf_r+0x92>
 8001696:	9a03      	ldr	r2, [sp, #12]
 8001698:	1d11      	adds	r1, r2, #4
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	9103      	str	r1, [sp, #12]
 800169e:	2a00      	cmp	r2, #0
 80016a0:	db01      	blt.n	80016a6 <_svfiprintf_r+0xfa>
 80016a2:	9207      	str	r2, [sp, #28]
 80016a4:	e004      	b.n	80016b0 <_svfiprintf_r+0x104>
 80016a6:	4252      	negs	r2, r2
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	9207      	str	r2, [sp, #28]
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	783b      	ldrb	r3, [r7, #0]
 80016b2:	2b2e      	cmp	r3, #46	; 0x2e
 80016b4:	d10c      	bne.n	80016d0 <_svfiprintf_r+0x124>
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ba:	d133      	bne.n	8001724 <_svfiprintf_r+0x178>
 80016bc:	9b03      	ldr	r3, [sp, #12]
 80016be:	3702      	adds	r7, #2
 80016c0:	1d1a      	adds	r2, r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	9203      	str	r2, [sp, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bfb8      	it	lt
 80016ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80016ce:	9305      	str	r3, [sp, #20]
 80016d0:	4d2e      	ldr	r5, [pc, #184]	; (800178c <_svfiprintf_r+0x1e0>)
 80016d2:	2203      	movs	r2, #3
 80016d4:	7839      	ldrb	r1, [r7, #0]
 80016d6:	4628      	mov	r0, r5
 80016d8:	f000 f9e8 	bl	8001aac <memchr>
 80016dc:	b138      	cbz	r0, 80016ee <_svfiprintf_r+0x142>
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	fa03 f000 	lsl.w	r0, r3, r0
 80016e6:	9b04      	ldr	r3, [sp, #16]
 80016e8:	3701      	adds	r7, #1
 80016ea:	4303      	orrs	r3, r0
 80016ec:	9304      	str	r3, [sp, #16]
 80016ee:	7839      	ldrb	r1, [r7, #0]
 80016f0:	2206      	movs	r2, #6
 80016f2:	4827      	ldr	r0, [pc, #156]	; (8001790 <_svfiprintf_r+0x1e4>)
 80016f4:	1c7e      	adds	r6, r7, #1
 80016f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016fa:	f000 f9d7 	bl	8001aac <memchr>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d038      	beq.n	8001774 <_svfiprintf_r+0x1c8>
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <_svfiprintf_r+0x1e8>)
 8001704:	bb13      	cbnz	r3, 800174c <_svfiprintf_r+0x1a0>
 8001706:	9b03      	ldr	r3, [sp, #12]
 8001708:	3307      	adds	r3, #7
 800170a:	f023 0307 	bic.w	r3, r3, #7
 800170e:	3308      	adds	r3, #8
 8001710:	9303      	str	r3, [sp, #12]
 8001712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001714:	444b      	add	r3, r9
 8001716:	9309      	str	r3, [sp, #36]	; 0x24
 8001718:	e76d      	b.n	80015f6 <_svfiprintf_r+0x4a>
 800171a:	fb05 3202 	mla	r2, r5, r2, r3
 800171e:	2001      	movs	r0, #1
 8001720:	460f      	mov	r7, r1
 8001722:	e7a6      	b.n	8001672 <_svfiprintf_r+0xc6>
 8001724:	2300      	movs	r3, #0
 8001726:	250a      	movs	r5, #10
 8001728:	4619      	mov	r1, r3
 800172a:	3701      	adds	r7, #1
 800172c:	9305      	str	r3, [sp, #20]
 800172e:	4638      	mov	r0, r7
 8001730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001734:	3a30      	subs	r2, #48	; 0x30
 8001736:	2a09      	cmp	r2, #9
 8001738:	d903      	bls.n	8001742 <_svfiprintf_r+0x196>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0c8      	beq.n	80016d0 <_svfiprintf_r+0x124>
 800173e:	9105      	str	r1, [sp, #20]
 8001740:	e7c6      	b.n	80016d0 <_svfiprintf_r+0x124>
 8001742:	fb05 2101 	mla	r1, r5, r1, r2
 8001746:	2301      	movs	r3, #1
 8001748:	4607      	mov	r7, r0
 800174a:	e7f0      	b.n	800172e <_svfiprintf_r+0x182>
 800174c:	ab03      	add	r3, sp, #12
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4622      	mov	r2, r4
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_svfiprintf_r+0x1ec>)
 8001754:	a904      	add	r1, sp, #16
 8001756:	4640      	mov	r0, r8
 8001758:	f3af 8000 	nop.w
 800175c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001760:	4681      	mov	r9, r0
 8001762:	d1d6      	bne.n	8001712 <_svfiprintf_r+0x166>
 8001764:	89a3      	ldrh	r3, [r4, #12]
 8001766:	065b      	lsls	r3, r3, #25
 8001768:	f53f af35 	bmi.w	80015d6 <_svfiprintf_r+0x2a>
 800176c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800176e:	b01d      	add	sp, #116	; 0x74
 8001770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001774:	ab03      	add	r3, sp, #12
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4622      	mov	r2, r4
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_svfiprintf_r+0x1ec>)
 800177c:	a904      	add	r1, sp, #16
 800177e:	4640      	mov	r0, r8
 8001780:	f000 f882 	bl	8001888 <_printf_i>
 8001784:	e7ea      	b.n	800175c <_svfiprintf_r+0x1b0>
 8001786:	bf00      	nop
 8001788:	08001d3c 	.word	0x08001d3c
 800178c:	08001d42 	.word	0x08001d42
 8001790:	08001d46 	.word	0x08001d46
 8001794:	00000000 	.word	0x00000000
 8001798:	080014f9 	.word	0x080014f9

0800179c <_printf_common>:
 800179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a0:	4691      	mov	r9, r2
 80017a2:	461f      	mov	r7, r3
 80017a4:	688a      	ldr	r2, [r1, #8]
 80017a6:	690b      	ldr	r3, [r1, #16]
 80017a8:	4606      	mov	r6, r0
 80017aa:	4293      	cmp	r3, r2
 80017ac:	bfb8      	it	lt
 80017ae:	4613      	movlt	r3, r2
 80017b0:	f8c9 3000 	str.w	r3, [r9]
 80017b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017b8:	460c      	mov	r4, r1
 80017ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017be:	b112      	cbz	r2, 80017c6 <_printf_common+0x2a>
 80017c0:	3301      	adds	r3, #1
 80017c2:	f8c9 3000 	str.w	r3, [r9]
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	0699      	lsls	r1, r3, #26
 80017ca:	bf42      	ittt	mi
 80017cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80017d0:	3302      	addmi	r3, #2
 80017d2:	f8c9 3000 	strmi.w	r3, [r9]
 80017d6:	6825      	ldr	r5, [r4, #0]
 80017d8:	f015 0506 	ands.w	r5, r5, #6
 80017dc:	d107      	bne.n	80017ee <_printf_common+0x52>
 80017de:	f104 0a19 	add.w	sl, r4, #25
 80017e2:	68e3      	ldr	r3, [r4, #12]
 80017e4:	f8d9 2000 	ldr.w	r2, [r9]
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	42ab      	cmp	r3, r5
 80017ec:	dc29      	bgt.n	8001842 <_printf_common+0xa6>
 80017ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80017f2:	6822      	ldr	r2, [r4, #0]
 80017f4:	3300      	adds	r3, #0
 80017f6:	bf18      	it	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	0692      	lsls	r2, r2, #26
 80017fc:	d42e      	bmi.n	800185c <_printf_common+0xc0>
 80017fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001802:	4639      	mov	r1, r7
 8001804:	4630      	mov	r0, r6
 8001806:	47c0      	blx	r8
 8001808:	3001      	adds	r0, #1
 800180a:	d021      	beq.n	8001850 <_printf_common+0xb4>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	68e5      	ldr	r5, [r4, #12]
 8001810:	f003 0306 	and.w	r3, r3, #6
 8001814:	2b04      	cmp	r3, #4
 8001816:	bf18      	it	ne
 8001818:	2500      	movne	r5, #0
 800181a:	f8d9 2000 	ldr.w	r2, [r9]
 800181e:	f04f 0900 	mov.w	r9, #0
 8001822:	bf08      	it	eq
 8001824:	1aad      	subeq	r5, r5, r2
 8001826:	68a3      	ldr	r3, [r4, #8]
 8001828:	6922      	ldr	r2, [r4, #16]
 800182a:	bf08      	it	eq
 800182c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001830:	4293      	cmp	r3, r2
 8001832:	bfc4      	itt	gt
 8001834:	1a9b      	subgt	r3, r3, r2
 8001836:	18ed      	addgt	r5, r5, r3
 8001838:	341a      	adds	r4, #26
 800183a:	454d      	cmp	r5, r9
 800183c:	d11a      	bne.n	8001874 <_printf_common+0xd8>
 800183e:	2000      	movs	r0, #0
 8001840:	e008      	b.n	8001854 <_printf_common+0xb8>
 8001842:	2301      	movs	r3, #1
 8001844:	4652      	mov	r2, sl
 8001846:	4639      	mov	r1, r7
 8001848:	4630      	mov	r0, r6
 800184a:	47c0      	blx	r8
 800184c:	3001      	adds	r0, #1
 800184e:	d103      	bne.n	8001858 <_printf_common+0xbc>
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001858:	3501      	adds	r5, #1
 800185a:	e7c2      	b.n	80017e2 <_printf_common+0x46>
 800185c:	2030      	movs	r0, #48	; 0x30
 800185e:	18e1      	adds	r1, r4, r3
 8001860:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800186a:	4422      	add	r2, r4
 800186c:	3302      	adds	r3, #2
 800186e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001872:	e7c4      	b.n	80017fe <_printf_common+0x62>
 8001874:	2301      	movs	r3, #1
 8001876:	4622      	mov	r2, r4
 8001878:	4639      	mov	r1, r7
 800187a:	4630      	mov	r0, r6
 800187c:	47c0      	blx	r8
 800187e:	3001      	adds	r0, #1
 8001880:	d0e6      	beq.n	8001850 <_printf_common+0xb4>
 8001882:	f109 0901 	add.w	r9, r9, #1
 8001886:	e7d8      	b.n	800183a <_printf_common+0x9e>

08001888 <_printf_i>:
 8001888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800188c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001890:	460c      	mov	r4, r1
 8001892:	7e09      	ldrb	r1, [r1, #24]
 8001894:	b085      	sub	sp, #20
 8001896:	296e      	cmp	r1, #110	; 0x6e
 8001898:	4617      	mov	r7, r2
 800189a:	4606      	mov	r6, r0
 800189c:	4698      	mov	r8, r3
 800189e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018a0:	f000 80b3 	beq.w	8001a0a <_printf_i+0x182>
 80018a4:	d822      	bhi.n	80018ec <_printf_i+0x64>
 80018a6:	2963      	cmp	r1, #99	; 0x63
 80018a8:	d036      	beq.n	8001918 <_printf_i+0x90>
 80018aa:	d80a      	bhi.n	80018c2 <_printf_i+0x3a>
 80018ac:	2900      	cmp	r1, #0
 80018ae:	f000 80b9 	beq.w	8001a24 <_printf_i+0x19c>
 80018b2:	2958      	cmp	r1, #88	; 0x58
 80018b4:	f000 8083 	beq.w	80019be <_printf_i+0x136>
 80018b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80018c0:	e032      	b.n	8001928 <_printf_i+0xa0>
 80018c2:	2964      	cmp	r1, #100	; 0x64
 80018c4:	d001      	beq.n	80018ca <_printf_i+0x42>
 80018c6:	2969      	cmp	r1, #105	; 0x69
 80018c8:	d1f6      	bne.n	80018b8 <_printf_i+0x30>
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	0605      	lsls	r5, r0, #24
 80018d0:	f103 0104 	add.w	r1, r3, #4
 80018d4:	d52a      	bpl.n	800192c <_printf_i+0xa4>
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6011      	str	r1, [r2, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	da03      	bge.n	80018e6 <_printf_i+0x5e>
 80018de:	222d      	movs	r2, #45	; 0x2d
 80018e0:	425b      	negs	r3, r3
 80018e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80018e6:	486f      	ldr	r0, [pc, #444]	; (8001aa4 <_printf_i+0x21c>)
 80018e8:	220a      	movs	r2, #10
 80018ea:	e039      	b.n	8001960 <_printf_i+0xd8>
 80018ec:	2973      	cmp	r1, #115	; 0x73
 80018ee:	f000 809d 	beq.w	8001a2c <_printf_i+0x1a4>
 80018f2:	d808      	bhi.n	8001906 <_printf_i+0x7e>
 80018f4:	296f      	cmp	r1, #111	; 0x6f
 80018f6:	d020      	beq.n	800193a <_printf_i+0xb2>
 80018f8:	2970      	cmp	r1, #112	; 0x70
 80018fa:	d1dd      	bne.n	80018b8 <_printf_i+0x30>
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	6023      	str	r3, [r4, #0]
 8001904:	e003      	b.n	800190e <_printf_i+0x86>
 8001906:	2975      	cmp	r1, #117	; 0x75
 8001908:	d017      	beq.n	800193a <_printf_i+0xb2>
 800190a:	2978      	cmp	r1, #120	; 0x78
 800190c:	d1d4      	bne.n	80018b8 <_printf_i+0x30>
 800190e:	2378      	movs	r3, #120	; 0x78
 8001910:	4865      	ldr	r0, [pc, #404]	; (8001aa8 <_printf_i+0x220>)
 8001912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001916:	e055      	b.n	80019c4 <_printf_i+0x13c>
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800191e:	1d19      	adds	r1, r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6011      	str	r1, [r2, #0]
 8001924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001928:	2301      	movs	r3, #1
 800192a:	e08c      	b.n	8001a46 <_printf_i+0x1be>
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001932:	6011      	str	r1, [r2, #0]
 8001934:	bf18      	it	ne
 8001936:	b21b      	sxthne	r3, r3
 8001938:	e7cf      	b.n	80018da <_printf_i+0x52>
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	6825      	ldr	r5, [r4, #0]
 800193e:	1d18      	adds	r0, r3, #4
 8001940:	6010      	str	r0, [r2, #0]
 8001942:	0628      	lsls	r0, r5, #24
 8001944:	d501      	bpl.n	800194a <_printf_i+0xc2>
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e002      	b.n	8001950 <_printf_i+0xc8>
 800194a:	0668      	lsls	r0, r5, #25
 800194c:	d5fb      	bpl.n	8001946 <_printf_i+0xbe>
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	296f      	cmp	r1, #111	; 0x6f
 8001952:	bf14      	ite	ne
 8001954:	220a      	movne	r2, #10
 8001956:	2208      	moveq	r2, #8
 8001958:	4852      	ldr	r0, [pc, #328]	; (8001aa4 <_printf_i+0x21c>)
 800195a:	2100      	movs	r1, #0
 800195c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001960:	6865      	ldr	r5, [r4, #4]
 8001962:	2d00      	cmp	r5, #0
 8001964:	60a5      	str	r5, [r4, #8]
 8001966:	f2c0 8095 	blt.w	8001a94 <_printf_i+0x20c>
 800196a:	6821      	ldr	r1, [r4, #0]
 800196c:	f021 0104 	bic.w	r1, r1, #4
 8001970:	6021      	str	r1, [r4, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d13d      	bne.n	80019f2 <_printf_i+0x16a>
 8001976:	2d00      	cmp	r5, #0
 8001978:	f040 808e 	bne.w	8001a98 <_printf_i+0x210>
 800197c:	4665      	mov	r5, ip
 800197e:	2a08      	cmp	r2, #8
 8001980:	d10b      	bne.n	800199a <_printf_i+0x112>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	07db      	lsls	r3, r3, #31
 8001986:	d508      	bpl.n	800199a <_printf_i+0x112>
 8001988:	6923      	ldr	r3, [r4, #16]
 800198a:	6862      	ldr	r2, [r4, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	bfde      	ittt	le
 8001990:	2330      	movle	r3, #48	; 0x30
 8001992:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001996:	f105 35ff 	addle.w	r5, r5, #4294967295
 800199a:	ebac 0305 	sub.w	r3, ip, r5
 800199e:	6123      	str	r3, [r4, #16]
 80019a0:	f8cd 8000 	str.w	r8, [sp]
 80019a4:	463b      	mov	r3, r7
 80019a6:	aa03      	add	r2, sp, #12
 80019a8:	4621      	mov	r1, r4
 80019aa:	4630      	mov	r0, r6
 80019ac:	f7ff fef6 	bl	800179c <_printf_common>
 80019b0:	3001      	adds	r0, #1
 80019b2:	d14d      	bne.n	8001a50 <_printf_i+0x1c8>
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	b005      	add	sp, #20
 80019ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019be:	4839      	ldr	r0, [pc, #228]	; (8001aa4 <_printf_i+0x21c>)
 80019c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80019c4:	6813      	ldr	r3, [r2, #0]
 80019c6:	6821      	ldr	r1, [r4, #0]
 80019c8:	1d1d      	adds	r5, r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6015      	str	r5, [r2, #0]
 80019ce:	060a      	lsls	r2, r1, #24
 80019d0:	d50b      	bpl.n	80019ea <_printf_i+0x162>
 80019d2:	07ca      	lsls	r2, r1, #31
 80019d4:	bf44      	itt	mi
 80019d6:	f041 0120 	orrmi.w	r1, r1, #32
 80019da:	6021      	strmi	r1, [r4, #0]
 80019dc:	b91b      	cbnz	r3, 80019e6 <_printf_i+0x15e>
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	f022 0220 	bic.w	r2, r2, #32
 80019e4:	6022      	str	r2, [r4, #0]
 80019e6:	2210      	movs	r2, #16
 80019e8:	e7b7      	b.n	800195a <_printf_i+0xd2>
 80019ea:	064d      	lsls	r5, r1, #25
 80019ec:	bf48      	it	mi
 80019ee:	b29b      	uxthmi	r3, r3
 80019f0:	e7ef      	b.n	80019d2 <_printf_i+0x14a>
 80019f2:	4665      	mov	r5, ip
 80019f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019f8:	fb02 3311 	mls	r3, r2, r1, r3
 80019fc:	5cc3      	ldrb	r3, [r0, r3]
 80019fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001a02:	460b      	mov	r3, r1
 8001a04:	2900      	cmp	r1, #0
 8001a06:	d1f5      	bne.n	80019f4 <_printf_i+0x16c>
 8001a08:	e7b9      	b.n	800197e <_printf_i+0xf6>
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	6825      	ldr	r5, [r4, #0]
 8001a0e:	1d18      	adds	r0, r3, #4
 8001a10:	6961      	ldr	r1, [r4, #20]
 8001a12:	6010      	str	r0, [r2, #0]
 8001a14:	0628      	lsls	r0, r5, #24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	d501      	bpl.n	8001a1e <_printf_i+0x196>
 8001a1a:	6019      	str	r1, [r3, #0]
 8001a1c:	e002      	b.n	8001a24 <_printf_i+0x19c>
 8001a1e:	066a      	lsls	r2, r5, #25
 8001a20:	d5fb      	bpl.n	8001a1a <_printf_i+0x192>
 8001a22:	8019      	strh	r1, [r3, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	4665      	mov	r5, ip
 8001a28:	6123      	str	r3, [r4, #16]
 8001a2a:	e7b9      	b.n	80019a0 <_printf_i+0x118>
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	1d19      	adds	r1, r3, #4
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	681d      	ldr	r5, [r3, #0]
 8001a34:	6862      	ldr	r2, [r4, #4]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f000 f837 	bl	8001aac <memchr>
 8001a3e:	b108      	cbz	r0, 8001a44 <_printf_i+0x1bc>
 8001a40:	1b40      	subs	r0, r0, r5
 8001a42:	6060      	str	r0, [r4, #4]
 8001a44:	6863      	ldr	r3, [r4, #4]
 8001a46:	6123      	str	r3, [r4, #16]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a4e:	e7a7      	b.n	80019a0 <_printf_i+0x118>
 8001a50:	6923      	ldr	r3, [r4, #16]
 8001a52:	462a      	mov	r2, r5
 8001a54:	4639      	mov	r1, r7
 8001a56:	4630      	mov	r0, r6
 8001a58:	47c0      	blx	r8
 8001a5a:	3001      	adds	r0, #1
 8001a5c:	d0aa      	beq.n	80019b4 <_printf_i+0x12c>
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	079b      	lsls	r3, r3, #30
 8001a62:	d413      	bmi.n	8001a8c <_printf_i+0x204>
 8001a64:	68e0      	ldr	r0, [r4, #12]
 8001a66:	9b03      	ldr	r3, [sp, #12]
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	bfb8      	it	lt
 8001a6c:	4618      	movlt	r0, r3
 8001a6e:	e7a3      	b.n	80019b8 <_printf_i+0x130>
 8001a70:	2301      	movs	r3, #1
 8001a72:	464a      	mov	r2, r9
 8001a74:	4639      	mov	r1, r7
 8001a76:	4630      	mov	r0, r6
 8001a78:	47c0      	blx	r8
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	d09a      	beq.n	80019b4 <_printf_i+0x12c>
 8001a7e:	3501      	adds	r5, #1
 8001a80:	68e3      	ldr	r3, [r4, #12]
 8001a82:	9a03      	ldr	r2, [sp, #12]
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	42ab      	cmp	r3, r5
 8001a88:	dcf2      	bgt.n	8001a70 <_printf_i+0x1e8>
 8001a8a:	e7eb      	b.n	8001a64 <_printf_i+0x1dc>
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	f104 0919 	add.w	r9, r4, #25
 8001a92:	e7f5      	b.n	8001a80 <_printf_i+0x1f8>
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ac      	bne.n	80019f2 <_printf_i+0x16a>
 8001a98:	7803      	ldrb	r3, [r0, #0]
 8001a9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001aa2:	e76c      	b.n	800197e <_printf_i+0xf6>
 8001aa4:	08001d4d 	.word	0x08001d4d
 8001aa8:	08001d5e 	.word	0x08001d5e

08001aac <memchr>:
 8001aac:	b510      	push	{r4, lr}
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	4402      	add	r2, r0
 8001ab2:	4290      	cmp	r0, r2
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	d101      	bne.n	8001abc <memchr+0x10>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e003      	b.n	8001ac4 <memchr+0x18>
 8001abc:	781c      	ldrb	r4, [r3, #0]
 8001abe:	3001      	adds	r0, #1
 8001ac0:	428c      	cmp	r4, r1
 8001ac2:	d1f6      	bne.n	8001ab2 <memchr+0x6>
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd10      	pop	{r4, pc}

08001ac8 <memcpy>:
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	1e43      	subs	r3, r0, #1
 8001acc:	440a      	add	r2, r1
 8001ace:	4291      	cmp	r1, r2
 8001ad0:	d100      	bne.n	8001ad4 <memcpy+0xc>
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001adc:	e7f7      	b.n	8001ace <memcpy+0x6>

08001ade <memmove>:
 8001ade:	4288      	cmp	r0, r1
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	eb01 0302 	add.w	r3, r1, r2
 8001ae6:	d807      	bhi.n	8001af8 <memmove+0x1a>
 8001ae8:	1e42      	subs	r2, r0, #1
 8001aea:	4299      	cmp	r1, r3
 8001aec:	d00a      	beq.n	8001b04 <memmove+0x26>
 8001aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001af2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001af6:	e7f8      	b.n	8001aea <memmove+0xc>
 8001af8:	4283      	cmp	r3, r0
 8001afa:	d9f5      	bls.n	8001ae8 <memmove+0xa>
 8001afc:	1881      	adds	r1, r0, r2
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	42d3      	cmn	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memmove+0x28>
 8001b04:	bd10      	pop	{r4, pc}
 8001b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001b0e:	e7f7      	b.n	8001b00 <memmove+0x22>

08001b10 <_free_r>:
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4605      	mov	r5, r0
 8001b14:	2900      	cmp	r1, #0
 8001b16:	d043      	beq.n	8001ba0 <_free_r+0x90>
 8001b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b1c:	1f0c      	subs	r4, r1, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bfb8      	it	lt
 8001b22:	18e4      	addlt	r4, r4, r3
 8001b24:	f000 f8d0 	bl	8001cc8 <__malloc_lock>
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <_free_r+0x94>)
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	b933      	cbnz	r3, 8001b3e <_free_r+0x2e>
 8001b30:	6063      	str	r3, [r4, #4]
 8001b32:	6014      	str	r4, [r2, #0]
 8001b34:	4628      	mov	r0, r5
 8001b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b3a:	f000 b8c6 	b.w	8001cca <__malloc_unlock>
 8001b3e:	42a3      	cmp	r3, r4
 8001b40:	d90b      	bls.n	8001b5a <_free_r+0x4a>
 8001b42:	6821      	ldr	r1, [r4, #0]
 8001b44:	1862      	adds	r2, r4, r1
 8001b46:	4293      	cmp	r3, r2
 8001b48:	bf01      	itttt	eq
 8001b4a:	681a      	ldreq	r2, [r3, #0]
 8001b4c:	685b      	ldreq	r3, [r3, #4]
 8001b4e:	1852      	addeq	r2, r2, r1
 8001b50:	6022      	streq	r2, [r4, #0]
 8001b52:	6063      	str	r3, [r4, #4]
 8001b54:	6004      	str	r4, [r0, #0]
 8001b56:	e7ed      	b.n	8001b34 <_free_r+0x24>
 8001b58:	4613      	mov	r3, r2
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	b10a      	cbz	r2, 8001b62 <_free_r+0x52>
 8001b5e:	42a2      	cmp	r2, r4
 8001b60:	d9fa      	bls.n	8001b58 <_free_r+0x48>
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	1858      	adds	r0, r3, r1
 8001b66:	42a0      	cmp	r0, r4
 8001b68:	d10b      	bne.n	8001b82 <_free_r+0x72>
 8001b6a:	6820      	ldr	r0, [r4, #0]
 8001b6c:	4401      	add	r1, r0
 8001b6e:	1858      	adds	r0, r3, r1
 8001b70:	4282      	cmp	r2, r0
 8001b72:	6019      	str	r1, [r3, #0]
 8001b74:	d1de      	bne.n	8001b34 <_free_r+0x24>
 8001b76:	6810      	ldr	r0, [r2, #0]
 8001b78:	6852      	ldr	r2, [r2, #4]
 8001b7a:	4401      	add	r1, r0
 8001b7c:	6019      	str	r1, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	e7d8      	b.n	8001b34 <_free_r+0x24>
 8001b82:	d902      	bls.n	8001b8a <_free_r+0x7a>
 8001b84:	230c      	movs	r3, #12
 8001b86:	602b      	str	r3, [r5, #0]
 8001b88:	e7d4      	b.n	8001b34 <_free_r+0x24>
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	1821      	adds	r1, r4, r0
 8001b8e:	428a      	cmp	r2, r1
 8001b90:	bf01      	itttt	eq
 8001b92:	6811      	ldreq	r1, [r2, #0]
 8001b94:	6852      	ldreq	r2, [r2, #4]
 8001b96:	1809      	addeq	r1, r1, r0
 8001b98:	6021      	streq	r1, [r4, #0]
 8001b9a:	6062      	str	r2, [r4, #4]
 8001b9c:	605c      	str	r4, [r3, #4]
 8001b9e:	e7c9      	b.n	8001b34 <_free_r+0x24>
 8001ba0:	bd38      	pop	{r3, r4, r5, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000013c 	.word	0x2000013c

08001ba8 <_malloc_r>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	1ccd      	adds	r5, r1, #3
 8001bac:	f025 0503 	bic.w	r5, r5, #3
 8001bb0:	3508      	adds	r5, #8
 8001bb2:	2d0c      	cmp	r5, #12
 8001bb4:	bf38      	it	cc
 8001bb6:	250c      	movcc	r5, #12
 8001bb8:	2d00      	cmp	r5, #0
 8001bba:	4606      	mov	r6, r0
 8001bbc:	db01      	blt.n	8001bc2 <_malloc_r+0x1a>
 8001bbe:	42a9      	cmp	r1, r5
 8001bc0:	d903      	bls.n	8001bca <_malloc_r+0x22>
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	6033      	str	r3, [r6, #0]
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
 8001bca:	f000 f87d 	bl	8001cc8 <__malloc_lock>
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <_malloc_r+0xac>)
 8001bd0:	6814      	ldr	r4, [r2, #0]
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	b991      	cbnz	r1, 8001bfc <_malloc_r+0x54>
 8001bd6:	4c20      	ldr	r4, [pc, #128]	; (8001c58 <_malloc_r+0xb0>)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	b91b      	cbnz	r3, 8001be4 <_malloc_r+0x3c>
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f000 f863 	bl	8001ca8 <_sbrk_r>
 8001be2:	6020      	str	r0, [r4, #0]
 8001be4:	4629      	mov	r1, r5
 8001be6:	4630      	mov	r0, r6
 8001be8:	f000 f85e 	bl	8001ca8 <_sbrk_r>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d124      	bne.n	8001c3a <_malloc_r+0x92>
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	6033      	str	r3, [r6, #0]
 8001bf6:	f000 f868 	bl	8001cca <__malloc_unlock>
 8001bfa:	e7e4      	b.n	8001bc6 <_malloc_r+0x1e>
 8001bfc:	680b      	ldr	r3, [r1, #0]
 8001bfe:	1b5b      	subs	r3, r3, r5
 8001c00:	d418      	bmi.n	8001c34 <_malloc_r+0x8c>
 8001c02:	2b0b      	cmp	r3, #11
 8001c04:	d90f      	bls.n	8001c26 <_malloc_r+0x7e>
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	18cc      	adds	r4, r1, r3
 8001c0a:	50cd      	str	r5, [r1, r3]
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f000 f85c 	bl	8001cca <__malloc_unlock>
 8001c12:	f104 000b 	add.w	r0, r4, #11
 8001c16:	1d23      	adds	r3, r4, #4
 8001c18:	f020 0007 	bic.w	r0, r0, #7
 8001c1c:	1ac3      	subs	r3, r0, r3
 8001c1e:	d0d3      	beq.n	8001bc8 <_malloc_r+0x20>
 8001c20:	425a      	negs	r2, r3
 8001c22:	50e2      	str	r2, [r4, r3]
 8001c24:	e7d0      	b.n	8001bc8 <_malloc_r+0x20>
 8001c26:	684b      	ldr	r3, [r1, #4]
 8001c28:	428c      	cmp	r4, r1
 8001c2a:	bf16      	itet	ne
 8001c2c:	6063      	strne	r3, [r4, #4]
 8001c2e:	6013      	streq	r3, [r2, #0]
 8001c30:	460c      	movne	r4, r1
 8001c32:	e7eb      	b.n	8001c0c <_malloc_r+0x64>
 8001c34:	460c      	mov	r4, r1
 8001c36:	6849      	ldr	r1, [r1, #4]
 8001c38:	e7cc      	b.n	8001bd4 <_malloc_r+0x2c>
 8001c3a:	1cc4      	adds	r4, r0, #3
 8001c3c:	f024 0403 	bic.w	r4, r4, #3
 8001c40:	42a0      	cmp	r0, r4
 8001c42:	d005      	beq.n	8001c50 <_malloc_r+0xa8>
 8001c44:	1a21      	subs	r1, r4, r0
 8001c46:	4630      	mov	r0, r6
 8001c48:	f000 f82e 	bl	8001ca8 <_sbrk_r>
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	d0cf      	beq.n	8001bf0 <_malloc_r+0x48>
 8001c50:	6025      	str	r5, [r4, #0]
 8001c52:	e7db      	b.n	8001c0c <_malloc_r+0x64>
 8001c54:	2000013c 	.word	0x2000013c
 8001c58:	20000140 	.word	0x20000140

08001c5c <_realloc_r>:
 8001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5e:	4607      	mov	r7, r0
 8001c60:	4614      	mov	r4, r2
 8001c62:	460e      	mov	r6, r1
 8001c64:	b921      	cbnz	r1, 8001c70 <_realloc_r+0x14>
 8001c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	f7ff bf9c 	b.w	8001ba8 <_malloc_r>
 8001c70:	b922      	cbnz	r2, 8001c7c <_realloc_r+0x20>
 8001c72:	f7ff ff4d 	bl	8001b10 <_free_r>
 8001c76:	4625      	mov	r5, r4
 8001c78:	4628      	mov	r0, r5
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	f000 f826 	bl	8001ccc <_malloc_usable_size_r>
 8001c80:	42a0      	cmp	r0, r4
 8001c82:	d20f      	bcs.n	8001ca4 <_realloc_r+0x48>
 8001c84:	4621      	mov	r1, r4
 8001c86:	4638      	mov	r0, r7
 8001c88:	f7ff ff8e 	bl	8001ba8 <_malloc_r>
 8001c8c:	4605      	mov	r5, r0
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d0f2      	beq.n	8001c78 <_realloc_r+0x1c>
 8001c92:	4631      	mov	r1, r6
 8001c94:	4622      	mov	r2, r4
 8001c96:	f7ff ff17 	bl	8001ac8 <memcpy>
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	f7ff ff37 	bl	8001b10 <_free_r>
 8001ca2:	e7e9      	b.n	8001c78 <_realloc_r+0x1c>
 8001ca4:	4635      	mov	r5, r6
 8001ca6:	e7e7      	b.n	8001c78 <_realloc_r+0x1c>

08001ca8 <_sbrk_r>:
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	2300      	movs	r3, #0
 8001cac:	4c05      	ldr	r4, [pc, #20]	; (8001cc4 <_sbrk_r+0x1c>)
 8001cae:	4605      	mov	r5, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	f7ff fb76 	bl	80013a4 <_sbrk>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d102      	bne.n	8001cc2 <_sbrk_r+0x1a>
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	b103      	cbz	r3, 8001cc2 <_sbrk_r+0x1a>
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	20000194 	.word	0x20000194

08001cc8 <__malloc_lock>:
 8001cc8:	4770      	bx	lr

08001cca <__malloc_unlock>:
 8001cca:	4770      	bx	lr

08001ccc <_malloc_usable_size_r>:
 8001ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cd0:	1f18      	subs	r0, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bfbc      	itt	lt
 8001cd6:	580b      	ldrlt	r3, [r1, r0]
 8001cd8:	18c0      	addlt	r0, r0, r3
 8001cda:	4770      	bx	lr

08001cdc <_init>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr

08001ce8 <_fini>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr
