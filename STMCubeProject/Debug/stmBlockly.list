
stmBlockly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001278  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013b8  080013b8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080013b8  080013b8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013b8  080013b8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013b8  080013b8  000113b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013bc  080013bc  000113bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080013c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000018  080013d8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080013d8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002aea  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e9d  00000000  00000000  00022b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00023a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002aa  00000000  00000000  00023dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000017e4  00000000  00000000  00024072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000059c1  00000000  00000000  00025856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b023  00000000  00000000  0002b217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cb4  00000000  00000000  0003623c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00036ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08001390 	.word	0x08001390

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08001390 	.word	0x08001390

08000170 <lcd_I2C_init>:

static int count = 0;
int G_cols, G_rows;
I2C_Registers_t *G_I2Cx;
uint16 SLAVE_ADDRESS_LCD;
void lcd_I2C_init(int cols, int rows, I2C_Registers_t *I2Cx, uint16 address) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b08c      	sub	sp, #48	; 0x30
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	807b      	strh	r3, [r7, #2]
	G_cols = cols;
 800017e:	4a1e      	ldr	r2, [pc, #120]	; (80001f8 <lcd_I2C_init+0x88>)
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	6013      	str	r3, [r2, #0]
	G_rows = rows;
 8000184:	4a1d      	ldr	r2, [pc, #116]	; (80001fc <lcd_I2C_init+0x8c>)
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	6013      	str	r3, [r2, #0]
	G_I2Cx = I2Cx;
 800018a:	4a1d      	ldr	r2, [pc, #116]	; (8000200 <lcd_I2C_init+0x90>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = address;
 8000190:	4a1c      	ldr	r2, [pc, #112]	; (8000204 <lcd_I2C_init+0x94>)
 8000192:	887b      	ldrh	r3, [r7, #2]
 8000194:	8013      	strh	r3, [r2, #0]
	I2C_pinConfig_t I2C_pinConfig;
	I2C_pinConfig.Clock_Speed = I2C_CLK_SM_100K;
 8000196:	4b1c      	ldr	r3, [pc, #112]	; (8000208 <lcd_I2C_init+0x98>)
 8000198:	613b      	str	r3, [r7, #16]
	I2C_pinConfig.I2C_Mode = I2C_Mode_I2C;
 800019a:	2300      	movs	r3, #0
 800019c:	61bb      	str	r3, [r7, #24]
	I2C_pinConfig.Stretch_Mode = I2C_Stretch_EN;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
	I2C_pinConfig.ACK_Enable = I2C_ACK_EN;
 80001a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_pinConfig.P_Slave_CallBack_Fun = NULL;
 80001a8:	2300      	movs	r3, #0
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	I2C_pinConfig.slave_address.slave_address_mode = I2C_Slave_7Bit;
 80001ac:	2300      	movs	r3, #0
 80001ae:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_pinConfig.slave_address.slave_primary_address = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	83fb      	strh	r3, [r7, #30]
	I2C_pinConfig.slave_address.Enable_Dual_Mode = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	83bb      	strh	r3, [r7, #28]

	I2C_GPIO_SetPins(I2Cx);
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f000 fc85 	bl	8000ac8 <I2C_GPIO_SetPins>
	I2C_init(&I2C_pinConfig, I2Cx);
 80001be:	f107 0310 	add.w	r3, r7, #16
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fb85 	bl	80008d4 <I2C_init>
	STK_init();
 80001ca:	f000 ffe1 	bl	8001190 <STK_init>
	// you must wait for the hardware to initialize
	STK_delayMs(50);
 80001ce:	2032      	movs	r0, #50	; 0x32
 80001d0:	f000 fff2 	bl	80011b8 <STK_delayMs>
	lcd_I2C_Send_Command (FUNCTION_4BIT_2LINES);
 80001d4:	2028      	movs	r0, #40	; 0x28
 80001d6:	f000 f819 	bl	800020c <lcd_I2C_Send_Command>
	lcd_I2C_Send_Command (ENTRY_MODE);
 80001da:	2006      	movs	r0, #6
 80001dc:	f000 f816 	bl	800020c <lcd_I2C_Send_Command>
	lcd_I2C_Send_Command(CURSOR_FIRST_LINE);
 80001e0:	2080      	movs	r0, #128	; 0x80
 80001e2:	f000 f813 	bl	800020c <lcd_I2C_Send_Command>
	lcd_I2C_Send_Command(DISPLAY_ON_CURSOR_BLINK);
 80001e6:	200f      	movs	r0, #15
 80001e8:	f000 f810 	bl	800020c <lcd_I2C_Send_Command>
	lcd_I2C_Clear_Screen();
 80001ec:	f000 f8a4 	bl	8000338 <lcd_I2C_Clear_Screen>

}
 80001f0:	bf00      	nop
 80001f2:	3730      	adds	r7, #48	; 0x30
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000038 	.word	0x20000038
 80001fc:	2000003c 	.word	0x2000003c
 8000200:	20000040 	.word	0x20000040
 8000204:	20000044 	.word	0x20000044
 8000208:	000186a0 	.word	0x000186a0

0800020c <lcd_I2C_Send_Command>:
void lcd_I2C_Send_Command( char cmd) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af02      	add	r7, sp, #8
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	 * 2.Reset control pins
	 * 3.Deactivate and Activate Enable
	 */
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (cmd & 0xf0);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f023 030f 	bic.w	r3, r3, #15
 800021c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	011b      	lsls	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	f043 030c 	orr.w	r3, r3, #12
 800022a:	b2db      	uxtb	r3, r3
 800022c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	b2db      	uxtb	r3, r3
 8000236:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000238:	7bbb      	ldrb	r3, [r7, #14]
 800023a:	f043 030c 	orr.w	r3, r3, #12
 800023e:	b2db      	uxtb	r3, r3
 8000240:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	f043 0308 	orr.w	r3, r3, #8
 8000248:	b2db      	uxtb	r3, r3
 800024a:	72fb      	strb	r3, [r7, #11]
	I2C_Master_TX(G_I2Cx, SLAVE_ADDRESS_LCD, (uint8*) data_t, 4, STOP,
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <lcd_I2C_Send_Command+0x68>)
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <lcd_I2C_Send_Command+0x6c>)
 8000252:	8819      	ldrh	r1, [r3, #0]
 8000254:	f107 0208 	add.w	r2, r7, #8
 8000258:	2300      	movs	r3, #0
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	2301      	movs	r3, #1
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2304      	movs	r3, #4
 8000262:	f000 fc73 	bl	8000b4c <I2C_Master_TX>
			NO_REPEATED_START);
	STK_delayMs(10);
 8000266:	200a      	movs	r0, #10
 8000268:	f000 ffa6 	bl	80011b8 <STK_delayMs>

}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000040 	.word	0x20000040
 8000278:	20000044 	.word	0x20000044

0800027c <lcd_I2C_Send_Char>:
void lcd_I2C_Send_Char( char data) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af02      	add	r7, sp, #8
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8 data_t[4];
	data_u = (data&0xf0);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f023 030f 	bic.w	r3, r3, #15
 800028c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000294:	7bfb      	ldrb	r3, [r7, #15]
 8000296:	f043 030d 	orr.w	r3, r3, #13
 800029a:	b2db      	uxtb	r3, r3
 800029c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	f043 0309 	orr.w	r3, r3, #9
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80002a8:	7bbb      	ldrb	r3, [r7, #14]
 80002aa:	f043 030d 	orr.w	r3, r3, #13
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80002b2:	7bbb      	ldrb	r3, [r7, #14]
 80002b4:	f043 0309 	orr.w	r3, r3, #9
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	72fb      	strb	r3, [r7, #11]
	I2C_Master_TX(G_I2Cx, SLAVE_ADDRESS_LCD, (uint8*) data_t, 4, STOP,
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <lcd_I2C_Send_Char+0xa8>)
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	4b19      	ldr	r3, [pc, #100]	; (8000328 <lcd_I2C_Send_Char+0xac>)
 80002c2:	8819      	ldrh	r1, [r3, #0]
 80002c4:	f107 0208 	add.w	r2, r7, #8
 80002c8:	2300      	movs	r3, #0
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2301      	movs	r3, #1
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2304      	movs	r3, #4
 80002d2:	f000 fc3b 	bl	8000b4c <I2C_Master_TX>
			NO_REPEATED_START);

	if (count == G_cols) {
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <lcd_I2C_Send_Char+0xb0>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <lcd_I2C_Send_Char+0xb4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d104      	bne.n	80002ec <lcd_I2C_Send_Char+0x70>
		lcd_I2C_GOTO_XY(1, 0);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 f82f 	bl	8000348 <lcd_I2C_GOTO_XY>
 80002ea:	e012      	b.n	8000312 <lcd_I2C_Send_Char+0x96>
		lcd_I2C_GOTO_XY(3, 0);
	}
#endif

	// if both lines are full clear and start over.
	else if (count == (G_cols * G_rows)) {
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <lcd_I2C_Send_Char+0xb4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a10      	ldr	r2, [pc, #64]	; (8000334 <lcd_I2C_Send_Char+0xb8>)
 80002f2:	6812      	ldr	r2, [r2, #0]
 80002f4:	fb03 f202 	mul.w	r2, r3, r2
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <lcd_I2C_Send_Char+0xb0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d108      	bne.n	8000312 <lcd_I2C_Send_Char+0x96>
		lcd_I2C_Clear_Screen();
 8000300:	f000 f81a 	bl	8000338 <lcd_I2C_Clear_Screen>
		lcd_I2C_GOTO_XY(0, 0);
 8000304:	2100      	movs	r1, #0
 8000306:	2000      	movs	r0, #0
 8000308:	f000 f81e 	bl	8000348 <lcd_I2C_GOTO_XY>
		count = 0;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <lcd_I2C_Send_Char+0xb0>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
	}

	count++;
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <lcd_I2C_Send_Char+0xb0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <lcd_I2C_Send_Char+0xb0>)
 800031a:	6013      	str	r3, [r2, #0]
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000040 	.word	0x20000040
 8000328:	20000044 	.word	0x20000044
 800032c:	20000034 	.word	0x20000034
 8000330:	20000038 	.word	0x20000038
 8000334:	2000003c 	.word	0x2000003c

08000338 <lcd_I2C_Clear_Screen>:
void lcd_I2C_Clear_Screen(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	lcd_I2C_Send_Command(CLEAR_SCREEN);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff65 	bl	800020c <lcd_I2C_Send_Command>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <lcd_I2C_GOTO_XY>:

void lcd_I2C_GOTO_XY(unsigned char row, unsigned char col) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	460a      	mov	r2, r1
 8000352:	71fb      	strb	r3, [r7, #7]
 8000354:	4613      	mov	r3, r2
 8000356:	71bb      	strb	r3, [r7, #6]
	 if (col >= G_cols || col < 0)
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <lcd_I2C_GOTO_XY+0x4c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	da13      	bge.n	800038a <lcd_I2C_GOTO_XY+0x42>
	        return; // Invalid column, do nothing

	    switch (row) {
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d002      	beq.n	800036e <lcd_I2C_GOTO_XY+0x26>
 8000368:	2b01      	cmp	r3, #1
 800036a:	d007      	beq.n	800037c <lcd_I2C_GOTO_XY+0x34>
            lcd_I2C_Send_Command(CURSOR_FOURTH_LINE_16 + col);
            break;
#endif
	        default:
	            // Handle invalid row number if necessary
	            break;
 800036c:	e00e      	b.n	800038c <lcd_I2C_GOTO_XY+0x44>
	            lcd_I2C_Send_Command(CURSOR_FIRST_LINE + col);
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	3b80      	subs	r3, #128	; 0x80
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff49 	bl	800020c <lcd_I2C_Send_Command>
	            break;
 800037a:	e007      	b.n	800038c <lcd_I2C_GOTO_XY+0x44>
	            lcd_I2C_Send_Command(CURSOR_SECOND_LINE + col);
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	3b40      	subs	r3, #64	; 0x40
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff42 	bl	800020c <lcd_I2C_Send_Command>
	            break;
 8000388:	e000      	b.n	800038c <lcd_I2C_GOTO_XY+0x44>
	        return; // Invalid column, do nothing
 800038a:	bf00      	nop
	    }
}
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000038 	.word	0x20000038

08000398 <lcd_I2C_send_String>:
	lcd_I2C_send_String(str);

}


void lcd_I2C_send_String(char *string) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	// keeps track of chars count
	int count = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80003a4:	e024      	b.n	80003f0 <lcd_I2C_send_String+0x58>
		count++;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3301      	adds	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
		lcd_I2C_Send_Char(*string++);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	607a      	str	r2, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff61 	bl	800027c <lcd_I2C_Send_Char>
		// if first line is full go to second
		if (count == G_cols) {
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <lcd_I2C_send_String+0x6c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d104      	bne.n	80003ce <lcd_I2C_send_String+0x36>
			lcd_I2C_GOTO_XY(1, 0);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff ffbe 	bl	8000348 <lcd_I2C_GOTO_XY>
 80003cc:	e010      	b.n	80003f0 <lcd_I2C_send_String+0x58>
			lcd_I2C_GOTO_XY(3, 0);
		}
#endif

		// if both lines are full clear and start over.
		else if (count == (G_cols * G_rows)) {
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <lcd_I2C_send_String+0x6c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <lcd_I2C_send_String+0x70>)
 80003d4:	6812      	ldr	r2, [r2, #0]
 80003d6:	fb02 f303 	mul.w	r3, r2, r3
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d107      	bne.n	80003f0 <lcd_I2C_send_String+0x58>
			lcd_I2C_Clear_Screen();
 80003e0:	f7ff ffaa 	bl	8000338 <lcd_I2C_Clear_Screen>
			lcd_I2C_GOTO_XY(0, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff ffae 	bl	8000348 <lcd_I2C_GOTO_XY>
			count = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1d6      	bne.n	80003a6 <lcd_I2C_send_String+0xe>
		}

	}
}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000038 	.word	0x20000038
 8000408:	2000003c 	.word	0x2000003c

0800040c <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI0_IRQHandler+0x1c>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI0_IRQHandler+0x1c>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <EXTI0_IRQHandler+0x20>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4798      	blx	r3
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	20000048 	.word	0x20000048

08000430 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <EXTI1_IRQHandler+0x1c>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <EXTI1_IRQHandler+0x1c>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <EXTI1_IRQHandler+0x20>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4798      	blx	r3
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010400 	.word	0x40010400
 8000450:	20000048 	.word	0x20000048

08000454 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <EXTI2_IRQHandler+0x1c>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <EXTI2_IRQHandler+0x1c>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <EXTI2_IRQHandler+0x20>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	4798      	blx	r3
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40010400 	.word	0x40010400
 8000474:	20000048 	.word	0x20000048

08000478 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <EXTI3_IRQHandler+0x1c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <EXTI3_IRQHandler+0x1c>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <EXTI3_IRQHandler+0x20>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4798      	blx	r3
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40010400 	.word	0x40010400
 8000498:	20000048 	.word	0x20000048

0800049c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <EXTI4_IRQHandler+0x1c>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <EXTI4_IRQHandler+0x1c>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 80004ac:	4b03      	ldr	r3, [pc, #12]	; (80004bc <EXTI4_IRQHandler+0x20>)
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	4798      	blx	r3
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40010400 	.word	0x40010400
 80004bc:	20000048 	.word	0x20000048

080004c0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	f003 0320 	and.w	r3, r3, #32
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d009      	beq.n	80004e4 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 80004d0:	4b25      	ldr	r3, [pc, #148]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a24      	ldr	r2, [pc, #144]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 80004dc:	4b23      	ldr	r3, [pc, #140]	; (800056c <EXTI9_5_IRQHandler+0xac>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 80004e2:	e03e      	b.n	8000562 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d009      	beq.n	8000504 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 80004f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fa:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <EXTI9_5_IRQHandler+0xac>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4798      	blx	r3
}
 8000502:	e02e      	b.n	8000562 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051a:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <EXTI9_5_IRQHandler+0xac>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	4798      	blx	r3
}
 8000522:	e01e      	b.n	8000562 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800052c:	2b00      	cmp	r3, #0
 800052e:	d009      	beq.n	8000544 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <EXTI9_5_IRQHandler+0xac>)
 800053e:	6a1b      	ldr	r3, [r3, #32]
 8000540:	4798      	blx	r3
}
 8000542:	e00e      	b.n	8000562 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800054c:	2b00      	cmp	r3, #0
 800054e:	d008      	beq.n	8000562 <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <EXTI9_5_IRQHandler+0xa8>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <EXTI9_5_IRQHandler+0xac>)
 800055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000560:	4798      	blx	r3
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010400 	.word	0x40010400
 800056c:	20000048 	.word	0x20000048

08000570 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8000574:	4b30      	ldr	r3, [pc, #192]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800057c:	2b00      	cmp	r3, #0
 800057e:	d009      	beq.n	8000594 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <EXTI15_10_IRQHandler+0xcc>)
 800058e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000590:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 8000592:	e04e      	b.n	8000632 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800059c:	2b00      	cmp	r3, #0
 800059e:	d009      	beq.n	80005b4 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005aa:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <EXTI15_10_IRQHandler+0xcc>)
 80005ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b0:	4798      	blx	r3
}
 80005b2:	e03e      	b.n	8000632 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d009      	beq.n	80005d4 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ca:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <EXTI15_10_IRQHandler+0xcc>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	4798      	blx	r3
}
 80005d2:	e02e      	b.n	8000632 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d009      	beq.n	80005f4 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ea:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <EXTI15_10_IRQHandler+0xcc>)
 80005ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f0:	4798      	blx	r3
}
 80005f2:	e01e      	b.n	8000632 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d009      	beq.n	8000614 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <EXTI15_10_IRQHandler+0xcc>)
 800060e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000610:	4798      	blx	r3
}
 8000612:	e00e      	b.n	8000632 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d008      	beq.n	8000632 <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <EXTI15_10_IRQHandler+0xc8>)
 8000626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062a:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <EXTI15_10_IRQHandler+0xcc>)
 800062e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000630:	4798      	blx	r3
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010400 	.word	0x40010400
 800063c:	20000048 	.word	0x20000048

08000640 <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000654:	f000 80b8 	beq.w	80007c8 <Get_CRLH_Position+0x188>
 8000658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800065c:	f300 80b7 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 8000660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000664:	f000 80ad 	beq.w	80007c2 <Get_CRLH_Position+0x182>
 8000668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800066c:	f300 80af 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	f000 80a2 	beq.w	80007bc <Get_CRLH_Position+0x17c>
 8000678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800067c:	f300 80a7 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 8000680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000684:	f000 8097 	beq.w	80007b6 <Get_CRLH_Position+0x176>
 8000688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800068c:	f300 809f 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 8000690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000694:	f000 808c 	beq.w	80007b0 <Get_CRLH_Position+0x170>
 8000698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800069c:	f300 8097 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 80006a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006a4:	f000 8081 	beq.w	80007aa <Get_CRLH_Position+0x16a>
 80006a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006ac:	f300 808f 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 80006b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006b4:	d076      	beq.n	80007a4 <Get_CRLH_Position+0x164>
 80006b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ba:	f300 8088 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 80006be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c2:	d06c      	beq.n	800079e <Get_CRLH_Position+0x15e>
 80006c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c8:	f300 8081 	bgt.w	80007ce <Get_CRLH_Position+0x18e>
 80006cc:	2b80      	cmp	r3, #128	; 0x80
 80006ce:	d063      	beq.n	8000798 <Get_CRLH_Position+0x158>
 80006d0:	2b80      	cmp	r3, #128	; 0x80
 80006d2:	dc7c      	bgt.n	80007ce <Get_CRLH_Position+0x18e>
 80006d4:	2b20      	cmp	r3, #32
 80006d6:	dc47      	bgt.n	8000768 <Get_CRLH_Position+0x128>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dd78      	ble.n	80007ce <Get_CRLH_Position+0x18e>
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b1f      	cmp	r3, #31
 80006e0:	d875      	bhi.n	80007ce <Get_CRLH_Position+0x18e>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <Get_CRLH_Position+0xa8>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	0800076f 	.word	0x0800076f
 80006ec:	08000775 	.word	0x08000775
 80006f0:	080007cf 	.word	0x080007cf
 80006f4:	0800077b 	.word	0x0800077b
 80006f8:	080007cf 	.word	0x080007cf
 80006fc:	080007cf 	.word	0x080007cf
 8000700:	080007cf 	.word	0x080007cf
 8000704:	08000781 	.word	0x08000781
 8000708:	080007cf 	.word	0x080007cf
 800070c:	080007cf 	.word	0x080007cf
 8000710:	080007cf 	.word	0x080007cf
 8000714:	080007cf 	.word	0x080007cf
 8000718:	080007cf 	.word	0x080007cf
 800071c:	080007cf 	.word	0x080007cf
 8000720:	080007cf 	.word	0x080007cf
 8000724:	08000787 	.word	0x08000787
 8000728:	080007cf 	.word	0x080007cf
 800072c:	080007cf 	.word	0x080007cf
 8000730:	080007cf 	.word	0x080007cf
 8000734:	080007cf 	.word	0x080007cf
 8000738:	080007cf 	.word	0x080007cf
 800073c:	080007cf 	.word	0x080007cf
 8000740:	080007cf 	.word	0x080007cf
 8000744:	080007cf 	.word	0x080007cf
 8000748:	080007cf 	.word	0x080007cf
 800074c:	080007cf 	.word	0x080007cf
 8000750:	080007cf 	.word	0x080007cf
 8000754:	080007cf 	.word	0x080007cf
 8000758:	080007cf 	.word	0x080007cf
 800075c:	080007cf 	.word	0x080007cf
 8000760:	080007cf 	.word	0x080007cf
 8000764:	0800078d 	.word	0x0800078d
 8000768:	2b40      	cmp	r3, #64	; 0x40
 800076a:	d012      	beq.n	8000792 <Get_CRLH_Position+0x152>
 800076c:	e02f      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_0:
		shift = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
		break;
 8000772:	e02c      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_1:
		shift = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	73fb      	strb	r3, [r7, #15]
		break;
 8000778:	e029      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_2:
		shift = 8;
 800077a:	2308      	movs	r3, #8
 800077c:	73fb      	strb	r3, [r7, #15]
		break;
 800077e:	e026      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_3:
		shift = 12;
 8000780:	230c      	movs	r3, #12
 8000782:	73fb      	strb	r3, [r7, #15]
		break;
 8000784:	e023      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_4:
		shift = 16;
 8000786:	2310      	movs	r3, #16
 8000788:	73fb      	strb	r3, [r7, #15]
		break;
 800078a:	e020      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_5:
		shift = 20;
 800078c:	2314      	movs	r3, #20
 800078e:	73fb      	strb	r3, [r7, #15]
		break;
 8000790:	e01d      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_6:
		shift = 24;
 8000792:	2318      	movs	r3, #24
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	e01a      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_7:
		shift = 28;
 8000798:	231c      	movs	r3, #28
 800079a:	73fb      	strb	r3, [r7, #15]
		break;
 800079c:	e017      	b.n	80007ce <Get_CRLH_Position+0x18e>

	case PIN_8:
		shift = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]
		break;
 80007a2:	e014      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_9:
		shift = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	73fb      	strb	r3, [r7, #15]
		break;
 80007a8:	e011      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_10:
		shift = 8;
 80007aa:	2308      	movs	r3, #8
 80007ac:	73fb      	strb	r3, [r7, #15]
		break;
 80007ae:	e00e      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_11:
		shift = 12;
 80007b0:	230c      	movs	r3, #12
 80007b2:	73fb      	strb	r3, [r7, #15]
		break;
 80007b4:	e00b      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_12:
		shift = 16;
 80007b6:	2310      	movs	r3, #16
 80007b8:	73fb      	strb	r3, [r7, #15]
		break;
 80007ba:	e008      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_13:
		shift = 20;
 80007bc:	2314      	movs	r3, #20
 80007be:	73fb      	strb	r3, [r7, #15]
		break;
 80007c0:	e005      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_14:
		shift = 24;
 80007c2:	2318      	movs	r3, #24
 80007c4:	73fb      	strb	r3, [r7, #15]
		break;
 80007c6:	e002      	b.n	80007ce <Get_CRLH_Position+0x18e>
	case PIN_15:
		shift = 28;
 80007c8:	231c      	movs	r3, #28
 80007ca:	73fb      	strb	r3, [r7, #15]
		break;
 80007cc:	bf00      	nop

	}
	return shift;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop

080007dc <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	2bff      	cmp	r3, #255	; 0xff
 80007f0:	d801      	bhi.n	80007f6 <GPIO_init+0x1a>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	e001      	b.n	80007fa <GPIO_init+0x1e>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3304      	adds	r3, #4
 80007fa:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff1d 	bl	8000640 <Get_CRLH_Position>
 8000806:	4603      	mov	r3, r0
 8000808:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	210f      	movs	r1, #15
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	43d2      	mvns	r2, r2
 8000818:	401a      	ands	r2, r3
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	789b      	ldrb	r3, [r3, #2]
 8000826:	2b07      	cmp	r3, #7
 8000828:	d00b      	beq.n	8000842 <GPIO_init+0x66>
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	789b      	ldrb	r3, [r3, #2]
 800082e:	2b06      	cmp	r3, #6
 8000830:	d007      	beq.n	8000842 <GPIO_init+0x66>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	789b      	ldrb	r3, [r3, #2]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d003      	beq.n	8000842 <GPIO_init+0x66>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	2b05      	cmp	r3, #5
 8000840:	d10e      	bne.n	8000860 <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| pinConfig->Output_Speed) & 0x0f);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	3b04      	subs	r3, #4
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	b25a      	sxtb	r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	78db      	ldrb	r3, [r3, #3]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 030f 	and.w	r3, r3, #15
 800085c:	75fb      	strb	r3, [r7, #23]
 800085e:	e02c      	b.n	80008ba <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d003      	beq.n	8000870 <GPIO_init+0x94>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	789b      	ldrb	r3, [r3, #2]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d107      	bne.n	8000880 <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	75fb      	strb	r3, [r7, #23]
 800087e:	e01c      	b.n	80008ba <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	789b      	ldrb	r3, [r3, #2]
 8000884:	2b10      	cmp	r3, #16
 8000886:	d102      	bne.n	800088e <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 8000888:	2304      	movs	r3, #4
 800088a:	75fb      	strb	r3, [r7, #23]
 800088c:	e015      	b.n	80008ba <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 800088e:	2308      	movs	r3, #8
 8000890:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	789b      	ldrb	r3, [r3, #2]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d107      	bne.n	80008aa <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	8812      	ldrh	r2, [r2, #0]
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	e007      	b.n	80008ba <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	8812      	ldrh	r2, [r2, #0]
 80008b2:	43d2      	mvns	r2, r2
 80008b4:	401a      	ands	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	7df9      	ldrb	r1, [r7, #23]
 80008c0:	7bfa      	ldrb	r2, [r7, #15]
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	431a      	orrs	r2, r3
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <I2C_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void I2C_init(I2C_pinConfig_t *I2C_pinConfig, I2C_Registers_t *I2Cx) {
 80008d4:	b5b0      	push	{r4, r5, r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]

	uint16 tmpreg=0, freqrange = 0, result = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	82fb      	strh	r3, [r7, #22]
 80008e2:	2300      	movs	r3, #0
 80008e4:	82bb      	strh	r3, [r7, #20]
 80008e6:	2300      	movs	r3, #0
 80008e8:	827b      	strh	r3, [r7, #18]
	uint32 pclk1 = 8000000;
 80008ea:	4b71      	ldr	r3, [pc, #452]	; (8000ab0 <I2C_init+0x1dc>)
 80008ec:	60fb      	str	r3, [r7, #12]

       I2Cx->CR1  = 0;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
       I2Cx->CR2  = 0;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
       I2Cx->CCR  = 0;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
       I2Cx->OAR1 = 0;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
       I2Cx->OAR2 = 0;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
	/*            		Enable I2C clocks  					    */
	if (I2Cx == I2C1) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4a69      	ldr	r2, [pc, #420]	; (8000ab4 <I2C_init+0x1e0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d10e      	bne.n	8000932 <I2C_init+0x5e>
		Global_I2C_pinConfig[I2C1_Index] = *I2C_pinConfig;
 8000914:	4a68      	ldr	r2, [pc, #416]	; (8000ab8 <I2C_init+0x1e4>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4614      	mov	r4, r2
 800091a:	461d      	mov	r5, r3
 800091c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000920:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_CLK_EN(APB1_ID,I2C1_ID);
 8000928:	2115      	movs	r1, #21
 800092a:	2000      	movs	r0, #0
 800092c:	f000 fb9e 	bl	800106c <RCC_CLK_EN>
 8000930:	e012      	b.n	8000958 <I2C_init+0x84>
	} else if (I2Cx == I2C2) {
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4a61      	ldr	r2, [pc, #388]	; (8000abc <I2C_init+0x1e8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10e      	bne.n	8000958 <I2C_init+0x84>
		Global_I2C_pinConfig[I2C2_Index] = *I2C_pinConfig;
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <I2C_init+0x1e4>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	f103 0420 	add.w	r4, r3, #32
 8000942:	4615      	mov	r5, r2
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800094c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_CLK_EN(APB1_ID,I2C2_ID);
 8000950:	2116      	movs	r1, #22
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fb8a 	bl	800106c <RCC_CLK_EN>
	}

	if (I2C_pinConfig->I2C_Mode == I2C_Mode_I2C) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d17d      	bne.n	8000a5c <I2C_init+0x188>
		/*
		 * 1. Configure CR2 register
		 * The FREQ bits must be configured with the APB clock frequency value (I2C peripheral connected to APB)
		 */

		tmpreg = I2Cx->CR2;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	82fb      	strh	r3, [r7, #22]
		tmpreg &= ~(0x3F << 0);
 8000966:	8afb      	ldrh	r3, [r7, #22]
 8000968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800096c:	82fb      	strh	r3, [r7, #22]
		pclk1 = RCC_getPCKL1_Freq();
 800096e:	f000 fb55 	bl	800101c <RCC_getPCKL1_Freq>
 8000972:	60f8      	str	r0, [r7, #12]
		freqrange = (uint16) (pclk1 / 1000000); // to configure xMegaHz in register CR2, write xHz
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <I2C_init+0x1ec>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	0c9b      	lsrs	r3, r3, #18
 800097e:	82bb      	strh	r3, [r7, #20]
		tmpreg |= freqrange;
 8000980:	8afa      	ldrh	r2, [r7, #22]
 8000982:	8abb      	ldrh	r3, [r7, #20]
 8000984:	4313      	orrs	r3, r2
 8000986:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = tmpreg;
 8000988:	8afa      	ldrh	r2, [r7, #22]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	605a      	str	r2, [r3, #4]
		 * Sm mode or SMBus:
		 * Thigh = Tlow = CCR * TPCLK1
		 */

		//The CCR register must be configured only when the I2C is disabled
		I2Cx->CR1 &= ~(1 << 0);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 0201 	bic.w	r2, r3, #1
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	601a      	str	r2, [r3, #0]
		tmpreg = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	82fb      	strh	r3, [r7, #22]

		if ((I2C_pinConfig->Clock_Speed == I2C_CLK_SM_100K)	|| (I2C_pinConfig->Clock_Speed == I2C_CLK_SM_50K)) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a48      	ldr	r2, [pc, #288]	; (8000ac4 <I2C_init+0x1f0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d004      	beq.n	80009b2 <I2C_init+0xde>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b0:	d112      	bne.n	80009d8 <I2C_init+0x104>
			result = (uint16)(pclk1 / ( I2C_pinConfig->Clock_Speed << 1   )   );
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	827b      	strh	r3, [r7, #18]

			tmpreg |= result;
 80009c0:	8afa      	ldrh	r2, [r7, #22]
 80009c2:	8a7b      	ldrh	r3, [r7, #18]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	82fb      	strh	r3, [r7, #22]

			I2Cx->CCR = tmpreg;
 80009c8:	8afa      	ldrh	r2, [r7, #22]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	61da      	str	r2, [r3, #28]

			// Maximum rise time in Fm/Sm mode (Master mode)
			//  the value of FREQ[5:0] bits + 1
			I2Cx->TRISE = freqrange + 1;
 80009ce:	8abb      	ldrh	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	461a      	mov	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	621a      	str	r2, [r3, #32]

		} else {
			//FM Not supported
		}
		/*            		Configure CR1   					    */
		tmpreg = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	82fb      	strh	r3, [r7, #22]
		tmpreg = I2Cx->CR1;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	82fb      	strh	r3, [r7, #22]
		tmpreg |= (uint16) (I2C_pinConfig->ACK_Enable
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	699b      	ldr	r3, [r3, #24]
				| I2C_pinConfig->Stretch_Mode | I2C_pinConfig->I2C_Mode);
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	689b      	ldr	r3, [r3, #8]
		tmpreg |= (uint16) (I2C_pinConfig->ACK_Enable
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR1 = tmpreg;
 8000a02:	8afa      	ldrh	r2, [r7, #22]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	601a      	str	r2, [r3, #0]

		/*            		Configure OAR1 & OAR2   					    */
		tmpreg = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	82fb      	strh	r3, [r7, #22]
		if (I2C_pinConfig->slave_address.Enable_Dual_Mode) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	899b      	ldrh	r3, [r3, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00f      	beq.n	8000a34 <I2C_init+0x160>
			tmpreg |= (1 << 0); 	//Dual addressing mode enable
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	82fb      	strh	r3, [r7, #22]
			tmpreg |=
					(I2C_pinConfig->slave_address.slave_secndary_address << 1);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	8a1b      	ldrh	r3, [r3, #16]
 8000a20:	005b      	lsls	r3, r3, #1
			tmpreg |=
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8000a2e:	8afa      	ldrh	r2, [r7, #22]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	60da      	str	r2, [r3, #12]
		}
		tmpreg = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	82fb      	strh	r3, [r7, #22]
		tmpreg |= (I2C_pinConfig->slave_address.slave_primary_address << 1);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	89db      	ldrh	r3, [r3, #14]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	b21a      	sxth	r2, r3
 8000a40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_pinConfig->slave_address.slave_address_mode; // 10 bit mode not supported
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	8afb      	ldrh	r3, [r7, #22]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8000a56:	8afa      	ldrh	r2, [r7, #22]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	609a      	str	r2, [r3, #8]
	} else {
		//Not supported SMUBUS mode
	}

	//Interrupt Mode (slave mode)
	if (I2C_pinConfig->P_Slave_CallBack_Fun != NULL) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d01a      	beq.n	8000a9a <I2C_init+0x1c6>
		I2Cx->CR2 |= (1 << 8) | (1 << 9) | (1 << 10);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
		if (I2Cx == I2C1) {
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <I2C_init+0x1e0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <I2C_init+0x1b2>
			NVIC_Enable(NVIC_I2C1_EV);
 8000a78:	201f      	movs	r0, #31
 8000a7a:	f000 fa7d 	bl	8000f78 <NVIC_Enable>
			NVIC_Enable(NVIC_I2C1_ER);
 8000a7e:	2020      	movs	r0, #32
 8000a80:	f000 fa7a 	bl	8000f78 <NVIC_Enable>
 8000a84:	e009      	b.n	8000a9a <I2C_init+0x1c6>

		} else if (I2Cx == I2C2) {
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <I2C_init+0x1e8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d105      	bne.n	8000a9a <I2C_init+0x1c6>
			NVIC_Enable(NVIC_I2C1_EV);
 8000a8e:	201f      	movs	r0, #31
 8000a90:	f000 fa72 	bl	8000f78 <NVIC_Enable>
			NVIC_Enable(NVIC_I2C1_ER);
 8000a94:	2020      	movs	r0, #32
 8000a96:	f000 fa6f 	bl	8000f78 <NVIC_Enable>
		}
	}

	/*            		Periphral Enable 					    */

	I2Cx->CR1 |= (1 << 0);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f043 0201 	orr.w	r2, r3, #1
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bdb0      	pop	{r4, r5, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	007a1200 	.word	0x007a1200
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	20000088 	.word	0x20000088
 8000abc:	40005800 	.word	0x40005800
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <I2C_GPIO_SetPins>:
		NVIC_Disable(NVIC_I2C2_ER);
		NVIC_Disable(NVIC_I2C2_EV);
	}
}

void I2C_GPIO_SetPins(I2C_Registers_t *I2Cx) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t GPIO_pinConfig;

	if (I2Cx == I2C1) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <I2C_GPIO_SetPins+0x78>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d114      	bne.n	8000b02 <I2C_GPIO_SetPins+0x3a>
		//I2C1 SDA : PB7  SCL : PB6
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_OD;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_6;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4816      	ldr	r0, [pc, #88]	; (8000b44 <I2C_GPIO_SetPins+0x7c>)
 8000aec:	f7ff fe76 	bl	80007dc <GPIO_init>

		GPIO_pinConfig.Pin_Number = PIN_7;
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <I2C_GPIO_SetPins+0x7c>)
 8000afc:	f7ff fe6e 	bl	80007dc <GPIO_init>

		GPIO_pinConfig.Pin_Number = PIN_10;
		GPIO_init(GPIOB, &GPIO_pinConfig);

	}
}
 8000b00:	e019      	b.n	8000b36 <I2C_GPIO_SetPins+0x6e>
	} else if (I2Cx == I2C2) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <I2C_GPIO_SetPins+0x80>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d115      	bne.n	8000b36 <I2C_GPIO_SetPins+0x6e>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_OD;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_11;
 8000b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b16:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <I2C_GPIO_SetPins+0x7c>)
 8000b20:	f7ff fe5c 	bl	80007dc <GPIO_init>
		GPIO_pinConfig.Pin_Number = PIN_10;
 8000b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b28:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <I2C_GPIO_SetPins+0x7c>)
 8000b32:	f7ff fe53 	bl	80007dc <GPIO_init>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40005800 	.word	0x40005800

08000b4c <I2C_Master_TX>:

void I2C_Master_TX(I2C_Registers_t *I2Cx, uint16 slaveAddress, uint8 *data,
		uint32 dataLen, Stop_Condition_t stop, Repeated_Start_t start) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	817b      	strh	r3, [r7, #10]
	   volatile uint32 dummyRead __attribute__((unused));
	// 1.Generate start condition.
	I2C_GenerateStart(I2Cx, start, I2C_ENABLE);
 8000b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f843 	bl	8000bf0 <I2C_GenerateStart>
	// 2.Set when a Start condition generated.
	while (!I2C_GetFlagStatus(I2Cx, EV5))
 8000b6a:	bf00      	nop
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 f880 	bl	8000c74 <I2C_GetFlagStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f8      	beq.n	8000b6c <I2C_Master_TX+0x20>
		;
	//3.Send slave address
	I2C_SendSlaveAddress(I2Cx,slaveAddress, I2C_TX);
 8000b7a:	897b      	ldrh	r3, [r7, #10]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f8ef 	bl	8000d64 <I2C_SendSlaveAddress>
	//4.Set by hardware as soon as the received slave address matched with the OAR registers
	while (!I2C_GetFlagStatus(I2Cx, EV6));
 8000b86:	bf00      	nop
 8000b88:	2102      	movs	r1, #2
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f872 	bl	8000c74 <I2C_GetFlagStatus>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <I2C_Master_TX+0x3c>
	//5. check TRA , BUSY, TXE, MSL
	while (!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TX));
 8000b96:	bf00      	nop
 8000b98:	2106      	movs	r1, #6
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f000 f86a 	bl	8000c74 <I2C_GetFlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f8      	beq.n	8000b98 <I2C_Master_TX+0x4c>
	//6. Send data
	for(uint8 i =0 ; i <dataLen ; i++){
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	e011      	b.n	8000bd0 <I2C_Master_TX+0x84>
		I2Cx->DR = data[i];
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
		while (!I2C_GetFlagStatus(I2Cx, EV8));
 8000bba:	bf00      	nop
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f000 f858 	bl	8000c74 <I2C_GetFlagStatus>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f8      	beq.n	8000bbc <I2C_Master_TX+0x70>
	for(uint8 i =0 ; i <dataLen ; i++){
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	75fb      	strb	r3, [r7, #23]
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8e9      	bhi.n	8000bac <I2C_Master_TX+0x60>

	}
	  // Wait for byte transfer to complete
	  //  while(!GET_BIT(I2C[I2CNum]->SR1,2));
	//7. Send Stop condition
	if(stop == STOP)
 8000bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d103      	bne.n	8000be8 <I2C_Master_TX+0x9c>
		I2C_GenerateStop(I2Cx, I2C_ENABLE);
 8000be0:	2100      	movs	r1, #0
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f82b 	bl	8000c3e <I2C_GenerateStop>

}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <I2C_GenerateStart>:


}

void I2C_GenerateStart(I2C_Registers_t *I2Cx, Repeated_Start_t start,
		Functional_State_t State) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	70bb      	strb	r3, [r7, #2]

	// Setting the START bit causes the interface to generate a Start condition and to switch to
	//Master mode (MSL bit set) when the BUSY bit is cleared

	if (start != REPEATED_START) {
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d007      	beq.n	8000c16 <I2C_GenerateStart+0x26>
		while (I2C_GetFlagStatus(I2Cx, BUS_BUSY))
 8000c06:	bf00      	nop
 8000c08:	2100      	movs	r1, #0
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f832 	bl	8000c74 <I2C_GetFlagStatus>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f8      	bne.n	8000c08 <I2C_GenerateStart+0x18>
			;

	}
	if (State != I2C_DISABLE) {
 8000c16:	78bb      	ldrb	r3, [r7, #2]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d006      	beq.n	8000c2a <I2C_GenerateStart+0x3a>
		/*
		 * In Master Mode:
		 0: No Start generation
		 1: Repeated start generation
		 */
		I2Cx->CR1 |= (1 << 8);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	601a      	str	r2, [r3, #0]
	} else {
		I2Cx->CR1 &= ~(1 << 8);

	}

}
 8000c28:	e005      	b.n	8000c36 <I2C_GenerateStart+0x46>
		I2Cx->CR1 &= ~(1 << 8);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <I2C_GenerateStop>:
void I2C_GenerateStop(I2C_Registers_t *I2Cx ,Functional_State_t State){
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	70fb      	strb	r3, [r7, #3]

	if (State != I2C_DISABLE) {
 8000c4a:	78fb      	ldrb	r3, [r7, #3]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d006      	beq.n	8000c5e <I2C_GenerateStop+0x20>
			/*
			 * In Master Mode:
			0: No Stop generation.
			1: Stop generation after the current byte transfer or after the current Start condition is sent.
			 */
			I2Cx->CR1 |= (1 << 9);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	601a      	str	r2, [r3, #0]
		} else {
			I2Cx->CR1 &= ~(1 << 9);

		}

}
 8000c5c:	e005      	b.n	8000c6a <I2C_GenerateStop+0x2c>
			I2Cx->CR1 &= ~(1 << 9);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <I2C_GetFlagStatus>:
				I2Cx->CR1 &= ~(1 << 10);

			}
}

FlagStatus I2C_GetFlagStatus(I2C_Registers_t *I2Cx, Status Flag) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
	FlagStatus bitStatus = RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
	uint32 dummyRead = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]

	switch (Flag) {
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d864      	bhi.n	8000d58 <I2C_GetFlagStatus+0xe4>
 8000c8e:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <I2C_GetFlagStatus+0x20>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000cb1 	.word	0x08000cb1
 8000c98:	08000cc7 	.word	0x08000cc7
 8000c9c:	08000cdd 	.word	0x08000cdd
 8000ca0:	08000cf3 	.word	0x08000cf3
 8000ca4:	08000cf3 	.word	0x08000cf3
 8000ca8:	08000d43 	.word	0x08000d43
 8000cac:	08000d09 	.word	0x08000d09
	case BUS_BUSY:
		bitStatus = (I2Cx->SR2 & (1 << 1)) ? SET : RESET;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bf14      	ite	ne
 8000cbc:	2301      	movne	r3, #1
 8000cbe:	2300      	moveq	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e048      	b.n	8000d58 <I2C_GetFlagStatus+0xe4>
	case EV5:
		bitStatus = ((I2Cx->SR1) & (1 << 0)) ? SET : RESET;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cda:	e03d      	b.n	8000d58 <I2C_GetFlagStatus+0xe4>
	case EV6:
		bitStatus = ((I2Cx->SR1) & (1 << 1)) ? SET : RESET;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	73fb      	strb	r3, [r7, #15]
		break;
 8000cf0:	e032      	b.n	8000d58 <I2C_GetFlagStatus+0xe4>
	case EV8:
	case EV8_1:  //Data register empty (transmitters)
		bitStatus = (I2Cx->SR1 & (1 << 7)) ? SET : RESET;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73fb      	strb	r3, [r7, #15]
		break;
 8000d06:	e027      	b.n	8000d58 <I2C_GetFlagStatus+0xe4>
	case MASTER_BYTE_TX:
		bitStatus = ((I2Cx->SR1 & (1 << 7)) && (I2Cx->SR2 & (1 << 1)) &&(I2Cx->SR2 & (1 << 0)) &&(I2Cx->SR2 & (1 << 2))) ? SET : RESET;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <I2C_GetFlagStatus+0xc8>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00d      	beq.n	8000d3c <I2C_GetFlagStatus+0xc8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d007      	beq.n	8000d3c <I2C_GetFlagStatus+0xc8>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <I2C_GetFlagStatus+0xc8>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <I2C_GetFlagStatus+0xca>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d40:	e00a      	b.n	8000d58 <I2C_GetFlagStatus+0xe4>
	case EV7:
			bitStatus = (I2Cx->SR1 & (1 << 6)) ? SET : RESET;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	73fb      	strb	r3, [r7, #15]
			break;
 8000d56:	bf00      	nop
	}


	return bitStatus;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <I2C_SendSlaveAddress>:

void I2C_SendSlaveAddress(I2C_Registers_t *I2Cx , uint16 slaveAddress, I2C_Direction_t Direction){
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	707b      	strb	r3, [r7, #1]
	// 10 bit mode is not supported
		uint8 index = (I2Cx == I2C1) ? I2C1_Index: I2C2_Index;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <I2C_SendSlaveAddress+0x58>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	bf14      	ite	ne
 8000d7c:	2301      	movne	r3, #1
 8000d7e:	2300      	moveq	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	73fb      	strb	r3, [r7, #15]
if(Global_I2C_pinConfig[index].slave_address.slave_address_mode == I2C_Slave_7Bit){
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <I2C_SendSlaveAddress+0x5c>)
 8000d88:	015b      	lsls	r3, r3, #5
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3314      	adds	r3, #20
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10e      	bne.n	8000db2 <I2C_SendSlaveAddress+0x4e>
	  if(Direction == I2C_TX){
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d104      	bne.n	8000da4 <I2C_SendSlaveAddress+0x40>
		  // To enter Transmitter mode, a master sends the slave address with LSB reset.
		  slaveAddress &= (uint8)(~0x0001);
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000da0:	807b      	strh	r3, [r7, #2]
 8000da2:	e003      	b.n	8000dac <I2C_SendSlaveAddress+0x48>
	  }else{
		  //  To enter Receiver mode, a master sends the slave address with LSB set.
		  slaveAddress |= 0x0001;
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	807b      	strh	r3, [r7, #2]
	  }I2Cx->DR = 	slaveAddress;
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	611a      	str	r2, [r3, #16]
}else{
	// not supported
}


}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	20000088 	.word	0x20000088

08000dc4 <I2C1_EV_IRQHandler>:
}
uint8 I2C_Slave_RX(I2C_Registers_t *I2Cx){
	return (uint8)I2Cx->DR;
}

void I2C1_EV_IRQHandler(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
	volatile uint32 dummy_read = 0 ;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
	I2C_Registers_t* I2Cx = I2C1 ;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <I2C1_EV_IRQHandler+0xe8>)
 8000dd0:	617b      	str	r3, [r7, #20]
		//Interrupt handling for both master and slave mode of a device
		uint32 temp1, temp2, temp3;

		temp1   = I2Cx->CR2 & (  1<<9) ;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dda:	613b      	str	r3, [r7, #16]
		temp2   = I2Cx->CR2 & ( 1<<10) ;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	60fb      	str	r3, [r7, #12]
		temp3  = I2Cx->SR1 & ( 1<<8);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dee:	60bb      	str	r3, [r7, #8]


		// Handle For interrupt generated by STOPF event
			// Note : Stop detection flag is applicable only slave mode
			if(temp1 && temp3)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00a      	beq.n	8000e0c <I2C1_EV_IRQHandler+0x48>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <I2C1_EV_IRQHandler+0x48>
			{
				//STOF flag is set
				//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
				I2Cx->CR1 |= 0x0000;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	601a      	str	r2, [r3, #0]
				Slave_States(I2Cx,EV_STOP);
 8000e04:	2100      	movs	r1, #0
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f000 f852 	bl	8000eb0 <Slave_States>


			}
			//----------------------------------------------------------
			temp3  = I2Cx->SR1 & (1<<1);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by ADDR event
			//Note : When master mode : Address is sent
			//		 When Slave mode   : Address matched with own address
			if(temp1 && temp3)
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d012      	beq.n	8000e42 <I2C1_EV_IRQHandler+0x7e>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00f      	beq.n	8000e42 <I2C1_EV_IRQHandler+0x7e>
			{
				// interrupt is generated because of ADDR event
				//check for device mode
				if(I2Cx->SR2 & ( 1<<0))
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d109      	bne.n	8000e42 <I2C1_EV_IRQHandler+0x7e>

				}else
				{
					//slave mode
					//clear the ADDR flag ( read SR1 , read SR2)
					dummy_read = I2Cx->SR1;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	607b      	str	r3, [r7, #4]
					dummy_read = I2Cx->SR2;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	607b      	str	r3, [r7, #4]
					Slave_States(I2Cx,EV_ADDR_Matched);
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f000 f837 	bl	8000eb0 <Slave_States>

				}
			}
			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<7);
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by TXE event
			if(temp1 && temp2 && temp3)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00f      	beq.n	8000e72 <I2C1_EV_IRQHandler+0xae>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00c      	beq.n	8000e72 <I2C1_EV_IRQHandler+0xae>
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d009      	beq.n	8000e72 <I2C1_EV_IRQHandler+0xae>
			{
				//Check for device mode
				if(I2Cx->SR2 & (1<<0))
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <I2C1_EV_IRQHandler+0xae>
				{

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REQ);
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f000 f81f 	bl	8000eb0 <Slave_States>
				}
			}

			//----------------------------------------------------------

			temp3  = I2Cx->SR1 & ( 1<<6);
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	60bb      	str	r3, [r7, #8]
			// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
			if(temp1 && temp2 && temp3)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00f      	beq.n	8000ea2 <I2C1_EV_IRQHandler+0xde>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <I2C1_EV_IRQHandler+0xde>
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d009      	beq.n	8000ea2 <I2C1_EV_IRQHandler+0xde>
			{
				//check device mode .
				if(I2Cx->SR2 & ( 1<<0))
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <I2C1_EV_IRQHandler+0xde>
					//The device is master

				}else
				{
					//slave
					Slave_States(I2Cx,EV_DATA_REC);
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f000 f807 	bl	8000eb0 <Slave_States>

				}
			}
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40005400 	.word	0x40005400

08000eb0 <Slave_States>:


void Slave_States (I2C_Registers_t* I2Cx  ,Slave_state state)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
	uint8 index =    I2Cx == I2C1 ? I2C1_Index: I2C2_Index ;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a2c      	ldr	r2, [pc, #176]	; (8000f70 <Slave_States+0xc0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d84a      	bhi.n	8000f68 <Slave_States+0xb8>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <Slave_States+0x28>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef3 	.word	0x08000ef3
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000f11 	.word	0x08000f11
 8000ee4:	08000f23 	.word	0x08000f23
 8000ee8:	08000f41 	.word	0x08000f41
	{

	case ERR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000ef0:	e03a      	b.n	8000f68 <Slave_States+0xb8>
	}

	case EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d02f      	beq.n	8000f5e <Slave_States+0xae>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_STOP) ;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <Slave_States+0xc4>)
 8000f02:	015b      	lsls	r3, r3, #5
 8000f04:	4413      	add	r3, r2
 8000f06:	331c      	adds	r3, #28
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	4798      	blx	r3
		}

		break ;
 8000f0e:	e026      	b.n	8000f5e <Slave_States+0xae>
	}

	case EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_ADDR_Matched) ;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <Slave_States+0xc4>)
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4413      	add	r3, r2
 8000f18:	331c      	adds	r3, #28
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	4798      	blx	r3


		break ;
 8000f20:	e022      	b.n	8000f68 <Slave_States+0xb8>
	}

	case EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( 1<<2))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d019      	beq.n	8000f62 <Slave_States+0xb2>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REQ) ;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <Slave_States+0xc4>)
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	4413      	add	r3, r2
 8000f36:	331c      	adds	r3, #28
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	4798      	blx	r3

		}

		break ;
 8000f3e:	e010      	b.n	8000f62 <Slave_States+0xb2>
	}
	case EV_DATA_REC:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( 1<<2)))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10c      	bne.n	8000f66 <Slave_States+0xb6>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_pinConfig[index].P_Slave_CallBack_Fun (EV_DATA_REC) ;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <Slave_States+0xc4>)
 8000f50:	015b      	lsls	r3, r3, #5
 8000f52:	4413      	add	r3, r2
 8000f54:	331c      	adds	r3, #28
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2004      	movs	r0, #4
 8000f5a:	4798      	blx	r3

		}

		break ;
 8000f5c:	e003      	b.n	8000f66 <Slave_States+0xb6>
		break ;
 8000f5e:	bf00      	nop
 8000f60:	e002      	b.n	8000f68 <Slave_States+0xb8>
		break ;
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <Slave_States+0xb8>
		break ;
 8000f66:	bf00      	nop
	}
	}

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40005400 	.word	0x40005400
 8000f74:	20000088 	.word	0x20000088

08000f78 <NVIC_Enable>:
 * @brief          - Enables the NVIC interrupt pin
 * @param [in]     - IRQ_Number :  The specified Interrupt Number to be enabled
 * @retval         - none
 */

void NVIC_Enable(uint8 IRQ_Number) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	if ((IRQ_Number >= 0) && (IRQ_Number <= 31)) {
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b1f      	cmp	r3, #31
 8000f86:	d809      	bhi.n	8000f9c <NVIC_Enable+0x24>
		ISER0 |= (1U << IRQ_Number);
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <NVIC_Enable+0x50>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <NVIC_Enable+0x50>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
		ISER1 |= (1U << (IRQ_Number - 32));
	}
}
 8000f9a:	e00f      	b.n	8000fbc <NVIC_Enable+0x44>
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b1f      	cmp	r3, #31
 8000fa0:	d90c      	bls.n	8000fbc <NVIC_Enable+0x44>
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b3b      	cmp	r3, #59	; 0x3b
 8000fa6:	d809      	bhi.n	8000fbc <NVIC_Enable+0x44>
		ISER1 |= (1U << (IRQ_Number - 32));
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <NVIC_Enable+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	3b20      	subs	r3, #32
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	4905      	ldr	r1, [pc, #20]	; (8000fcc <NVIC_Enable+0x54>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000e104 	.word	0xe000e104

08000fd0 <RCC_getSYSCLK_Freq>:
 1101: SYSCLK divided by 128
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512
 */
uint8 AHB_PrescTable[16U] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9 };
uint32 RCC_getSYSCLK_Freq(void) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	/*
	 * 	00: HSI selected as system clock
	 01: HSE selected as system clock
	 10: PLL selected as system clock
	 */
	uint8 SW = (RCC->CFGR >> 2) & 0b11;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <RCC_getSYSCLK_Freq+0x40>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	71fb      	strb	r3, [r7, #7]
	switch (SW) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d00a      	beq.n	8001000 <RCC_getSYSCLK_Freq+0x30>
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	dc0a      	bgt.n	8001004 <RCC_getSYSCLK_Freq+0x34>
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <RCC_getSYSCLK_Freq+0x28>
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d002      	beq.n	8000ffc <RCC_getSYSCLK_Freq+0x2c>
 8000ff6:	e005      	b.n	8001004 <RCC_getSYSCLK_Freq+0x34>
	case 0:
		return HSI ;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <RCC_getSYSCLK_Freq+0x44>)
 8000ffa:	e004      	b.n	8001006 <RCC_getSYSCLK_Freq+0x36>
		break;
	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		return HSE ;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <RCC_getSYSCLK_Freq+0x48>)
 8000ffe:	e002      	b.n	8001006 <RCC_getSYSCLK_Freq+0x36>
		break;
	case 2:
		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return HSE ;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <RCC_getSYSCLK_Freq+0x48>)
 8001002:	e000      	b.n	8001006 <RCC_getSYSCLK_Freq+0x36>
		break;
	}
	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200
 8001018:	00f42400 	.word	0x00f42400

0800101c <RCC_getPCKL1_Freq>:

uint32 RCC_getPCKL1_Freq(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 8) & 0b111)]); // First right shift is multiplication
 8001020:	f000 f810 	bl	8001044 <RCC_getHCKL_Freq>
 8001024:	4602      	mov	r2, r0
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <RCC_getPCKL1_Freq+0x20>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	4903      	ldr	r1, [pc, #12]	; (8001040 <RCC_getPCKL1_Freq+0x24>)
 8001032:	5ccb      	ldrb	r3, [r1, r3]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	20000000 	.word	0x20000000

08001044 <RCC_getHCKL_Freq>:
uint32 RCC_getPCKL2_Freq(void) {
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 11) & 0b111)]);
}
uint32 RCC_getHCKL_Freq(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getSYSCLK_Freq() >> AHB_PrescTable[((RCC->CFGR >> 4) & 0b1111)]);
 8001048:	f7ff ffc2 	bl	8000fd0 <RCC_getSYSCLK_Freq>
 800104c:	4602      	mov	r2, r0
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <RCC_getHCKL_Freq+0x20>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	4903      	ldr	r1, [pc, #12]	; (8001068 <RCC_getHCKL_Freq+0x24>)
 800105a:	5ccb      	ldrb	r3, [r1, r3]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000
 8001068:	20000008 	.word	0x20000008

0800106c <RCC_CLK_EN>:
		break;

	}
}

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d01c      	beq.n	80010bc <RCC_CLK_EN+0x50>
 8001082:	2b02      	cmp	r3, #2
 8001084:	dc25      	bgt.n	80010d2 <RCC_CLK_EN+0x66>
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <RCC_CLK_EN+0x24>
 800108a:	2b01      	cmp	r3, #1
 800108c:	d00b      	beq.n	80010a6 <RCC_CLK_EN+0x3a>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 800108e:	e020      	b.n	80010d2 <RCC_CLK_EN+0x66>
		RCC->ABP1ENR |= (1 << periphralID);
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <RCC_CLK_EN+0x70>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <RCC_CLK_EN+0x70>)
 80010a0:	430b      	orrs	r3, r1
 80010a2:	61d3      	str	r3, [r2, #28]
		break;
 80010a4:	e015      	b.n	80010d2 <RCC_CLK_EN+0x66>
		RCC->ABP2ENR |= (1 << periphralID);
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <RCC_CLK_EN+0x70>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <RCC_CLK_EN+0x70>)
 80010b6:	430b      	orrs	r3, r1
 80010b8:	6193      	str	r3, [r2, #24]
		break;
 80010ba:	e00a      	b.n	80010d2 <RCC_CLK_EN+0x66>
		RCC->AHBENR |= (1 << periphralID);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <RCC_CLK_EN+0x70>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4611      	mov	r1, r2
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <RCC_CLK_EN+0x70>)
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6153      	str	r3, [r2, #20]
		break;
 80010d0:	bf00      	nop
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000

080010e0 <SPI1_IRQHandler>:
	}
	*pData = SPIx->DR;
}

//ISR
void SPI1_IRQHandler(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI1->SR & (1 << 1)) >> 1);
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SPI1_IRQHandler+0x50>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	793b      	ldrb	r3, [r7, #4]
 80010f4:	f362 0300 	bfi	r3, r2, #0, #1
 80010f8:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1 << 0)) >> 0);
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <SPI1_IRQHandler+0x50>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2da      	uxtb	r2, r3
 8001104:	793b      	ldrb	r3, [r7, #4]
 8001106:	f362 0341 	bfi	r3, r2, #1, #1
 800110a:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1 << 4)) >> 4);
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SPI1_IRQHandler+0x50>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	793b      	ldrb	r3, [r7, #4]
 800111a:	f362 0382 	bfi	r3, r2, #2, #1
 800111e:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI1_Index].P_CallBackFun(IRQ);
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SPI1_IRQHandler+0x54>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	7938      	ldrb	r0, [r7, #4]
 8001126:	4798      	blx	r3
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40013000 	.word	0x40013000
 8001134:	200000c8 	.word	0x200000c8

08001138 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	struct IRQ_source_t IRQ;
	IRQ.TXE = ((SPI2->SR & (1 << 1)) >> 1);
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <SPI2_IRQHandler+0x50>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	f362 0300 	bfi	r3, r2, #0, #1
 8001150:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1 << 0)) >> 0);
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <SPI2_IRQHandler+0x50>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	793b      	ldrb	r3, [r7, #4]
 800115e:	f362 0341 	bfi	r3, r2, #1, #1
 8001162:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1 << 4)) >> 4);
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SPI2_IRQHandler+0x50>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	f362 0382 	bfi	r3, r2, #2, #1
 8001176:	713b      	strb	r3, [r7, #4]
	Global_SPI_pinConfig[SPI2_Index].P_CallBackFun(IRQ);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <SPI2_IRQHandler+0x54>)
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	7938      	ldrb	r0, [r7, #4]
 800117e:	4798      	blx	r3
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40003800 	.word	0x40003800
 800118c:	200000c8 	.word	0x200000c8

08001190 <STK_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void STK_init() {
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
#if STK_CLK_SRC == AHB_8
	SYSTICK->CTRL &= ~(1 << 2);
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <STK_init+0x20>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <STK_init+0x20>)
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6013      	str	r3, [r2, #0]
	microSecond = 1;		// Assuming system clock is HSI
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <STK_init+0x24>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
#elif STK_CLK_SRC =AHB
	SYSTICK->CTRL |= (1<<2);
	microSecond = 8;		// Assuming system clock is HSI
#endif

}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010
 80011b4:	200000f8 	.word	0x200000f8

080011b8 <STK_delayMs>:
	SYSTICK->VAL = 0;
	SYSTICK->CTRL &= ~(1<<0);

}

void STK_delayMs(uint32 time) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	for (uint32 i=0; i < time; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e029      	b.n	800121a <STK_delayMs+0x62>
		SYSTICK->LOAD = 1000*microSecond;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <STK_delayMs+0x78>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <STK_delayMs+0x7c>)
 80011cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	6053      	str	r3, [r2, #4]
		//Disable Interrupt
		CLEAR(SYSTICK->CTRL, 1);
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <STK_delayMs+0x7c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a16      	ldr	r2, [pc, #88]	; (8001234 <STK_delayMs+0x7c>)
 80011dc:	f023 0302 	bic.w	r3, r3, #2
 80011e0:	6013      	str	r3, [r2, #0]
		//Enable Systick
		SET(SYSTICK->CTRL, 0);
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <STK_delayMs+0x7c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <STK_delayMs+0x7c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6013      	str	r3, [r2, #0]
		//Wait for flag
		while (!GET(SYSTICK->CTRL, 16))
 80011ee:	bf00      	nop
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <STK_delayMs+0x7c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f9      	beq.n	80011f0 <STK_delayMs+0x38>
			;
		//Disable Systick
		SYSTICK->LOAD = 0;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <STK_delayMs+0x7c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
		SYSTICK->VAL = 0;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <STK_delayMs+0x7c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
		CLEAR(SYSTICK->CTRL, 0);
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <STK_delayMs+0x7c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <STK_delayMs+0x7c>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]
	for (uint32 i=0; i < time; i++) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3d1      	bcc.n	80011c6 <STK_delayMs+0xe>
	}
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200000f8 	.word	0x200000f8
 8001234:	e000e010 	.word	0xe000e010

08001238 <SysTick_Handler>:
uint32 STK_getRemainingTime() {
	return (SYSTICK->VAL);

}

void SysTick_Handler() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	uint8 flag = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	71fb      	strb	r3, [r7, #7]
#if STK_MODE == SINGLE
	SYSTICK->LOAD = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <SysTick_Handler+0x44>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <SysTick_Handler+0x44>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
	CLEAR(SYSTICK->CTRL, 0);
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <SysTick_Handler+0x44>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Handler+0x44>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 1);
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <SysTick_Handler+0x44>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <SysTick_Handler+0x44>)
 8001260:	f023 0302 	bic.w	r3, r3, #2
 8001264:	6013      	str	r3, [r2, #0]
#endif

	P_CallBack_Fun();
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SysTick_Handler+0x48>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4798      	blx	r3
	flag = GET(SYSTICK->CTRL, 16);
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <SysTick_Handler+0x44>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	e000e010 	.word	0xe000e010
 8001280:	200000fc 	.word	0x200000fc

08001284 <USART1_IRQHandler>:
	// Add the null terminator at the end of the received string.
	buffer[index] = '\0';
}

// ISR
void USART1_IRQHandler() {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <USART1_IRQHandler+0x10>)
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	4798      	blx	r3
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000100 	.word	0x20000100

08001298 <USART2_IRQHandler>:
void USART2_IRQHandler() {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <USART2_IRQHandler+0x10>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	4798      	blx	r3
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000100 	.word	0x20000100

080012ac <USART3_IRQHandler>:
void USART3_IRQHandler() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <USART3_IRQHandler+0x10>)
 80012b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b4:	4798      	blx	r3
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000100 	.word	0x20000100

080012c0 <main>:
#include "main.h"
int main() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

RCC_CLK_EN(APB2_ID,GPIOB_ID);
 80012c4:	2103      	movs	r1, #3
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fed0 	bl	800106c <RCC_CLK_EN>

  lcd_I2C_init(16,2,I2C1,0x4E);
 80012cc:	234e      	movs	r3, #78	; 0x4e
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <main+0x2c>)
 80012d0:	2102      	movs	r1, #2
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7fe ff4c 	bl	8000170 <lcd_I2C_init>


  lcd_I2C_Clear_Screen();
 80012d8:	f7ff f82e 	bl	8000338 <lcd_I2C_Clear_Screen>
  lcd_I2C_send_String("Hello World!");
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <main+0x30>)
 80012de:	f7ff f85b 	bl	8000398 <lcd_I2C_send_String>
  lcd_I2C_GOTO_XY(1, 5);
 80012e2:	2105      	movs	r1, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff f82f 	bl	8000348 <lcd_I2C_GOTO_XY>


while(1) {
 80012ea:	e7fe      	b.n	80012ea <main+0x2a>
 80012ec:	40005400 	.word	0x40005400
 80012f0:	080013a8 	.word	0x080013a8

080012f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001322:	f000 f811 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001326:	f7ff ffcb 	bl	80012c0 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001338:	080013c0 	.word	0x080013c0
  ldr r2, =_sbss
 800133c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001340:	2000013c 	.word	0x2000013c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	2600      	movs	r6, #0
 800134c:	4d0c      	ldr	r5, [pc, #48]	; (8001380 <__libc_init_array+0x38>)
 800134e:	4c0d      	ldr	r4, [pc, #52]	; (8001384 <__libc_init_array+0x3c>)
 8001350:	1b64      	subs	r4, r4, r5
 8001352:	10a4      	asrs	r4, r4, #2
 8001354:	42a6      	cmp	r6, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	f000 f81a 	bl	8001390 <_init>
 800135c:	2600      	movs	r6, #0
 800135e:	4d0a      	ldr	r5, [pc, #40]	; (8001388 <__libc_init_array+0x40>)
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <__libc_init_array+0x44>)
 8001362:	1b64      	subs	r4, r4, r5
 8001364:	10a4      	asrs	r4, r4, #2
 8001366:	42a6      	cmp	r6, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001370:	4798      	blx	r3
 8001372:	3601      	adds	r6, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	f855 3b04 	ldr.w	r3, [r5], #4
 800137a:	4798      	blx	r3
 800137c:	3601      	adds	r6, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	080013b8 	.word	0x080013b8
 8001384:	080013b8 	.word	0x080013b8
 8001388:	080013b8 	.word	0x080013b8
 800138c:	080013bc 	.word	0x080013bc

08001390 <_init>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr

0800139c <_fini>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	bf00      	nop
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr
